setdiff(geneIds, as.list(geneNames$ensembl_gene_id))
geneNames$ensembl_gene_id
?setdiff
?setdiff
as.vector(geneNames$ensembl_gene_id)
setdiff(geneIds, as.vector(geneNames$ensembl_gene_id))
setdiff(as.vector(geneIds), as.vector(geneNames$ensembl_gene_id))
class(geneIds)
class(geneName)
geneIds
setdiff(as.vector(geneIds$V1), as.vector(geneNames$ensembl_gene_id))
geneIds
geneIds == "ENSMUSG00000019769"
geneNames[1]
geneNames$V1[1]
geneNames$ensembl_gene_id[1]
geneIds[1]
geneIds$V1[1]
geneNames$ensembl_gene_id[1]
require(biomaRt)
geneIds <- read.table("testIds.txt")
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
ensemblToGeneId <- function(x,ensembl){
gene1 <- NA;
try(gene1 <- getBM(attributes='external_gene_name',filters='ensembl_gene_id',values=x,mart=ensembl),silent=T)
if(is.null(gene1)){
gene1<-NA
}
return(gene1)
}
# use function to get gene name by ensembl_gene_id
testNames <- ensemblToGeneId(geneIds, ensembl)
# or grab them directly without the function
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = geneIds, ensembl)
geneIds[1]
geneIds$V1[1]
geneNames$ensembl_gene_id[1]
testNames[1]
testNames$external_gene_name[1]
as.character(geneIds$V1[1]) # ENSMUSG00000061808
geneIds$V1[1]
geneNames$ensembl_gene_id[1] # ENSMUSG00000001025
geneNames$external_gene_name[1] # "S100a6"
testNames$external_gene_name[1] # "S100a6" -- NOT WHAT I'D EXPECT WHEN CALLING FUNCTION
geneNames[order(match(geneNames$ensembl_gene_id, geneIds)),]
match(geneNames$ensembl_gene_id, geneIds)
order(match(geneNames$ensembl_gene_id, geneIds)
)
match(geneNames$ensembl_gene_id, geneIds)
?match
match(as.vector(geneNames$ensembl_gene_id), geneIds)
match(as.vector(geneNames$ensembl_gene_id), as.vector(geneIds))
as.vector(geneIds)
geneNames$ensembl_gene_id
match(geneNames$ensembl_gene_id, geneIds)
match(geneIds, geneNames$ensembl_gene_id)
q()
library(dplyr) # for subsetting data
library(R.utils) # for unzipping data
library(synapseClient) # to download data
library(edgeR) # for DE analysis
library(biomaRt) # for gene name lookups
library(ggplot2) # for better boxplots
library(reshape2) # for melt for ggplot
library(PerformanceAnalytics) # for kertosis calculations
## Get data and define groups
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# get the readcount file and covariates file from synapse
countFile <- synGet('syn3483519')
covariatesFile <- synGet('syn3483880') # the working dir copy
# unzip count file and load for processing
localCountFilePath <- getFileLocation(countFile)
if(!file.exists(sub('.gz', '', localCountFilePath))) {
gunzip(localCountFilePath)
}
localCountFilePath <- sub('.gz', '', localCountFilePath) #trim the .gz suffix
counts <- read.table(localCountFilePath, header = TRUE, stringsAsFactors = FALSE)
# load covariates file to have handy
covariates <- read.table(getFileLocation(covariatesFile), header = TRUE, stringsAsFactors = FALSE)
# Make DGEList object with CRND8 counts and groups defined by covariates$Genotype
# easiest just to subset out the CRND8 samples at the beginning
CRND8Covariates  <- covariates[covariates$Experiment == "CRND8",]
View(CRND8Covariates)
setwd("~/Projects/UO1-AMP/working/pilot_corrections")
library(synapseClient)
library(tools)
source("dataEnablement/R/merge_count_files.R")
# Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# Define paths for required Synapse objects
psp_rnaseq_counts <- "syn2875350" # all count files in a zipped directory
# Download files from Synapse
psp_count_files <- synGet(ad_rnaseq_counts)
psp_files_path <- getFileLocation(ad_count_files)
library(synapseClient)
library(tools)
source("merge_count_files.R")
# Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# Define paths for required Synapse objects
psp_rnaseq_counts <- "syn2875350" # all count files in a zipped directory
# Download files from Synapse
psp_count_files <- synGet(psp_rnaseq_counts)
psp_files_path <- getFileLocation(psp_count_files)
# Get name of temporary directory to store unzipped files (same as name of
# original compressed directory)
fileDir <- file_path_sans_ext(basename(psp_files_path))
tmpDir <- tempdir()
unzip(psp_files_path, exdir = tmpDir)
tmpDir
psp_files_path
psp_count_files <- synGet(psp_rnaseq_counts)
psp_files_path <- getFileLocation(psp_count_files)
psp_files_path
setwd("~/Projects/UO1-AMP/working/pilot_corrections")
library(synapseClient)
library(R.utils)
library(edgeR)
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
library(synapseClient)
library(R.utils)
library(edgeR)
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
codeFile <- ("https://github.com/jaeddy/snapr_tools/tree/v0.1-alpha")
synapseId <- ('syn3578144')
metaDataOnly <- synGet('syn2875347', downloadFile=F)
localFilePath <- "/tmp/psp-rnaseq-counts_Updated.zip"
mergedFileObject <- File(path = localFilePath,
parentId = metaDataOnly$properties$parentId,
activityName = "SNAPR processing",
used = list(list(name = "SNAPR_tools",
url = codeFile,
wasExecuted = T)))
mergedFileObject <- File(path = localFilePath,
parentId = metaDataOnly$properties$parentId,
activityName = "SNAPR processing",
used = list(list(name = "SNAPR_tools",
url = codeFile,
wasExecuted = T)))
mergedFileObject <- synStore(mergedFileObject)
setwd("~/Projects/UO1-AMP/working/pilot_corrections")
library(synapseClient)
library(tools)
source("merge_count_files.R")
# Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
psp_rnaseq_counts <- "syn3578144" # all count files in a zipped directory
# Download files from Synapse
psp_count_files <- synGet(psp_rnaseq_counts)
psp_files_path <- getFileLocation(psp_count_files)
# Get name of temporary directory to store unzipped files (same as name of
# original compressed directory)
fileDir <- file_path_sans_ext(basename(psp_files_path))
tmpDir <- tempdir()
unzip(psp_files_path, exdir = tmpDir)
inputDir <- file.path(tmpDir, fileDir)
prefix <- "AMP-AD_MayoPilot_UFL-Mayo-ISB_IlluminaHiSeq2000_TemporalCortex_ProgressiveSupranuclearPalsy_"
countTypes <- c("gene_id", "transcript_id")
for (countType in countTypes) {
message(paste("Merging", prefix, "files of count type", countType, "..."))
# Create the merged file and store the output file path
merged_file <- create_merged_file(inputDir, countType, prefix)
# Create a Synapse object for the output file and upload
merged_file_object <- File(path = merged_file,
parentId = ad_count_files$properties$parentId)
merged_file_object <- synStore(merged_file_object)
}
countTypes <- c("gene_id", "transcript_id")
for (countType in countTypes) {
message(paste("Merging", prefix, "files of count type", countType, "..."))
# Create the merged file and store the output file path
merged_file <- create_merged_file(inputDir, countType, prefix)
# Create a Synapse object for the output file and upload
merged_file_object <- File(path = merged_file,
parentId = ad_count_files$properties$parentId)
merged_file_object <- synStore(merged_file_object)
}
unlink(inputDir, recursive = TRUE)
for (countType in countTypes) {
message(paste("Merging", prefix, "files of count type", countType, "..."))
# Create the merged file and store the output file path
merged_file <- create_merged_file(inputDir, countType, prefix)
# Create a Synapse object for the output file and upload
merged_file_object <- File(path = merged_file,
parentId = psp_count_files$properties$parentId)
merged_file_object <- synStore(merged_file_object)
}
library(synapseClient)
library(R.utils)
library(edgeR)
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
codeFile <- ("https://github.com/jaeddy/snapr_tools/tree/v0.1-alpha")
source("merge_count_files.R")
psp_rnaseq_counts <- "syn3578144" # all count files in a zipped directory
# Download files from Synapse
psp_count_files <- synGet(psp_rnaseq_counts)
psp_files_path <- getFileLocation(psp_count_files)
# Get name of temporary directory to store unzipped files (same as name of
# original compressed directory)
fileDir <- file_path_sans_ext(basename(psp_files_path))
tmpDir <- tempdir()
unzip(psp_files_path, exdir = tmpDir)
inputDir <- file.path(tmpDir, fileDir)
prefix <- "AMP-AD_MayoPilot_UFL-Mayo-ISB_IlluminaHiSeq2000_TemporalCortex_ProgressiveSupranuclearPalsy_"
countTypes <- c("gene_id", "transcript_id")
for (countType in countTypes) {
message(paste("Merging", prefix, "files of count type", countType, "..."))
# Create the merged file and store the output file path
merged_file <- create_merged_file(inputDir, countType, prefix)
# Create a Synapse object for the output file and upload
merged_file_object <- File(path = merged_file,
parentId = psp_count_files$properties$parentId)
merged_file_object <- synStore(merged_file_object)
}
genePath = "/Users/bheavner/Desktop/psp/AMP-AD_MayoPilot_UFL-Mayo-ISB_IlluminaHiSeq2000_TemporalCortex_ProgressiveSupranuclearPalsy_gene_id_counts_UpdatedID.txt"
genePath = "/Users/bheavner/Desktop/psp/AMP-AD_MayoPilot_UFL-Mayo-ISB_IlluminaHiSeq2000_TemporalCortex_ProgressiveSupranuclearPalsy_gene_id_counts_UpdatedID.txt"
geneCounts <- read.table(genePath, header = TRUE)
library(gdata) # to read .xlsx file -  install.packages("gdata")
keyPath  <- "/Users/bheavner/Desktop/Data errors/ToSend/PSP_MA_040915_IDsKey.xlsx"
keyHash <- read.xls(fullSampleInformationFilePath, sheet = 1, header = TRUE, stringsAsFactors = FALSE)
keyPath  <- "/Users/bheavner/Desktop/Data\ errors/ToSend/PSP_MA_040915_IDsKey.xlsx"
keyHash <- read.xls(fullSampleInformationFilePath, sheet = 1, header = TRUE, stringsAsFactors = FALSE)
keyHash <- read.xls(keyPath, sheet = 1, header = TRUE, stringsAsFactors = FALSE)
View(keyHash)
View(keyHash)
View(geneCounts)
View(geneCounts)
View(geneCounts)
geneCounts$row.names
geneCounts[,1]
row.names(geneCounts)
keyHash$IlluminaSampleID
keyHash$Path_ID %in% row.names(geneCounts)
row.names(geneCounts) %in% keyHash$Path_ID
order(row.names(geneCounts), keyHash$Path_ID)
row.names(geneCounts)[66]
keyHash$Path_ID[1]
row.names(geneCounts)[1]
keyHash$Path_ID[66]
?order
match(row.names(geneCounts), keyHash$Path_ID)
keyHash$Path_ID[53]
row.names(geneCounts)[1]
order(match(row.names(geneCounts), keyHash$Path_ID))
keyHash$Path_ID[18]
match(keyHash$Path_ID, row.names(geneCounts))
keyHash$Path_ID[18]
row.names(geneCounts)[1]
keyHash$Path_ID
match(row.names(geneCounts), keyHash$Path_ID)
keyHash$Path_ID[53]
keyHash$IlluminaSampleID[match(row.names(geneCounts), keyHash$Path_ID)]
keyHash$IlluminaSampleID[match(row.names(geneCounts), keyHash$Path_ID)]
row.names(geneCounts)
keyHash$IlluminaSampleID[match(row.names(geneCounts), keyHash$Path_ID)]
row.names(geneCounts) <- keyHash$IlluminaSampleID[match(row.names(geneCounts), keyHash$Path_ID)]
?write.table
write.table(geneCounts, GenePath, quote = FALSE, sep = " ", row.names = TRUE)
write.table(geneCounts, genePath, quote = FALSE, sep = " ", row.names = TRUE)
test <- read.table(genePath, header = TRUE)
View(test)
View(test)
system(paste("gzip", genePath))
transcriptPath = "/Users/bheavner/Desktop/psp/AMP-AD_MayoPilot_UFL-Mayo-ISB_IlluminaHiSeq2000_TemporalCortex_ProgressiveSupranuclearPalsy_transcript_id_counts_UpdatedID.txt"
transcriptCounts <- read.table(transcriptPath, header = TRUE)
row.names(transcriptCounts) <- keyHash$IlluminaSampleID[match(row.names(transcriptCounts), keyHash$Path_ID)]
# save and rezip the geneCounts table.
write.table(transcriptCounts, genePath), quote = FALSE, sep = " ", row.names = TRUE)
write.table(transcriptCounts, genePath, quote = FALSE, sep = " ", row.names = TRUE)
system(paste("gzip", transcriptPath))
colnames(geneCounts)
rownames(geneCounts)
rownames(transcriptCounts)
setwd("~/Projects/UO1-AMP/working/pilot_corrections")
# write the data to local dir
source('~/Projects/UO1-AMP/working/pilot_corrections/reformat_merged_readcounts.R')
omit <- pspOmit
source('~/Projects/UO1-AMP/working/pilot_corrections/reformat_merged_readcounts.R')
library(synapseClient)
library(R.utils)
library(edgeR)
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
codeFile <- ("https://github.com/PriceLab/AMP-ad/pilotCorrections/normalize_readcounts.R")
countFileSynapseIDs <- c('syn3582440', 'syn3582449')
mergedCountFile <- 'syn3582440'
originalCountFile <- synGet(mergedCountFile)
localFilePath <- getFileLocation(originalCountFile)
if(!file.exists(substr(localFilePath, 1, nchar(localFilePath) - 3))) {
gunzip(localFilePath)
}
localFilePath <- sub('.gz', '', localFilePath) #trim the .gz suffix
transposedCounts <- read.table(localFilePath, header = TRUE)
# make DGEList object
expr <- DGEList(transposedCounts, group = rep(1, ncol(transposedCounts)))
# calculate normalization factors
normFactors <- calcNormFactors(expr, method = ("TMM"))
# use normaliztion factors to calculate cpm -
# per https://www.biostars.org/p/84087/, that's calculated as
# count / (library size * normalization factor))
normalizedCpm <- cpm(normFactors)
# write the data to local dir
newFileName <- sub('_transposed.txt.gz', '', originalCountFile$properties$name)
newFileName <- paste0(newFileName, "_normalized.txt", sep="")
normalizedCpm[1]
normFactors <- calcNormFactors(expr, method = ("TMM"))
expr
normFactors <- calcNormFactors(expr, method = ("TMM"))
?calcNormFactors
apply(expr$counts,2,function(x) sum(is.na(x)))
head(expr$counts)
normFactors <- calcNormFactors(expr, method = ("TMM"))
expr$samples$lib.size
expr$samples
expr$samples[86]
library(gdata) # to read .xlsx file -  install.packages("gdata")
genePath = "/Users/bheavner/Desktop/psp/AMP-AD_MayoPilot_UFL-Mayo-ISB_IlluminaHiSeq2000_TemporalCortex_ProgressiveSupranuclearPalsy_gene_id_counts_UpdatedID.txt"
geneCounts <- read.table(genePath, header = TRUE)
keyPath  <- "/Users/bheavner/Desktop/Data\ errors/ToSend/PSP_MA_040915_IDsKey.xlsx"
keyHash <- read.xls(keyPath, sheet = 1, header = TRUE, stringsAsFactors = FALSE)
head(keyHash)
row.names(geneCounts)
row.names(geneCounts) <- keyHash$IlluminaSampleID[match(row.names(geneCounts), keyHash$Path_ID)]
keyHash$IlluminaSampleID[match(row.names(geneCounts), keyHash$Path_ID)]
row.names(geneCounts)
match(row.names(geneCounts), keyHash$Path_ID)
keyHash$Path_ID
View(geneCounts)
View(transposedCounts)
View(transposedCounts)
View(transposedCounts)
localFilePath <- getFileLocation(originalCountFile)
localFilePath
if(!file.exists(sub('.gz', '', localFilePath))) {
gunzip(localFilePath)
}
localFilePath <- sub('.gz', '', localFilePath) #trim the .gz suffix
rawCounts <- read.table(localFilePath, header = TRUE)
View(rawCounts)
# make new readcounts file from snapr output
library(synapseClient)
library(R.utils)
library(edgeR)
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
mergedCountFile <- 'syn3582440'
originalCountFile <- synGet(mergedCountFile)
library(synapseClient)
library(tools)
source("merge_count_files.R")
# Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# Define paths for required Synapse objects
psp_rnaseq_counts <- "syn3578144" # all count files in a zipped directory
# Download files from Synapse
psp_count_files <- synGet(psp_rnaseq_counts)
psp_files_path <- getFileLocation(psp_count_files)
# Get name of temporary directory to store unzipped files (same as name of
# original compressed directory)
fileDir <- file_path_sans_ext(basename(psp_files_path))
tmpDir <- tempdir()
unzip(psp_files_path, exdir = tmpDir)
inputDir <- file.path(tmpDir, fileDir)
prefix <- "AMP-AD_MayoPilot_UFL-Mayo-ISB_IlluminaHiSeq2000_TemporalCortex_ProgressiveSupranuclearPalsy_"
countTypes <- c("gene_id", "transcript_id")
countType <- "gene_id"
merged_file <- create_merged_file(inputDir, countType, prefix)
tmpDir
countDat <- read.table('/var/folders/z3/bm39bty12lzfhhmmstkg7fkr0000gq/T//Rtmpl1j89d/AMP-AD_MayoPilot_UFL-Mayo-ISB_IlluminaHiSeq2000_TemporalCortex_ProgressiveSupranuclearPalsy__gene_id_counts.txt')
read.table(merged_file)
countDat <- read.table(merged_file)
colnames(countDat)
rownames(countDat)
colnames(countDat)
countDat[,"NA00.019"]
transposedCounts <- countDat
expr <- DGEList(transposedCounts, group = rep(1, ncol(transposedCounts)))
normFactors <- calcNormFactors(expr, method = ("TMM"))
expr$samples$lib.size
expr$samples
library(dplyr) # for subsetting data
library(R.utils) # for unzipping data
library(synapseClient) # to download data
library(edgeR) # for DE analysis
library(biomaRt) # for gene name lookups
library(ggplot2) # for better boxplots
library(reshape2) # for melt for ggplot
library(PerformanceAnalytics) # for kertosis calculations
## Get data and define groups
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# get the readcount file and covariates file from synapse
countFile <- synGet('syn3483519')
covariatesFile <- synGet('syn3483880') # the working dir copy
# unzip count file and load for processing
localCountFilePath <- getFileLocation(countFile)
if(!file.exists(sub('.gz', '', localCountFilePath))) {
gunzip(localCountFilePath)
}
localCountFilePath <- sub('.gz', '', localCountFilePath) #trim the .gz suffix
counts <- read.table(localCountFilePath, header = TRUE, stringsAsFactors = FALSE)
# load covariates file to have handy
covariates <- read.table(getFileLocation(covariatesFile), header = TRUE, stringsAsFactors = FALSE)
# Make DGEList object with CRND8 counts and groups defined by covariates$Genotype
# easiest just to subset out the CRND8 samples at the beginning
CRND8Covariates  <- covariates[covariates$Experiment == "CRND8",]
CRND8counts  <- counts[, colnames(counts) %in% CRND8Covariates$Mouse_ID]
orderedGenotype  <- covariates$Genotype[order(match(CRND8Covariates$Mouse_ID, colnames(CRND8counts)))]
CRND8FemaleCovariates  <- CRND8Covariates[CRND8Covariates$Sex == "F",]
CRND8FemaleCounts  <- CRND8counts[, colnames(CRND8counts) %in% CRND8FemaleCovariates$Mouse_ID]
orderedFemaleGenotype  <- covariates$Genotype[order(match(CRND8FemaleCovariates$Mouse_ID, colnames(CRND8FemaleCounts)))]
CRND8Female  <- DGEList(counts = CRND8FemaleCounts, group = orderedFemaleGenotype)
## filter data
# require minimum of 10 reads for at least 2 samples:
d.full <- CRND8Female # keep the old one in case we mess up
dim(d.full)
#39179    46
keep <- rowSums(CRND8$counts>10) >= 2
d <- CRND8[keep,]
dim(d)
keep <- rowSums(CRND8Female$counts>10) >= 2
d <- CRND8Female[keep,]
dim(d)
# 19096    46
# reset library sizes after filtering
d$samples$lib.size <- colSums(d$counts)
# normalize the data using TMM
d <- calcNormFactors(d, method = "TMM")
plotMDS(d, method="bcv", col=as.numeric(d$samples$group))
legend("bottomleft", as.character(unique(d$samples$group)), col=1:3, pch=20)
levels(d$samples$group)
d1 <- estimateCommonDisp(d, verbose=T) #assume all same for this pass, GLM later
d1 <- estimateTagwiseDisp(d1)
plotBCV(d1) #plots the tagwise biological coefficient of variation (square root of dispersions) against log2-CPM.
# observation - looks like a discontinuity in the dispersions around logCPM ~ 7
# Look at DE with exact test
de.tgw <- exactTest(d1)
summary(decideTestsDGE(de.tgw, p.value=0.01))
topTags(de.tgw)
topTen <- rownames(topTags(de.tgw, n = 10))
toPlot <- d[topTen] #10 rows, 24 columns
top <- topTags(de.tgw, n=50)
# get gene names for x axis labels -- ORDER ISN'T PRESERVED FROM BIOMART QURY!
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = rownames(top)[1:10],
ensembl)
# get label order right for plot
labels <- geneNames$external_gene_name[(order(match(geneNames$ensembl_gene_id, rownames(top)[1:10])))]
# munge to use with ggplot and plot
test  <- data.frame(toPlot$samples$group, t(toPlot$counts))
toPlot2 <- melt(test)
ggplot(toPlot2, aes(factor(variable), value)) +
geom_boxplot(aes(fill = toPlot.samples.group)) +
scale_x_discrete(labels = labels)
top <- data.frame(topTags(detgw, n=99)) # the 100th isn't in ensembl, so fix later..
top <- data.frame(topTags(de.tgw, n=99)) # the 100th isn't in ensembl, so fix later..
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = rownames(top),
ensembl)
# get label order right
names <- geneNames$external_gene_name[(order(match(geneNames$ensembl_gene_id, rownames(top))))]
top <- cbind(top, names)
colnames(top)[6] <- "Gene_Name"
setwd("~/Projects/UO1-AMP/working/expression analysis/APP")
source('~/Projects/UO1-AMP/working/expression analysis/APP/ensemblToGeneId.R')
ensemblToGeneId(rownames(top),ensembl)
top <- data.frame(topTags(de.tgw, n=50)) # some aren't in ensembl, so fix later..
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = rownames(top),
ensembl)
# get label order right
names <- geneNames$external_gene_name[(order(match(geneNames$ensembl_gene_id, rownames(top))))]
top <- cbind(top, names)
colnames(top)[6] <- "Gene_Name"
colnames(top)
top <- data.frame(topTags(de.tgw, n=50)) # some aren't in ensembl, so fix later..
colnames(top)
top <- cbind(top, names)
colnames(top)
colnames(top)[5] <- "Gene_Name"
means <- rowMeans(d2$counts[rownames(top), ])
top <- cbind(top, means)
colnames(top)[6] <- "Mean_count"
colnames(top)
means <- rowMeans(d1$counts[rownames(top), ])
top <- cbind(top, means)
colnames(top)[6] <- "Mean_count"
stdevs <- apply(d1$counts[rownames(top), ], 1, sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Count_Std_Dev"
kurtosises  <- apply(d1$counts[rownames(top), ], 1, kurtosis)
top <- cbind(top, kurtosises)
colnames(top)[8] <- "Count_Kurtosis"
write.table(top, file="CRND8_Female_tg_vs_wt.tsv", quote=F)
View(top)
topTags(de.tgw)
View(top)
View(top)
?topTags
q()
