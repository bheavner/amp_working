is.null(gene1)
?is.null
q()
library(dplyr) # for subsetting data
library(R.utils) # for unzipping data
library(synapseClient) # to download data
library(edgeR) # for DE analysis
library(biomaRt) # for gene name lookups
library(ggplot2) # for better boxplots
library(reshape2) # for melt for ggplot
library(PerformanceAnalytics) # for kertosis calculations
## Get data and define groups
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# get the transposed readcount file and covariates file from synapse
countFile <- synGet('syn3192634')
covariatesFile <- synGet('syn2875343') # the working dir copy
# unzip count file and load for processing
localCountFilePath <- getFileLocation(countFile)
if(!file.exists(sub('.gz', '', localCountFilePath))) {
gunzip(localCountFilePath)
}
localCountFilePath <- sub('.gz', '', localCountFilePath) #trim the .gz suffix
counts <- read.table(localCountFilePath, header = TRUE, stringsAsFactors = FALSE)
#PROBLEM: - an rTGMinus sample
#in count data, sample “LP62_4”
#in covariates, sample “LP_62_4”
# for now, change column name in counts - TODO: fix covariates file
colnames(counts)[1] <- "LP_62_4"
# load covariates file to have handy
covariates <- read.table(getFileLocation(covariatesFile), header = TRUE, stringsAsFactors = FALSE)
## define groups: JNPL3+ (transgenic), JNPL3- (WT), (ignore rTG+ rTG- for now)
# (there MUST be a cleaner way to do this)
# JNPL3+:
JNPL3Plus <- dplyr::select(filter(covariates, Experiment == "MAPT_P301L" & Genotype == "+"), Mouse_ID)
# 15 samples
# JNPL3-:
JNPL3Minus <- dplyr::select(filter(covariates, Experiment == "MAPT_P301L" & Genotype == "-"), Mouse_ID)
# 9 samples
JNPL3Plus <- as.character(JNPL3Plus$Mouse_ID)
JNPL3Minus <- as.character(JNPL3Minus$Mouse_ID)
JNPL3PlusCols <- is.element(as.character(colnames(counts)), JNPL3Plus)
JNPL3MinusCols <- is.element(as.character(colnames(counts)), JNPL3Minus)
groups <- c(rep(0, length(counts[1,])))
groups[JNPL3PlusCols] <- "JNPL3Plus"
groups[JNPL3MinusCols] <- "JNPL3Minus"
JNPL3Samples <- c(JNPL3Plus, JNPL3Minus)
JNPL3Cols <- is.element(as.character(colnames(counts)), JNPL3Samples)
## Make DGEList object to start working on DE analysis
JNPL3 <- DGEList(counts = dplyr::select(counts, one_of(JNPL3Samples)),
group = groups[JNPL3Cols])
## filter data
# require minimum of 100 counts per million for at least 2 samples
d.full <- JNPL3 # keep the old one in case we mess up
dim(d.full)
#39179    24
keep <- rowSums(cpm(JNPL3)>100) >= 2
d <- JNPL3[keep,]
dim(d)
#3133   24 #seth says this is too stringent - 70% of genes in genome are expressed in brain - ~20k features normal
# reset library sizes after filtering
d$samples$lib.size <- colSums(d$counts)
# normalize the data using TMM
d <- calcNormFactors(d, method = "TMM")
plotMDS(d, method="bcv", col=as.numeric(d$samples$group))
legend("bottomleft", as.character(unique(d$samples$group)), col=1:3, pch=20)
d1 <- estimateCommonDisp(d, verbose=T) #assume all same for this pass, GLM later
# Disp = 0.09527 , BCV = 0.3087
d1 <- estimateTagwiseDisp(d1)
plotBCV(d1) #plots the tagwise biological coefficient of variation (square root of dispersions) against log2-CPM.
# observation - looks like a discontinuity in the dispersions around logCPM ~ 7
# Look at DE with exact test
de.tgw <- exactTest(d1)
summary(decideTestsDGE(de.tgw, p.value=0.01))
topTen <- rownames(topTags(de.tgw, n = 10))
toPlot <- d[topTen] #10 rows, 24 columns
top <- topTags(de.tgw, n=50)
# get gene names for x axis labels -- ORDER ISN'T PRESERVED FROM BIOMART QURY!
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = rownames(top)[1:10],
ensembl)
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = rownames(top)[1:100],
ensembl)
geneNames
top <- topTags(de.tgw, n=100)
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = rownames(top)[1:100], ensembl)
top
ensemblToGeneId <- function(x,ensembl){
gene1 <- NA;
try(gene1 <- getBM(attributes='external_gene_name',filters='ensembl_gene_id',values=x,mart=ensembl),silent=T)
if(is.null(gene1)){
gene1<-NA
}
return(gene1)
}
ensemblToGeneId(rownames(top), ensembl)
geneNames[1,]
labels <- geneNames$external_gene_name[(order(match(geneNames$ensembl_gene_id, rownames(top)[1:10])))]
labels(1)
labels[1]
values
rownames(top)[1:100]
geneIds <- rep(NA,100)
geneIds <- values
geneIds <- rownames(top)[1:100]
geneIds
write(geneIds, "testIds.txt")
pwd
system(ls)
system('ls')
geneIds <- read.table("testIds.txt")
View(geneIds)
View(geneIds)
require(biomaRt)
geneIds <- read.table("testIds.txt")
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
ensemblToGeneId <- function(x,ensembl){
gene1 <- NA;
try(gene1 <- getBM(attributes='external_gene_name',filters='ensembl_gene_id',values=x,mart=ensembl),silent=T)
if(is.null(gene1)){
gene1<-NA
}
return(gene1)
}
testNames <- ensemblToGeneId(geneIds, ensembl)
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = geneIds, ensembl)
geneNames[1]
geneNames$external_gene_name[1]
geneIds[1]
geneIds$V1[1]
as.character(geneIds$V1[1])
geneNames$ensembl_gene_id[1]
geneNames
geneNames$external_gene_name[1]
testNames[1]
testNames$external_gene_name[1]
geneNames[(order(match(geneNames$ensembl_gene_id, geneIds)))]
geneNames[(order(match(geneNames$ensembl_gene_id, geneIds))),]
geneNames <- geneNames[(order(match(geneNames$ensembl_gene_id, geneIds)))]
geneNames[order(match(geneNames$ensembl_gene_id, geneIds)),]
geneNames <- geneNames[order(match(geneNames$ensembl_gene_id, geneIds)),]
unique(geneIds)
setdif(geneIds, geneNames$ensembl_gene_id)
geneIds &in& geneNames$ensembl_gene_id
geneIds %in% geneNames$ensembl_gene_id
geneIds %in% geneNames$ensembl_gene_id[,]
geneIds %in% geneNames$ensembl_gene_id
setdiff(geneIds, geneNames$ensembl_gene_id)
setdiff(geneIds, as.list(geneNames$ensembl_gene_id))
geneNames$ensembl_gene_id
?setdiff
?setdiff
as.vector(geneNames$ensembl_gene_id)
setdiff(geneIds, as.vector(geneNames$ensembl_gene_id))
setdiff(as.vector(geneIds), as.vector(geneNames$ensembl_gene_id))
class(geneIds)
class(geneName)
geneIds
setdiff(as.vector(geneIds$V1), as.vector(geneNames$ensembl_gene_id))
geneIds
geneIds == "ENSMUSG00000019769"
geneNames[1]
geneNames$V1[1]
geneNames$ensembl_gene_id[1]
geneIds[1]
geneIds$V1[1]
geneNames$ensembl_gene_id[1]
require(biomaRt)
geneIds <- read.table("testIds.txt")
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
ensemblToGeneId <- function(x,ensembl){
gene1 <- NA;
try(gene1 <- getBM(attributes='external_gene_name',filters='ensembl_gene_id',values=x,mart=ensembl),silent=T)
if(is.null(gene1)){
gene1<-NA
}
return(gene1)
}
# use function to get gene name by ensembl_gene_id
testNames <- ensemblToGeneId(geneIds, ensembl)
# or grab them directly without the function
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = geneIds, ensembl)
geneIds[1]
geneIds$V1[1]
geneNames$ensembl_gene_id[1]
testNames[1]
testNames$external_gene_name[1]
as.character(geneIds$V1[1]) # ENSMUSG00000061808
geneIds$V1[1]
geneNames$ensembl_gene_id[1] # ENSMUSG00000001025
geneNames$external_gene_name[1] # "S100a6"
testNames$external_gene_name[1] # "S100a6" -- NOT WHAT I'D EXPECT WHEN CALLING FUNCTION
geneNames[order(match(geneNames$ensembl_gene_id, geneIds)),]
match(geneNames$ensembl_gene_id, geneIds)
order(match(geneNames$ensembl_gene_id, geneIds)
)
match(geneNames$ensembl_gene_id, geneIds)
?match
match(as.vector(geneNames$ensembl_gene_id), geneIds)
match(as.vector(geneNames$ensembl_gene_id), as.vector(geneIds))
as.vector(geneIds)
geneNames$ensembl_gene_id
match(geneNames$ensembl_gene_id, geneIds)
match(geneIds, geneNames$ensembl_gene_id)
q()
library(synapseClient) # for synapse upload
library(gdata) # to read .xlsx file -  install.packages("gdata")
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
#U01_288_AUT_TCx_RNAseq_Covars-Drives_02-06-2015_1447.xlsx syn3523879
# includes SubjectID, SampleID, seq Run ID, DriveA_FileName1, DriveA_FileName2, DriveB_FileName1, and DriveB_Filename2
rerunSamples  <- synGet("syn3523879")
rerunSamplesFilePath <- getFileLocation(rerunSamples)
rerun <- read.xls(rerunSamplesFilePath, sheet = 1, header = TRUE, stringsAsFactors = FALSE)
# I only want the MBB TCX samples
MBBSamples <- (rerun$Source == "BannerSunHealth_TomBeach" | rerun$Source == "MayoBrainBank_Dickson")
# generate list of unique strings that should be in the SNAPR output from fastq file names (sample IDs not sufficient b/c some IDs rerun)
MBBFile1 <- rerun[MBBSamples, "DriveA_FileName1"]
MBBFile2 <- rerun[MBBSamples, "DriveA_FileName2"]
MBBFile3 <- rerun[MBBSamples, "DriveB_FileName1"]
MBBFile4 <- rerun[MBBSamples, "DriveB_FileName2"]
MBBFiles <- c(MBBFile1[MBBFile1 != "NULL"],
MBBFile2[MBBFile2 != "NULL"],
MBBFile3[MBBFile3 != "NULL"],
MBBFile4[MBBFile4 != "NULL"])
MBBFiles  <- unique(MBBFiles) # there are 6 files on both drive A and drive B
# strip off path info
MBBString <- sub(".+/", '', MBBFiles)
# strip off things after L#
MBBString <- sub("_L[0-9]_.+", '', MBBString)
# I expect 278 are Mayo temporal cortex samples
MBBString <- unique(MBBString)
length(MBBString) # 278 - yay!
# list of files currently in s3://mayo-u01-rnaseq/snapr
system("aws s3 ls s3://mayo-u01-rnaseq/snapr/ > all_snapr_out.txt")
inBucket <- read.table("all_snapr_out.txt", stringsAsFactors = FALSE, skip=1)
inBucket <- inBucket$V4
# we don't care about .bam or .bam.bai files at the moment
notBam <- unique(inBucket[!grepl(".bam", inBucket)])
# if all are present, should be length(MBBString) * 12 files.
length(notBam)/12 #252.5 - so some are missing.
toCopy <- unique(grep(paste(MBBString, collapse="|"), notBam, value=TRUE))
for (index in 1:length(toCopy)) {
system(paste("aws s3 cp s3://mayo-u01-rnaseq/snapr/",
toCopy[index],
" s3://mayo-u01-rnaseq/TCXOutput/",
#" --dryrun", # comment out to run!
sep=""))
}
system(paste("aws s3 ls s3://mayo-u01-rnaseq/TCXOutput/", "> TCXCopied.txt"))
copiedFiles <- read.table("TCXCopied.txt", stringsAsFactors = FALSE, skip=1)
setdiff(copiedFiles, notBam) #05689621.FCC5RK6ACXX_L4IACTGAT.snap.fusions.reads.fa not copied. Do it now.
colnames(copiedFiles)
copiedFiles <- copiedFiles$V4
setdiff(copiedFiles, notBam) #05689621.FCC5RK6ACXX_L4IACTGAT.snap.fusions.reads.fa not copied. Do it now.
head(copiedfi)
head(copiedFiles
)
head notBam
head(notBam)
setwd("~/Projects/UO1-AMP/working/expression analysis")
setwd("~/Projects/UO1-AMP/working/expression analysis/APP")
library(dplyr) # for subsetting data
library(R.utils) # for unzipping data
library(synapseClient) # to download data
library(edgeR) # for DE analysis
library(biomaRt) # for gene name lookups
library(ggplot2) # for better boxplots
library(reshape2) # for melt for ggplot
library(PerformanceAnalytics) # for kertosis calculations
synapseLogin()
countFile <- synGet('syn3483519')
covariatesFile <- synGet('syn3483880') # the working dir copy
localCountFilePath <- getFileLocation(countFile)
localCountFilePath
if(!file.exists(sub('.gz', '', localCountFilePath))) {
gunzip(localCountFilePath)
}
localCountFilePath <- sub('.gz', '', localCountFilePath) #trim the .gz suffix
counts <- read.table(localCountFilePath, header = TRUE, stringsAsFactors = FALSE)
covariates <- read.table(getFileLocation(covariatesFile), header = TRUE, stringsAsFactors = FALSE)
View(covariates)
View(covariates)
library(dplyr) # for subsetting data
library(R.utils) # for unzipping data
library(synapseClient) # to download data
library(edgeR) # for DE analysis
library(biomaRt) # for gene name lookups
library(ggplot2) # for better boxplots
library(reshape2) # for melt for ggplot
library(PerformanceAnalytics) # for kertosis calculations
synapseLogin()
# get the transposed readcount file and covariates file from synapse
countFile <- synGet('syn3483519')
covariatesFile <- synGet('syn3483880') # the working dir copy
# unzip count file and load for processing
localCountFilePath <- getFileLocation(countFile)
if(!file.exists(sub('.gz', '', localCountFilePath))) {
gunzip(localCountFilePath)
}
localCountFilePath <- sub('.gz', '', localCountFilePath) #trim the .gz suffix
counts <- read.table(localCountFilePath, header = TRUE, stringsAsFactors = FALSE)
# load covariates file to have handy
covariates <- read.table(getFileLocation(covariatesFile), header = TRUE, stringsAsFactors = FALSE)
CRND8Plus <- dplyr::select(filter(covariates, Experiment == "CRND8" & Genotype == "+"), Mouse_ID)
JNPL3Minus <- dplyr::select(filter(covariates, Experiment == "CRND8" & Genotype == "-"), Mouse_ID)
CRND8Minus <- dplyr::select(filter(covariates, Experiment == "CRND8" & Genotype == "-"), Mouse_ID)
CRND8Plus
colnames(counts)
is.element(as.character(colnames(counts)), CRND8Plus)
?DGEList
covariates$Mouse_ID[Experiment == CRND8,]
covariates$Mouse_ID["Experiment" == CRND8,]
covariates$Mouse_ID["Experiment" == "CRND8",]
covariates$Mouse_ID[covariates$Experiment == "CRND8",]
covariates$Mouse_ID
covariates$Experiment == "CRND8"
covariates$Mouse_ID[, covariates$Experiment == "CRND8"]
covariates$Mouse_ID[covariates$Experiment == "CRND8"]
CRND8Ids <- covariates$Mouse_ID[covariates$Experiment == "CRND8"]
colnames(counts)
colnames(counts) %in% CRN8Ids
colnames(counts) %in% CRND8Ids
DGEList(counts = counts[, colnames(counts) %in% CRND8Ids],
group = covariates$Genotype[covariates$Experiment == "CRND8"])
?order
match(covariates$Mouse_ID, colnames(counts)
)
covariates$Mouse_ID[61]
colames(counts)[1]
colnames(counts)[1]
colnames(counts)[61]
covariates$Mouse_ID[1]
order(match(covariates$Mouse_ID, colnames(counts)))
covariates$Mouse_ID[14]
colnames(counts[1])
covariates$Genotype[order(match(covariates$Mouse_ID, colnames(counts)))]
DGEList(counts = counts[, colnames(counts) %in% CRND8Ids],
group = orderedGenotype)
orderedGenotype  <- covariates$Genotype[order(match(covariates$Mouse_ID, colnames(counts)))]
DGEList(counts = counts[, colnames(counts) %in% CRND8Ids],
group = orderedGenotype)
orderedGenotype  <- covariates$Genotype[order(match(colnames(counts), covariates$Mouse_ID))]
order(match(colnames(counts), covariates$Mouse_ID))
CRND8counts  <- counts[, colnames(counts) %in% CRND8Ids]
match(covariates$Mouse_ID), colnames(CRND8counts)
match(covariates$Mouse_ID, colnames(CRND8counts))
order(match(covariates$Mouse_ID, colnames(CRND8counts)))
orderedGenotype  <- covariates$Genotype[order(match(covariates$Mouse_ID, colnames(CRND8counts))]
orderedGenotype  <- covariates$Genotype[order(match(covariates$Mouse_ID, colnames(CRND8counts)))]
DGEList(counts = CRND8,
group = orderedGenotype)
DGEList(counts = CRND8,
group = orderedGenotype)DGEList(counts = CRND8counts, group = orderedGenotype)
match(covariates$Mouse_ID, colnames(CRND8counts)
)
?order
order(match(covariates$Mouse_ID, colnames(CRND8counts))
)
CRND8Ids
CRND8Covariates  <- covariates[covariates$Experiment == "CRND8",]
CRND8counts  <- counts[, colnames(counts) %in% CRND8Covariates$Mouse_ID]
match(CRND8Covariates$Mouse_ID, colnames(CRND8counts))
order(match(CRND8Covariates$Mouse_ID, colnames(CRND8counts)))
orderedGenotype  <- covariates$Genotype[order(match(CRND8Covariates$Mouse_ID, colnames(CRND8counts)))]
DGEList(counts = CRND8counts, group = orderedGenotype)
CRND8  <- DGEList(counts = CRND8counts, group = orderedGenotype)
CRND8$samples
d.full <- CRND8 # keep the old one in case we mess up
dim(d.full)
keep <- rowSums(cpm(CRND8)>100) >= 2
d <- CRND8[keep,]
dim(d)
39179*.7
keep <- rowSums(cpm(CRND8)>10) >= 2
d <- CRND8[keep,]
dim(d)
keep <- rowSums(cpm(CRND8)>1) >= 2
d <- CRND8[keep,]
dim(d)
keep <- rowSums(cpm(CRND8)>100) >= 2
d <- CRND8[keep,]
dim(d)
keep <- rowSums(cpm(CRND8)>100) >= 2
d <- CRND8[keep,]
dim(d)
# reset library sizes after filtering
d$samples$lib.size <- colSums(d$counts)
# normalize the data using TMM
d <- calcNormFactors(d, method = "TMM")
plotMDS(d, method="bcv", col=as.numeric(d$samples$group))
legend("bottomleft", as.character(unique(d$samples$group)), col=1:3, pch=20)
CRND8FemaleCovariates  <- CRND8Covariates[covariates$Sex == "F",]
View(CRND8FemaleCovariates)
View(CRND8FemaleCovariates)
covariates <- read.table(getFileLocation(covariatesFile), header = TRUE, stringsAsFactors = FALSE)
CRND8Covariates  <- covariates[covariates$Experiment == "CRND8",]
CRND8counts  <- counts[, colnames(counts) %in% CRND8Covariates$Mouse_ID]
orderedGenotype  <- covariates$Genotype[order(match(CRND8Covariates$Mouse_ID, colnames(CRND8counts)))]
CRND8  <- DGEList(counts = CRND8counts, group = orderedGenotype)
d.full <- CRND8 # keep the old one in case we mess up
dim(d.full)
CRND8Ids <- "foo"#covariates$Mouse_ID[covariates$Experiment == "CRND8"]
CRND8counts  <- counts[, colnames(counts) %in% CRND8Covariates$Mouse_ID]
orderedGenotype  <- covariates$Genotype[order(match(CRND8Covariates$Mouse_ID, colnames(CRND8counts)))]
CRND8  <- DGEList(counts = CRND8counts, group = orderedGenotype)
## filter data
# require minimum of 100 counts per million for at least 2 samples
d.full <- CRND8 # keep the old one in case we mess up
dim(d.full)
#39179    88
CRND8FemaleCovariates  <- CRND8Covariates[covariates$Sex == "F",]
CRND8FemaleCounts  <- counts[, colnames(counts) %in% CRND8FemaleCovariates$Mouse_ID]
orderedFemaleGenotype  <- covariates$Genotype[order(match(CRND8Covariates$Mouse_ID, colnames(CRND8counts)))]
CRND8  <- DGEList(counts = CRND8FemaleCounts, group = orderedFemaleGenotype)
orderedFemaleGenotype  <- covariates$Genotype[order(match(CRND8FemaleCovariates$Mouse_ID, colnames(CRND8Femalecounts)))]
CRND8FemaleCounts  <- counts[, colnames(counts) %in% CRND8FemaleCovariates$Mouse_ID]
orderedFemaleGenotype  <- covariates$Genotype[order(match(CRND8FemaleCovariates$Mouse_ID, colnames(CRND8Femalecounts)))]
orderedFemaleGenotype  <- covariates$Genotype[order(match(CRND8FemaleCovariates$Mouse_ID, colnames(CRND8FemaleCounts)))]
CRND8  <- DGEList(counts = CRND8FemaleCounts, group = orderedFemaleGenotype)
orderedFemaleGenotype
CRND8FemaleCounts  <- CRND8counts[, colnames(CRND8counts) %in% CRND8FemaleCovariates$Mouse_ID]
orderedFemaleGenotype  <- covariates$Genotype[order(match(CRND8FemaleCovariates$Mouse_ID, colnames(CRND8FemaleCounts)))]
CRND8Female  <- DGEList(counts = CRND8FemaleCounts, group = orderedFemaleGenotype)
CRND8FemaleCovariates  <- CRND8Covariates[covariates$Sex == "F",]
CRND8FemaleCounts  <- CRND8counts[, colnames(CRND8counts) %in% CRND8FemaleCovariates$Mouse_ID]
orderedFemaleGenotype  <- covariates$Genotype[order(match(CRND8FemaleCovariates$Mouse_ID, colnames(CRND8FemaleCounts)))]
CRND8Female  <- DGEList(counts = CRND8FemaleCounts, group = orderedFemaleGenotype)
orderedFemaleGenotype
CRND8FemaleCovariates$Mouse_ID
colnames(CRND8FemaleCounts
)
covariates$Genotype[order(match(CRND8FemaleCovariates$Mouse_ID, colnames(CRND8FemaleCounts)))]
CRND8FemaleCovariates  <- CRND8Covariates[covariates$Sex == "F",]
CRND8Covariates
CRND8Covariates
CRND8FemaleCovariates  <- CRND8Covariates[CRND8covariates$Sex == "F",]
CRND8FemaleCovariates  <- CRND8Covariates[CRND8Covariates$Sex == "F",]
CRND8FemaleCounts  <- CRND8counts[, colnames(CRND8counts) %in% CRND8FemaleCovariates$Mouse_ID]
orderedFemaleGenotype  <- covariates$Genotype[order(match(CRND8FemaleCovariates$Mouse_ID, colnames(CRND8FemaleCounts)))]
CRND8Female  <- DGEList(counts = CRND8FemaleCounts, group = orderedFemaleGenotype)
d.full <- CRND8Female # keep the old one in case we mess up
dim(d.full)
CRND8FemaleCounts  <- counts[, colnames(counts) %in% CRND8FemaleCovariates$Mouse_ID]
CRND8FemaleCovariates  <- CRND8Covariates[CRND8Covariates$Sex == "F",]
CRND8FemaleCounts  <- CRND8counts[, colnames(CRND8counts) %in% CRND8FemaleCovariates$Mouse_ID]
orderedFemaleGenotype  <- covariates$Genotype[order(match(CRND8FemaleCovariates$Mouse_ID, colnames(CRND8FemaleCounts)))]
CRND8Female  <- DGEList(counts = CRND8FemaleCounts, group = orderedFemaleGenotype)
## filter data
# require minimum of 100 counts per million for at least 2 samples
d.full <- CRND8Female # keep the old one in case we mess up
dim(d.full)
#39179    46
## FIRST, CLASSIC EDGER ANALYSIS
# Estimate dispersion - first simple way.
keep <- rowSums(cpm(CRND8Female)>100) >= 2
d <- CRND8Female[keep,]
dim(d)
d$samples$lib.size <- colSums(d$counts)
# normalize the data using TMM
d <- calcNormFactors(d, method = "TMM")
plotMDS(d, method="bcv", col=as.numeric(d$samples$group))
legend("bottomleft", as.character(unique(d$samples$group)), col=1:3, pch=20)
d1 <- estimateCommonDisp(d, verbose=T) #assume all same for this pass, GLM later
# Disp = 0.09527 , BCV = 0.3087
d1 <- estimateTagwiseDisp(d1)
plotBCV(d1) #plots the tagwise biological coefficient of variation (square root of dispersions) against log2-CPM.
# observation - looks like a discontinuity in the dispersions around logCPM ~ 7
# Look at DE with exact test
de.tgw <- exactTest(d1)
summary(decideTestsDGE(de.tgw, p.value=0.01))
topTags(de.tgw)
topTen <- rownames(topTags(de.tgw, n = 10))
toPlot <- d[topTen] #10 rows, 24 columns
top <- topTags(de.tgw, n=50)
# get gene names for x axis labels -- ORDER ISN'T PRESERVED FROM BIOMART QURY!
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = rownames(top)[1:10],
ensembl)
# get label order right for plot
labels <- geneNames$external_gene_name[(order(match(geneNames$ensembl_gene_id, rownames(top)[1:10])))]
# munge to use with ggplot and plot
toPlot2 <- melt(test)
geom_boxplot(aes(fill = toPlot.samples.group)) +
scale_x_discrete(labels = labels)
ggplot(toPlot2, aes(factor(variable), value)) +
test  <- data.frame(toPlot$samples$group, t(toPlot$counts))
d.full <- CRND8 # keep the old one in case we mess up
dim(d.full)
?cpm
keep <- rowSums(CRND8>100) >= 2
CRND8
keep <- rowSums(CRND8$counts>100) >= 2
d <- CRND8[keep,]
dim(d)
keep <- rowSums(CRND8>10) >= 2
keep <- rowSums(CRND8$counts>10) >= 2
d <- CRND8[keep,]
dim(d)
q()
