d.full <- JNPL3 # keep the old one in case we mess up
dim(d.full)
keep <- rowSums(cpm(JNPL3)>100) >= 2
d <- JNPL3[keep,]
dim(d)
d$samples$lib.size <- colSums(d$counts)
d <- calcNormFactors(d)
plotMDS(d, method="bcv", col=as.numeric(d$samples$group))
legend("bottomleft", as.character(unique(d$samples$group)), col=1:3, pch=20)
d1 <- estimateCommonDisp(d, verbose=T) #assume all same for this pass, GLM later
d1 <- estimateTagwiseDisp(d1)
plotBCV(d1) #plots the tagwise biological coefficient of variation (square root of dispersions) against log2-CPM.
design.mat <- model.matrix(~ 0 + d$samples$group)
colnames(design.mat) <- levels(d$samples$group)
d2 <- estimateGLMCommonDisp(d,design.mat)
d2 <- estimateGLMTrendedDisp(d2,design.mat) #method = "power" also a possibility
# You can change method to "auto", "bin.spline", "power", "spline", "bin.loess".
# The default is "auto" which chooses "bin.spline" when > 200 tags and "power" otherwise.
d2 <- estimateGLMTagwiseDisp(d2,design.mat)
plotBCV(d2) #nice!
# Look at DE with exact test.
de_common <- exactTest(d1) # naive method where we only fit a common dispersion.
de_glm  <- exactTest(d2) # DE with GLM dispersion estimate
topTags(de_common, n = 10)
topTags(de_glm, n = 10)
summary(de_glm)
summary(d2)
de1 <- decideTestsDGE(et12, adjust.method="BH", p.value=0.05)
de2 <- decideTestsDGE(de_glm, adjust.method="BH", p.value=0.05)
summary(de2)
#1     0 # up-regulated
topTags(de_glm, n = 10)
topTags(de_common, n = 10)
?decideTestsDGE
str(de2)
str(de_glm)
colnames(de_glm)
rownames(de_glm)
colnames(de_glm)
size(de_gml)
dim(de_glm)
dim(d)
colnames(d)
topTags(de_glm, n = 10)
rownames(topTags(de_glm, n = 10))
topTen <- rownames(topTags(de_glm, n = 10))
dplyr::select(counts, one_of(JNPL3Samples)
)
dplyr::select(counts, one_of(topTen))
dplyr::select(d, one_of(topTen))
de2tags <- rownames(d2)[as.logical(de2)]
plotSmear(de_glm, de.tags=de2tags)
abline(h = c(-2, 2), col = "blue")
design.mat
fit <- glmFit(d2, design.mat)
lrt <- glmLRT(fit)
topTags(lrt, n=10)
de2 <- decideTestsDGE(fit, adjust.method="BH", p.value = 0.05)
de2 <- decideTestsDGE(lrt, adjust.method="BH", p.value = 0.05)
de2tags <- rownames(d2)[as.logical(de2)]
plotSmear(lrt, de.tags=de2tags)
abline(h = c(-2, 2), col = "blue")
lrt <- glmLRT(fit, contrast = c(1,0))
topTags(lrt, n=10)
de2 <- decideTestsDGE(lrt, adjust.method="BH", p.value = 0.05)
de2tags <- rownames(d2)[as.logical(de2)]
plotSmear(lrt, de.tags=de2tags) # this is not what I expected...
abline(h = c(-2, 2), col = "blue")
design.mat
library(dplyr)
library(R.utils)
library(synapseClient)
library(edgeR)
library(biomaRt)
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# get the transposed readcount file and covariates file from synapse
countFile <- synGet('syn3192634')
covariatesFile <- synGet('syn2875343') # the working dir copy
# unzip count file and load for processing
localCountFilePath <- getFileLocation(countFile)
if(!file.exists(sub('.gz', '', localCountFilePath))) {
}
counts <- read.table(localCountFilePath, header = TRUE, stringsAsFactors = FALSE)
localCountFilePath <- sub('.gz', '', localCountFilePath) #trim the .gz suffix
gunzip(localCountFilePath)
colnames(counts)[1] <- "LP_62_4"
covariates <- read.table(getFileLocation(covariatesFile), header = TRUE, stringsAsFactors = FALSE)
JNPL3Plus <- dplyr::select(filter(covariates, Experiment == "MAPT_P301L" & Genotype == "+"), Mouse_ID)
# 15 samples
# JNPL3-:
JNPL3Minus <- dplyr::select(filter(covariates, Experiment == "MAPT_P301L" & Genotype == "-"), Mouse_ID)
# 9 samples
# rTG+:
rTGPlus <- dplyr::select(filter(covariates, Experiment == "rTG4510" & Genotype == "+"), Mouse_ID)
# 18 samples
# rTG-:
rTGMinus <- dplyr::select(filter(covariates, Experiment == "rTG4510" & Genotype == "-"), Mouse_ID)
# 18 samples
JNPL3Plus <- as.character(JNPL3Plus$Mouse_ID)
JNPL3Minus <- as.character(JNPL3Minus$Mouse_ID)
rTGPlus <- as.character(rTGPlus$Mouse_ID)
rTGMinus <- as.character(rTGMinus$Mouse_ID)
JNPL3PlusCols <- is.element(as.character(colnames(counts)), JNPL3Plus)
JNPL3MinusCols <- is.element(as.character(colnames(counts)), JNPL3Minus)
rTGPlusCols <- is.element(as.character(colnames(counts)), rTGPlus)
rTGMinusCols <- is.element(as.character(colnames(counts)), rTGMinus)
JNPL3Samples <- c(JNPL3Plus, JNPL3Minus)
JNPL3Cols <- is.element(as.character(colnames(counts)), JNPL3Samples)
JNPL3 <- DGEList(counts = dplyr::select(counts, one_of(JNPL3Samples)),
group = groups[JNPL3Cols])
d.full <- JNPL3 # keep the old one in case we mess up
dim(d.full)
#39179    24
keep <- rowSums(cpm(JNPL3)>100) >= 2
d <- JNPL3[keep,]
dim(d)
#3133   24
# reset library sizes after filtering
d$samples$lib.size <- colSums(d$counts)
# normalize the data using TMM
d <- calcNormFactors(d)
## Data Exploration
plotMDS(d, method="bcv", col=as.numeric(d$samples$group))
legend("bottomleft", as.character(unique(d$samples$group)), col=1:3, pch=20)
group
groups
groups <- c(rep(0, length(counts[1,])))
groups[JNPL3PlusCols] <- "JNPL3Plus"
groups[JNPL3MinusCols] <- "JNPL3Minus"
groups[rTGPlusCols] <- "rTGPlus"
groups[rTGMinusCols] <- "rTGMinus"
JNPL3Samples <- c(JNPL3Plus, JNPL3Minus)
JNPL3Cols <- is.element(as.character(colnames(counts)), JNPL3Samples)
JNPL3 <- DGEList(counts = dplyr::select(counts, one_of(JNPL3Samples)),
group = groups[JNPL3Cols])
d.full <- JNPL3 # keep the old one in case we mess up
dim(d.full)
#39179    24
keep <- rowSums(cpm(JNPL3)>100) >= 2
d <- JNPL3[keep,]
dim(d)
d$samples$lib.size <- colSums(d$counts)
# normalize the data using TMM
d <- calcNormFactors(d)
## Data Exploration
plotMDS(d, method="bcv", col=as.numeric(d$samples$group))
legend("bottomleft", as.character(unique(d$samples$group)), col=1:3, pch=20)
design.mat <- model.matrix(~ 0 + d$samples$group)
colnames(design.mat) <- levels(d$samples$group)
d2 <- estimateGLMCommonDisp(d,design.mat)
d2 <- estimateGLMTrendedDisp(d2,design.mat) #method = "power" also a possibility
# You can change method to "auto", "bin.spline", "power", "spline", "bin.loess".
# The default is "auto" which chooses "bin.spline" when > 200 tags and "power" otherwise.
d2 <- estimateGLMTagwiseDisp(d2,design.mat)
plotBCV(d2) #nice!
de_glm  <- exactTest(d2) # DE with GLM dispersion estimate
topTags(de_glm, n = 10)
de2 <- decideTestsDGE(de_glm, adjust.method="BH", p.value=0.05)
summary(de2)
topTen <- rownames(topTags(de_glm, n = 10))
topTen
toPlot <- d[rownames]
toPlot <- d[rownames,]
d[1]
rownames(d)
d[rownames(d)[1]]
toPlot <- d[rownames]
topTen
toPlot <- d[topTen]
toPlot
boxplot(toPlot[1,])
?boxplot
boxplot(toPlot, use.cols = FALSE)
toPlot
as.matrix(toPlot)
boxplot(as.matrix(toPlot), use.cols = FALSE)
toPlot(, JNPL3PlusCols)
toPlot[], JNPL3PlusCols]
toPlot[, JNPL3PlusCols]
JNPL3PlusCols
dim(toPlot)
tim(JNPL3PlusCols)
dim(JNPL3PlusCols)
length(JNPL3PlusCols)
length(JNPL3MinusCols)
JNPL3MinusCols
sum(JNPL3MinusCols)
sum(JNPL3PlusCols)
colnames(toPlot)
jnPL3Plus
JNPL3Plus
library(ggplot)
install.packages("ggplot2")
library(ggplot2)
toPlot
dim(toPlot)
melt(toPlot)
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
melt(toPlot)
?melt
type(topTen)
class(topTen)
topTen
class(toPlot)
ggplot(toPlot) + geom_boxplot
str(toPlot)
DGEList$data
toPlot$data
toPlot%groups
toPlot$groups
toPlot$group
head(toPlot)
toPlot$counts
toPlot$samples
ggplot(toPlot$counts) + geom_boxplot
boxplot(toPlot$counts), use.cols = FALSE)
boxplot(toPlot$counts, use.cols = FALSE)
toPlot$counts
toPlot$counts[,JNPL3Plus]
toPlot$counts[,JNPL3Minus]
boxplot(toPlot$counts[,JNPL3Plus], use.cols = FALSE)
boxplot(toPlot$counts[,JNPL3Minus], use.cols = FALSE)
boxplot(toPlot$counts[,JNPL3Plus], use.cols = FALSE)
boxplot(toPlot$counts[,JNPL3Minus], use.cols = FALSE)
?data.frame
?melt
?melt.list
melt(toPlot)
data.frame(toPlot$counts, row.names = topTen)
toPlot$samples
data.frame(toPlot$counts, row.names = topTen, id=toPlot$samples$group)
data.frame(toPlot$counts, row.names = topTen)
melt(data.frame(toPlot$counts, row.names = topTen))
colnames(toPlot)
rownames(toPlot)
melt(data.frame(toPlot$counts, row.names = topTen), id.vars = rownames(toPlot))
data.frame(toPlot$counts, row.names = topTen)
?transpose
??transpose
t(data.frame(toPlot$counts, row.names = topTen))
melt(t(data.frame(toPlot$counts, row.names = topTen)))
melt(t(data.frame(toPlot$counts, row.names = topTen)))
toPlot2 <- melt(t(data.frame(toPlot$counts, row.names = topTen)))
toPlot2
class(toPlot2)
test <- data.frame(toPlot$counts, row.names = topTen)
test
test <- t(data.frame(toPlot$counts, row.names = topTen))
test
toPlot$samples
test
toPlot$samples
toPlot$samples$group
test$factor.col <- toPlot$samples$group
test
t(toPlot$samples$group)
toPlot$samples$group
unlist(toPlot$samples$group)
test$factor.col <- unlist(toPlot$samples$group)
test
test <- t(data.frame(toPlot$counts, row.names = topTen))
test
test$factor.col <- unlist(toPlot$samples$group)
test <- t(data.frame(toPlot$counts, row.names = topTen))
?rbind
cbind(test, toPlot$samples$group)
toPlot$samples$group
test
test <- cbind(test, toPlot$samples$group) #1 is JNPL3minus, 2 is JNPL3plus
test
melt(test)
boxplot(toPlot$counts[,JNPL3Plus], use.cols = FALSE)
boxplot(toPlot$counts[,JNPL3Minus], use.cols = FALSE)
?boxplot
boxplot(toPlot$samples$group, data=toPlot$counts, notch=TRUE,
col=(c("gold","darkgreen")),
main="Top 10 Differentially Expressed Genes", xlab="Gene ID")
boxplot(x~toPlot$samples$group, data=toPlot$counts, notch=TRUE,
col=(c("gold","darkgreen")),
main="Top 10 Differentially Expressed Genes", xlab="Gene ID")
boxplot(toPlot$counts~toPlot$samples$group, data=toPlot$counts, notch=TRUE,
col=(c("gold","darkgreen")),
main="Top 10 Differentially Expressed Genes", xlab="Gene ID")
toPlot$samples$group
toPlot$counts
boxplot(t(toPlot$counts)~toPlot$samples$group, data=t(toPlot$counts), notch=TRUE,
col=(c("gold","darkgreen")),
main="Top 10 Differentially Expressed Genes", xlab="Gene ID")
boxplot(toPlot$counts~t(toPlot$samples$group), data=toPlot$counts, notch=TRUE,
col=(c("gold","darkgreen")),
main="Top 10 Differentially Expressed Genes", xlab="Gene ID")
toPlot$counts
boxplot(t(toPlot$counts))
toPlot$samples$group
t(toPlot$counts)
t(toPlot$samples$group)
topTags
topTags(de_GLM, n=10)
topTags(de_glm, n = 10)
topTen <- rownames(topTags(de_glm, n = 10))
toPlot <- d[topTen] #10 rows, 24 columnst
class(toPlot)
str(toPlot)
cbind(toPlot$samples$group, t(toPlot$counts))
test <- cbind(toPlot$samples$group, t(toPlot$counts))
t(test)
melt(t(test))
test
t(test)
test  <- data.frame(toPlot$samples$group, t(toPlot$counts))
teest
test
melt(test)
toPlot2 <- melt(test)
toPlot2
ggplot(toPlot2, aes(factor(variable), value)) + geom_boxplot(aes(fill = Type))
ggplot(toPlot2, aes(factor(variable), value)) + geom_boxplot(aes(fill = toPlot.samples.group))
topTen
topTags(de_glm, n = 10)
de2tags <- rownames(d2)[as.logical(de2)]
plotSmear(de_glm, de.tags=de2tags)
abline(h = c(-2, 2), col = "blue")
-log(2)
de2tags
de2
head(de2)
?decideTestsDGE
ls
topTags(de_glm, n = 10)
top <- topTags(de.tgw, n=50)
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM("external_gene_name", filters = "ensembl_gene_id", values = rownames(top), ensembl)
top <- cbind(top, geneNames)
top <- topTags(de_glm, n=50)
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM("external_gene_name", filters = "ensembl_gene_id", values = rownames(top), ensembl)
top <- cbind(top, geneNames)
top
de_glm
class(d2)
d2$counts
rownames(top)
de2$counts[rownames(top), ]
de2$counts
d2$counts[rownames(top), ]
?mean
mewn(d2$counts[rownames(top), ])
mean(d2$counts[rownames(top), ])
rowMeans(d2$counts[rownames(top), ])
dim(rowMeans(d2$counts[rownames(top), ]))
lenght(rowMeans(d2$counts[rownames(top), ]))
length(rowMeans(d2$counts[rownames(top), ]))
dim(top)
means <- rowMeans(d2$counts[rownames(top), ])
top[1]
top[1,]
top <- cbind(top, means)
top[1,]
colnames(top)
colnames(top)[6]
colnames(d2)
colnames(d)
d[1,1]
d2[1,1]
colnames(top)[6] <- "Mean gene count"
apply(d2$counts,1,sd)
colnames(top)[last]
colnames(top)[end]
colnames(top)[]
colnames(top)
colnames(top)[7] <- "Gene count Std Dev"
sdevs <- apply(d2$counts,1,sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Gene count Std Dev"
stdevs <- apply(d2$counts,1,sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Gene count Std Dev"
stdevs
d2$counts
stdevs <- apply(d2$counts[rownames(top)], 1, sd)
stdevs <- apply(d2$counts[rownames(top), ], 1, sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Gene count Std Dev"
top
colnames(top)[6] <- "Mean_count"
colnames(top)[7] <- "Count_Std_Dev"
top
colnames(top)[5] <- "Gene_Name"
top
kurtosis(d2$counts[rownames(top), ])
install.packages("PerformanceAnalytics")
library(performanceAnalytics) # for kertosis calculations
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
library(performanceAnalytics) # for kertosis calculations
library(PerformanceAnalytics) # for kertosis calculations
kertosis(d2$counts[rownames(top), ])
kurtosis(d2$counts[rownames(top), ])
kurtosises  <- kurtosis(d2$counts[rownames(top), ])
top <- cbind(top, kurtosises)
colnames(top)[7] <- "Count_Kurtosis"
top
top <- topTags(de_glm, n=50)
top
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM("external_gene_name", filters = "ensembl_gene_id", values = rownames(top), ensembl)
top <- cbind(top, geneNames)
colnames(top)[5] <- "Gene_Name"
top
means <- rowMeans(d2$counts[rownames(top), ])
top <- cbind(top, means)
colnames(top)[6] <- "Mean_count"
stdevs <- apply(d2$counts[rownames(top), ], 1, sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Count_Std_Dev"
top
kurtosises  <- kurtosis(d2$counts[rownames(top), ])
cbind(top, kurtosises)
t(kurtosises)
cbind(top, t(kurtosises)
)
View(kurtosises)
rownames(top)
d2$counts[rownames(top), ]
?kurtosis
kurtosises  <- apply(d2$counts[rownames(top), ], 1, kurtosis)
kurtosises
cbind(top, kurtosises)
kurtosises  <- apply(d2$counts[rownames(top), ], 1, kurtosis)
top <- cbind(top, kurtosises)
colnames(top)[7] <- "Count_Kurtosis"
top
colnames(top)[7] <- "Count_Std_Dev"
colnames(top)[8] <- "Count_Kurtosis"
top
q()
q()
library(dplyr) # for subsetting data
library(R.utils) # for unzipping data
library(synapseClient) # to download data
library(edgeR) # for DE analysis
library(biomaRt) # for gene name lookups
library(ggplot2) # for better boxplots
library(reshape2) # for melt for ggplot
library(PerformanceAnalytics) # for kertosis calculations
## Get data and define groups
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# get the transposed readcount file and covariates file from synapse
countFile <- synGet('syn3192634')
covariatesFile <- synGet('syn2875343') # the working dir copy
localCountFilePath <- getFileLocation(countFile)
if(!file.exists(sub('.gz', '', localCountFilePath))) {
gunzip(localCountFilePath)
}
localCountFilePath <- sub('.gz', '', localCountFilePath) #trim the .gz suffix
counts <- read.table(localCountFilePath, header = TRUE, stringsAsFactors = FALSE)
colnames(counts)[1] <- "LP_62_4"
# load covariates file to have handy
covariates <- read.table(getFileLocation(covariatesFile), header = TRUE, stringsAsFactors = FALSE)
# get JNPL3 subset of counts from counts file
JNPL3Counts <- dplyr::select(counts,
one_of(covariates[(covariates$Experiment == "MAPT_P301L"), ]$Mouse_ID))
# define groups
targets <- data.frame(Sample = covariates[(covariates$Experiment == "MAPT_P301L"), ]$Mouse_ID,
Genotype = covariates[(covariates$Experiment == "MAPT_P301L"), ]$Genotype,
Age = as.factor(covariates[(covariates$Experiment == "MAPT_P301L"), ]$Age_months))
group <- factor(paste(targets$Genotype, targets$Age, sep = "."))
JNPL3 <- (counts = JNPL3Counts, group = group)
JNPL3Counts
head(JNPL3Counts)
JNPL3 <- (counts = JNPL3Counts, group = group)
JNPL3 <- DGEList(counts = JNPL3Counts, group = group)
dim(JNPL3)
keep <- rowSums(cpm(JNPL3)>100) >= 2
d <- JNPL3[keep,]
dim(d)
#3133   24
d$samples$lib.size <- colSums(d$counts)
d <- calcNormFactors(d, method = "TMM")
plotMDS(d, method="bcv", col=as.numeric(d$samples$group))
legend("bottomleft", as.character(unique(d$samples$group)), col=1:3, pch=20)
design.mat <- model.matrix(~0 + targets$Genotype + targets$Genotype:targets$Age)
design.mat
colnames(design.mat)
targets
design.mat <- model.matrix(~0 + targets$Genotype + targets$Genotype:targets$Age)
colnames(design.mat)
factor(paste(targets$Age, targets$Genotype, sep=""))
testGroup <- factor(paste(targets$Age, targets$Genotype, sep=""))
testDesign.mat <- model.matrix(~0 + group)
testDesign.mat
design.mat
colnames(design.mat)
class(design.mat)
twoPlus <- c(rep(0, length(design.mat[1,])))
twoPlus
twoPlus <- c(rep(0, length(design.mat[,1])))
twoPlus
targets
twoPlus[16]
twoPlus[16] <- 1
twoPlus
twoPlus[17] <- 1
twoPlus[24] <- 1
q()
setwd("~/Projects/UO1-AMP/working/expression analysis")
?sub
q()
