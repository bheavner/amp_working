?boxplot
boxplot(toPlot, use.cols = FALSE)
toPlot
as.matrix(toPlot)
boxplot(as.matrix(toPlot), use.cols = FALSE)
toPlot(, JNPL3PlusCols)
toPlot[], JNPL3PlusCols]
toPlot[, JNPL3PlusCols]
JNPL3PlusCols
dim(toPlot)
tim(JNPL3PlusCols)
dim(JNPL3PlusCols)
length(JNPL3PlusCols)
length(JNPL3MinusCols)
JNPL3MinusCols
sum(JNPL3MinusCols)
sum(JNPL3PlusCols)
colnames(toPlot)
jnPL3Plus
JNPL3Plus
library(ggplot)
install.packages("ggplot2")
library(ggplot2)
toPlot
dim(toPlot)
melt(toPlot)
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
melt(toPlot)
?melt
type(topTen)
class(topTen)
topTen
class(toPlot)
ggplot(toPlot) + geom_boxplot
str(toPlot)
DGEList$data
toPlot$data
toPlot%groups
toPlot$groups
toPlot$group
head(toPlot)
toPlot$counts
toPlot$samples
ggplot(toPlot$counts) + geom_boxplot
boxplot(toPlot$counts), use.cols = FALSE)
boxplot(toPlot$counts, use.cols = FALSE)
toPlot$counts
toPlot$counts[,JNPL3Plus]
toPlot$counts[,JNPL3Minus]
boxplot(toPlot$counts[,JNPL3Plus], use.cols = FALSE)
boxplot(toPlot$counts[,JNPL3Minus], use.cols = FALSE)
boxplot(toPlot$counts[,JNPL3Plus], use.cols = FALSE)
boxplot(toPlot$counts[,JNPL3Minus], use.cols = FALSE)
?data.frame
?melt
?melt.list
melt(toPlot)
data.frame(toPlot$counts, row.names = topTen)
toPlot$samples
data.frame(toPlot$counts, row.names = topTen, id=toPlot$samples$group)
data.frame(toPlot$counts, row.names = topTen)
melt(data.frame(toPlot$counts, row.names = topTen))
colnames(toPlot)
rownames(toPlot)
melt(data.frame(toPlot$counts, row.names = topTen), id.vars = rownames(toPlot))
data.frame(toPlot$counts, row.names = topTen)
?transpose
??transpose
t(data.frame(toPlot$counts, row.names = topTen))
melt(t(data.frame(toPlot$counts, row.names = topTen)))
melt(t(data.frame(toPlot$counts, row.names = topTen)))
toPlot2 <- melt(t(data.frame(toPlot$counts, row.names = topTen)))
toPlot2
class(toPlot2)
test <- data.frame(toPlot$counts, row.names = topTen)
test
test <- t(data.frame(toPlot$counts, row.names = topTen))
test
toPlot$samples
test
toPlot$samples
toPlot$samples$group
test$factor.col <- toPlot$samples$group
test
t(toPlot$samples$group)
toPlot$samples$group
unlist(toPlot$samples$group)
test$factor.col <- unlist(toPlot$samples$group)
test
test <- t(data.frame(toPlot$counts, row.names = topTen))
test
test$factor.col <- unlist(toPlot$samples$group)
test <- t(data.frame(toPlot$counts, row.names = topTen))
?rbind
cbind(test, toPlot$samples$group)
toPlot$samples$group
test
test <- cbind(test, toPlot$samples$group) #1 is JNPL3minus, 2 is JNPL3plus
test
melt(test)
boxplot(toPlot$counts[,JNPL3Plus], use.cols = FALSE)
boxplot(toPlot$counts[,JNPL3Minus], use.cols = FALSE)
?boxplot
boxplot(toPlot$samples$group, data=toPlot$counts, notch=TRUE,
col=(c("gold","darkgreen")),
main="Top 10 Differentially Expressed Genes", xlab="Gene ID")
boxplot(x~toPlot$samples$group, data=toPlot$counts, notch=TRUE,
col=(c("gold","darkgreen")),
main="Top 10 Differentially Expressed Genes", xlab="Gene ID")
boxplot(toPlot$counts~toPlot$samples$group, data=toPlot$counts, notch=TRUE,
col=(c("gold","darkgreen")),
main="Top 10 Differentially Expressed Genes", xlab="Gene ID")
toPlot$samples$group
toPlot$counts
boxplot(t(toPlot$counts)~toPlot$samples$group, data=t(toPlot$counts), notch=TRUE,
col=(c("gold","darkgreen")),
main="Top 10 Differentially Expressed Genes", xlab="Gene ID")
boxplot(toPlot$counts~t(toPlot$samples$group), data=toPlot$counts, notch=TRUE,
col=(c("gold","darkgreen")),
main="Top 10 Differentially Expressed Genes", xlab="Gene ID")
toPlot$counts
boxplot(t(toPlot$counts))
toPlot$samples$group
t(toPlot$counts)
t(toPlot$samples$group)
topTags
topTags(de_GLM, n=10)
topTags(de_glm, n = 10)
topTen <- rownames(topTags(de_glm, n = 10))
toPlot <- d[topTen] #10 rows, 24 columnst
class(toPlot)
str(toPlot)
cbind(toPlot$samples$group, t(toPlot$counts))
test <- cbind(toPlot$samples$group, t(toPlot$counts))
t(test)
melt(t(test))
test
t(test)
test  <- data.frame(toPlot$samples$group, t(toPlot$counts))
teest
test
melt(test)
toPlot2 <- melt(test)
toPlot2
ggplot(toPlot2, aes(factor(variable), value)) + geom_boxplot(aes(fill = Type))
ggplot(toPlot2, aes(factor(variable), value)) + geom_boxplot(aes(fill = toPlot.samples.group))
topTen
topTags(de_glm, n = 10)
de2tags <- rownames(d2)[as.logical(de2)]
plotSmear(de_glm, de.tags=de2tags)
abline(h = c(-2, 2), col = "blue")
-log(2)
de2tags
de2
head(de2)
?decideTestsDGE
ls
topTags(de_glm, n = 10)
top <- topTags(de.tgw, n=50)
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM("external_gene_name", filters = "ensembl_gene_id", values = rownames(top), ensembl)
top <- cbind(top, geneNames)
top <- topTags(de_glm, n=50)
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM("external_gene_name", filters = "ensembl_gene_id", values = rownames(top), ensembl)
top <- cbind(top, geneNames)
top
de_glm
class(d2)
d2$counts
rownames(top)
de2$counts[rownames(top), ]
de2$counts
d2$counts[rownames(top), ]
?mean
mewn(d2$counts[rownames(top), ])
mean(d2$counts[rownames(top), ])
rowMeans(d2$counts[rownames(top), ])
dim(rowMeans(d2$counts[rownames(top), ]))
lenght(rowMeans(d2$counts[rownames(top), ]))
length(rowMeans(d2$counts[rownames(top), ]))
dim(top)
means <- rowMeans(d2$counts[rownames(top), ])
top[1]
top[1,]
top <- cbind(top, means)
top[1,]
colnames(top)
colnames(top)[6]
colnames(d2)
colnames(d)
d[1,1]
d2[1,1]
colnames(top)[6] <- "Mean gene count"
apply(d2$counts,1,sd)
colnames(top)[last]
colnames(top)[end]
colnames(top)[]
colnames(top)
colnames(top)[7] <- "Gene count Std Dev"
sdevs <- apply(d2$counts,1,sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Gene count Std Dev"
stdevs <- apply(d2$counts,1,sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Gene count Std Dev"
stdevs
d2$counts
stdevs <- apply(d2$counts[rownames(top)], 1, sd)
stdevs <- apply(d2$counts[rownames(top), ], 1, sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Gene count Std Dev"
top
colnames(top)[6] <- "Mean_count"
colnames(top)[7] <- "Count_Std_Dev"
top
colnames(top)[5] <- "Gene_Name"
top
kurtosis(d2$counts[rownames(top), ])
install.packages("PerformanceAnalytics")
library(performanceAnalytics) # for kertosis calculations
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
library(performanceAnalytics) # for kertosis calculations
library(PerformanceAnalytics) # for kertosis calculations
kertosis(d2$counts[rownames(top), ])
kurtosis(d2$counts[rownames(top), ])
kurtosises  <- kurtosis(d2$counts[rownames(top), ])
top <- cbind(top, kurtosises)
colnames(top)[7] <- "Count_Kurtosis"
top
top <- topTags(de_glm, n=50)
top
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM("external_gene_name", filters = "ensembl_gene_id", values = rownames(top), ensembl)
top <- cbind(top, geneNames)
colnames(top)[5] <- "Gene_Name"
top
means <- rowMeans(d2$counts[rownames(top), ])
top <- cbind(top, means)
colnames(top)[6] <- "Mean_count"
stdevs <- apply(d2$counts[rownames(top), ], 1, sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Count_Std_Dev"
top
kurtosises  <- kurtosis(d2$counts[rownames(top), ])
cbind(top, kurtosises)
t(kurtosises)
cbind(top, t(kurtosises)
)
View(kurtosises)
rownames(top)
d2$counts[rownames(top), ]
?kurtosis
kurtosises  <- apply(d2$counts[rownames(top), ], 1, kurtosis)
kurtosises
cbind(top, kurtosises)
kurtosises  <- apply(d2$counts[rownames(top), ], 1, kurtosis)
top <- cbind(top, kurtosises)
colnames(top)[7] <- "Count_Kurtosis"
top
colnames(top)[7] <- "Count_Std_Dev"
colnames(top)[8] <- "Count_Kurtosis"
top
q()
setwd("~/Projects/UO1-AMP/working/expression analysis")
?exactTest
library(edgeR) # for DE analysis
?exactTest
?glmLRT
?decideTestsDGE
library(dplyr) # for subsetting data
library(R.utils) # for unzipping data
library(synapseClient) # to download data
library(reshape2) # for melt for ggplot
synapseLogin()
countFile <- synGet('syn3192634')
covariatesFile <- synGet('syn2875343') # the working dir copy
localCountFilePath <- getFileLocation(countFile)
if(!file.exists(sub('.gz', '', localCountFilePath))) {
gunzip(localCountFilePath)
}
localCountFilePath <- sub('.gz', '', localCountFilePath) #trim the .gz suffix
counts <- read.table(localCountFilePath, header = TRUE, stringsAsFactors = FALSE)
colnames(counts)[1] <- "LP_62_4"
covariates <- read.table(getFileLocation(covariatesFile), header = TRUE, stringsAsFactors = FALSE)
dplyr::select(filter(covariates, Experiment == "MAPT_P301L" & Genotype == "+"), Mouse_ID)
JNPL3Samples <- dplyr::select(filter(covariates, Experiment == "MAPT_P301L"), Mouse_ID)
JNPL3Samples
JNPL3Counts <- dplyr::select(counts, one_of(JNPL3Samples)
)
JNPL3Samples
class(JNPL3Samples)
?as.character
as.character(JNPL3Samples)
as.list(JNPL3Samples)
JNPL3Counts <- dplyr::select(counts, one_of(as.list(JNPL3Samples)))
JNPL3Counts <- dplyr::select(counts, one_of(as.character(JNPL3Samples)))
colnames(JNPL3Counts)
?one_of
counts[,JNPL3Samples]
class(JNPL3Samples)
str(JNPL3Samples)
JNPL3Counts <- dplyr::select(counts, one_of(JNPL3Samples$Mouse_ID))
dplyr::select(covariates, one_of(JNPL3Samples$Mouse_ID))
JNPL3Samples <- dplyr::select(filter(covariates, Experiment == "MAPT_P301L"), Mouse_ID)
JNPL3Counts <- dplyr::select(counts, one_of(JNPL3Samples$Mouse_ID))
JNPL3Covariates <- dplyr::select(covariates, one_of(JNPL3Samples$Mouse_ID))
JNPL3 <- DGEList(counts = JNPL3Counts)
d.full <- JNPL3 # keep the old one in case we mess up
dim(d.full)
keep <- rowSums(cpm(JNPL3)>100) >= 2
d <- JNPL3[keep,]
dim(d)
d$samples$lib.size <- colSums(d$counts)
d <- calcNormFactors(d)
str(d)
colnames(JNPL3Covariates)
colnames(JNPL3Covariates)[1:3]
colnames(JNPL3Covariates)[1 3 5]
colnames(JNPL3Covariates)[c(1 3 5)]
colnames(JNPL3Covariates)[c(1, 3, 5)]
d
d$counts
melted <- melt(d$counts)
melted
head(melted)
fit <- glm(d$counts ~ factors)
factors <- colnames(JNPL3Covariates)[c(3, 4, 5, 6, 9, 10)]
fit <- glm(d$counts ~ factors)
str(melted)
t(d$counts)
melted <- t(d$counts)
str(melted)
head(melted)
head(melted)
melted <- t(d$counts))
melted <- melt(t(d$counts))
str(melted)
head(melted)
head(JNPL3Covariates)
?melt
melted <- melt(t(d$counts), id.vars = "Mouse_ID", measure.vars = "counts")
str(melted)
head(melted)
colnames(counts)
colnames(d)
colnames(d$counts)
rownames(d)
str(d)
d$counts
t(d$counts)
head(t(d$counts))
factors
JNPL3Covariates([,factors])
JNPL3Covariates[,factors]
JNPL3Samples$Mouse_ID
rownames(covariates)
colnames(covariates)
dplyr::select(covariates$Mouse_ID, one_of(JNPL3Samples$Mouse_ID))
covariates$Mouse_ID
?rownames
rownames(covariates) <- covariates$Mouse_ID
rownames(covariates)
dplyr::select(covariates, one_of(JNPL3Samples$Mouse_ID))
rownames(covariates) <- covariates$Mouse_ID
JNPL3Covariates <- dplyr::select(covariates, one_of(JNPL3Samples$Mouse_ID))
colnames(JNPL3Covariates)
factors <- colnames(JNPL3Covariates)[c(3, 4, 5, 6, 9, 10)]
JNPL3Covariates[,factors]
rownames(JNPL3Covariates)
rownames(counts)
colnames(counts)
t(covariates)
JNPL3Covariates <- dplyr::select(t(covariates), one_of(JNPL3Samples$Mouse_ID))
JNPL3Covariates <- dplyr::select(covariates, one_of(JNPL3Samples$Mouse_ID))
JNPL3Covariates[JNPL3Samples$Mouse_ID,]
JNPL3Covariates <- covariates[JNPL3Samples$Mouse_ID,]
colnames(JNPL3Covariates)
rownames(JNPL3Covariates)
factors[1]
fit <- glm(d$counts ~ JNPL3Covariates[factors[1])
fit <- glm(d$counts ~ JNPL3Covariates[factors[1]])
JNPL3Covariates[factors[1]]
d$counts
fit <- glm(t(d$counts) ~ JNPL3Covariates[factors[1]])
melt(JNPL3Covariates)
melt(JNPL3Covariates[,factors])
factors
colnames(JNPL3Covariates.)
colnames(JNPL3Covariates)
colnames(d.count)
colnames(d.counts)
colnames(d$counts)
dim(t(D$counts))
dim(t(d$counts))
dim(JNPL3Covariates)
?glm
rownames(t(d$counts))
rownames(JNPL3Covariates)
rownames(t(d$counts)) == rownames(JNPL3Covariates)
colnames(JNPL3Covariates)
fit <- glm(t(d$counts) ~ JNPL3Covariates[,"Genotype"])
fit <- glm(t(d$counts) ~ JNPL3Covariates[,"Genotype"], data = t(d$counts))
fit <- glm(t(d$counts) ~ JNPL3Covariates[,"Genotype"], data = d$counts)
fit <- glm(t(d$counts) ~ JNPL3Covariates[,"Genotype"], data = d)
data = t(d)
fit <- glm(t(d$counts) ~ JNPL3Covariates[,"Genotype"], data = data)
dim(data)
d
dim(d)
class(data)
data = t(d$counts)
class(data)
?as.df
?data.frame
data = data.frame(t(d$counts))
fit <- glm(t(d$counts) ~ JNPL3Covariates[,"Genotype"], data = data)
data <- data.frame(t(d$counts))
data
colnames(data)
fit <- glm(data ~ JNPL3Covariates[,"Genotype"], data = data)
class(data)
head(melt(data))
head(melt(d$counts))
head(melt(t(d$counts))
)
head(melt(t(d$counts)))
head(melt(JNPL3Covariates))
colnames(t(d$counts))
head(melt(JNPL3Covariates))
head(melt(JNPL3Covariates, id.vars = "Mouse_ID"))
head(melt(JNPL3Covariates[,factors], id.vars = c("Mouse_ID", "Experiment", "Genotype", "Sex", "Seq.Run.ID"))
)
factors
head(melt(JNPL3Covariates[,c("Mouse_ID", factors], id.vars = c("Mouse_ID", "Experiment", "Genotype", "Sex", "Seq.Run.ID"))
head(melt(JNPL3Covariates[,c("Mouse_ID", factors)], id.vars = c("Mouse_ID", "Experiment", "Genotype", "Sex", "Seq.Run.ID"))
)
head(melt(JNPL3Covariates[,c("Mouse_ID", factors)], id.vars = c("Mouse_ID", "Genotype", "Sex", "Age_months", "Lane.Number", "Clusters")))
head(melt(JNPL3Covariates[,c("Mouse_ID", factors)], id.vars = c("Mouse_ID", "Genotype", "Sex", "Age_months", "Lane.Number", "Clusters", "RIN")))
rownames(t(d$counts))
colnames(t(d$counts))
head(melt(t(d$counts)))
test <- melt(t(d$counts)), id.vars = c("")
test <- melt(t(d$counts))
rownames(test)
colnames(test)
colnames(test) <- ("Mouse_ID", "Gene_Name", "Count")
colnames(test) <- c("Mouse_ID", "Gene_Name", "Count")
colnames(test)
head(test)
dim(test)
dim(melt(JNPL3Covariates[,c("Mouse_ID", factors)], id.vars = c("Mouse_ID", "Genotype", "Sex", "Age_months", "Lane.Number", "Clusters", "RIN")))
dim(t(d$counts)+JNPL3Covariates)
dim(merge(t(d$counts), JNPL3Covariates))
dim(merge(x = t(d$counts), y = JNPL3Covariates, by.x="Mouse_ID", by.y = "Mouse_ID"))
colnames(data)
rownames(data)
dim(data)
data$RIN <- JNPL3Covariates[, "RIN"]
colnames(data)
data$Genotype <- JNPL3Covariates[, "Genotype"]
data$Sex <- JNPL3Covariates[, "Sex"]
data$Age_months <- JNPL3Covariates[, "Age_months"]
data$Lane.number <- JNPL3Covariates[, "Lane.number"]
data$Clusters <- JNPL3Covariates[, "Clusters"]
data$Lane_number <- JNPL3Covariates[, "Lane.number"]
colnames(JNPL3Covariates)
data$Lane.Number <- JNPL3Covariates[, "Lane.Number"]
colnames(dat)
colnames(data)
melt(data)
head(melt(data))
colnames(JNPL3Covariates)
colnames(data)
data$Mouse_ID <- JNPL3Covariates[, "Mouse_ID"]
mdata <- melt(data, id.vars = "Mouse_ID")
head(mdata)
mdata <- melt(data, id.vars = c("Mouse_ID", "Genotype")
)
head(mdata)
data$value
mdata$value
hist(mdata$value)
?hist
?as.num
?as.char
class(mdata$value)
str(data)
?as.int
head(mdata)
colnames(data)
?glmfit
?glm
colnames(data)[1]
fit <- glm(colnames(data)[1] ~ RIN + Genotype + Sex + Age_months + Clusters + Lane.Number + Mouse_ID, data = data)
dim(data$RIN)
data$RIN
length(data$RIN)
length(data$Genotype)
length(data$Sex)
length(data$colnames(data)[1])
colnames(data)[1]
fit <- glm(ENSMUSG00000000088 ~ RIN + Genotype + Sex + Age_months + Clusters + Lane.Number + Mouse_ID, data = data)
class(data#RIN)
)
class(data$RIN)
str(data$RIN)
fit <- lm(ENSMUSG00000000088 ~ RIN + Genotype + Sex + Age_months + Clusters + Lane.Number + Mouse_ID, data = data)
q()
