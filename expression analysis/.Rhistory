q()
library(synapseClient)
source('http://depot.sagebase.org/CRAN.R')
update.package(c("synapseClient"))
pkgInstall(c("synapseClient"))
install.packages(package, repos = c(sageRepo, "http://cran.r-project.org"),
)
library(synapseClient)
session
sessionInfo
sessionInfo()
library(synapseClient)
library(R.utils)
library(edgeR)
exit()
quit()
sessionInfo()
library(synapseClient)
library(R.utils)
library(edgeR)
tauZipfile <- synGet('syn2875347')
localFilePath <- getFileLocation(tauZipfile)
synapseLogin()
packageStatus()
install.packages(c("manipulate", "Rcpp"))
packageStatus()
remove.package("synapseClient")
?pkgRemove
?pkgInstall
?ls
?pkg
??pkg
pkgInstall("synapseClient")
exit()
quit()
setwd("~/Projects/UO1-AMP/expression analysis")
library(synapseClient)
library(dplyr)
synapseLogin()
covariatesFile <- synGet('syn2875343')
covariates <- read.table(getFileLocation(covariatesFile),
header = TRUE,
stringsAsFactors = FALSE)
colnames(covariates)
covariates$Mouse_ID
countFile <- synGet('syn3219030') # start with the normalized gene counts - can play with transcript counts later
sub('-', '.', covariates$Mouse_ID)
localCountFilePath <- getFileLocation(countFile)
if(!file.exists(sub('.gz', '', localCountFilePath))) {
gunzip(localCountFilePath)
}
library(R.utils)
if(!file.exists(sub('.gz', '', localCountFilePath))) {
gunzip(localCountFilePath)
}
localCountFilePath <- sub('.gz', '', localCountFilePath) #trim the .gz suffix
normalizedCounts <- read.table(localCountFilePath, header = TRUE, stringsAsFactors = FALSE)
colnames(normalizedCounts)
covariates$Mouse_ID
sub('-', '.', covariates$Mouse_ID)
test  <- covariates$Mouse_ID
sub('.', '_', test)
?sub
sub('\.', '_', test)
sub(\., '_', test)
sub('/.', '_', test)
colnames(normalizedCounts)
test
sub('\.', '_', test)
sub("\.", "_", test)
sub("[.]", "_", test)
colnames(normalizedCounts)
test2 <- sub("[.]", "_", test)
test2
colnames(normalizedCounts)
sub('-', '.', test2)
sub("LP_", "LP", test2)
sub("LP", "LP_", test2)
colnames(normalizedCounts)
test3 <- sub("LP", "LP_", test2)
sub('-', '.', test3)
colnames(normalizedCounts)
?gsub
?sub
sub('X', '\b[:digit:]', test3)
sub('X', '\b[:digit:]', test4)
test4 <- sub('-', '.', test3)
sub('X', '\b[:digit:]', test4)
test4
sub('X', '^[:digit:]+', test4)
sub('X', '^[:digit:]', test4)
sub('X', '[:digit:]', test4)
?sub
sub('[:digit:]', 'X', test4)
sub([:digit:], 'X', test4)
sub('[:digit:]+', 'X', test4)
class(test4)
sub('[0 1 2 3 4 5 6 7 8 9]+', 'X', test4)
sub('^[0 1 2 3 4 5 6 7 8 9]+', 'X', test4)
sub('^[0 1 2 3 4 5 6 7 8 9]', 'X', test4)
colnames(normalizedCounts)
sub('?<number>^[0 1 2 3 4 5 6 7 8 9]', 'X<number>', test4)
colnames(normalizedCounts)
test4
sub('^1', 'X1', test4)
sub('^3', 'X3', test4)
covariates$Mouse_ID <- sub("[.]", "_", covariates$Mouse_ID)
covariates$Mouse_ID <- sub("LP", "LP_", covariates$Mouse_ID)
# next, I want to replace - with . in all cases
covariates$Mouse_ID <- sub('-', '.', covariates$Mouse_ID)
# finally, I want to prepend all IDs that start with a number with "X". My regex-fu is weak:
covariates$Mouse_ID <- sub('^1', 'X1', covariates$Mouse_ID)
covariates$Mouse_ID <- sub('^3', 'X3', covariates$Mouse_ID)
covariates$Mouse_ID
colnames(normalizedCounts)
?File
covariatesFile$path
covariatesFile
covariatesFile.annotations()
getFileLocation(covariatesFile)
?write.table
write.table(covariates, file="Mouse_samples.txt", quote=F)
write.table(covariates, file="Mouse_samples.txt", quote=F, row.names = FALSE)
library(synapseClient)
library(R.utils)
library(edgeR)
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
codeFile <- ("https://github.com/bheavner/ampSynapseProjects/blob/90d5c0194a2f42615eda55431355073813103741/rnaseqAnalysis/reformat_merged_readcounts.R")
adCountFileSynapseIDs <- c()#'syn3160436', 'syn3160437')
pspCountFileSynapseIDs <- c()#'syn3160443', 'syn3160444')
mouseCountFileSynapseIDs <- c('syn3160706', 'syn3160709')
adOmit  <- c('5215', 'NA98-300', 'NA02-092')
pspOmit <- c('NA00-002', 'NA00-164', 'NA03-008', 'NA99-042', 'NA04-056', 'NA01-150', 'NA01-058', 'NA00-213', 'NA03-154', 'NA03-291', 'NA04-020')
for (dataset in list(adCountFileSynapseIDs, pspCountFileSynapseIDs, mouseCountFileSynapseIDs)) {
if (identical(dataset, adCountFileSynapseIDs)) {
omit <- adOmit
} else if (identical(dataset, pspCountFileSynapseIDs)) {
omit <- pspOmit
} else {
omit <- NULL
}
for (mergedCountFile in dataset) {
message("Processing SynID: ", mergedCountFile)
# Download file from Synapse
originalCountFile <- synGet(mergedCountFile)
# unzip file and load for processing
localFilePath <- getFileLocation(originalCountFile)
if(!file.exists(sub('.gz', '', localFilePath))) {
gunzip(localFilePath)
}
localFilePath <- sub('.gz', '', localFilePath) #trim the .gz suffix
rawCounts <- read.table(localFilePath, header = TRUE)
# begin processing - first transpose b/c James did it differently than DGEList expects
transposedCounts <- t(rawCounts)
# remove samples that don't pass QC
keepSamples <- setdiff(colnames(transposedCounts), omit) #probably not the best way..
transposedCounts <- transposedCounts[, keepSamples]
# write the data to local dir
newFileName <- sub('.txt.gz', '', originalCountFile$properties$name)
newFileName <- paste0(newFileName, "_transposed.txt", sep="")
write.table(transposedCounts, newFileName, quote = FALSE, sep = "\t", row.names = TRUE)
# package it up, then create a Synapse object for the output file and upload with provenance
gzip(newFileName)
newFileName <- paste0(newFileName, ".gz", sep="")
parentId <- originalCountFile$properties$parentId
transposedCountFile <- File(newFileName, parentId = parentId)
transposedCountFile <- synStore(transposedCountFile,
activityName="Transposed merged readcount file",
used=list(list(name = "reformat_merged_readcounts.R",
url = codeFile, wasExecuted = T),
list(entity=originalCountFile,
wasExecuted=F)))
}
}
library(synapseClient)
library(R.utils)
library(edgeR)
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
codeFile <- ("https://github.com/bheavner/ampSynapseProjects/blob/5c2fea4f6c4930e623df97eef96e6b0224aaeec1/rnaseqAnalysis/normalize_readcounts.R")
countFileSynapseIDs <- c('syn3192634', 'syn3192651')#'syn3191070', 'syn3191083', 'syn3191085', 'syn3191122', 'syn3192634', 'syn3192651')
for (mergedCountFile in countFileSynapseIDs) {
message("Normalizing ", mergedCountFile)
# Download file from Synapse
originalCountFile <- synGet(mergedCountFile)
# unzip file and load for processing
localFilePath <- getFileLocation(originalCountFile)
if(!file.exists(substr(localFilePath, 1, nchar(localFilePath) - 3))) {
gunzip(localFilePath)
}
localFilePath <- sub('.gz', '', localFilePath) #trim the .gz suffix
transposedCounts <- read.table(localFilePath, header = TRUE)
# make DGEList object
expr <- DGEList(transposedCounts, group = rep(1, ncol(transposedCounts)))
# calculate normalization factors
normFactors <- calcNormFactors(expr, method = ("TMM"))
# use normaliztion factors to calculate cpm -
# per https://www.biostars.org/p/84087/, that's calculated as
# count / (library size * normalization factor))
normalizedCpm <- cpm(normFactors)
# write the data to local dir
newFileName <- sub('_transposed.txt.gz', '', originalCountFile$properties$name)
newFileName <- paste0(newFileName, "_normalized.txt", sep="")
write.table(normalizedCpm, newFileName, quote = FALSE, sep = "\t", row.names = TRUE)
# package it up, then create a Synapse object for the output file and upload with provenance
gzip(newFileName)
newFileName <- paste0(newFileName, ".gz", sep="")
parentId <- originalCountFile$properties$parentId
normalizedCountFile <- File(newFileName, parentId = parentId)
normalizedCountFile <- synStore(normalizedCountFile,
activityName="CPM (using TMM) from edgeR normalization",
used=list(list(name = "normalize_readcounts.R",
url = codeFile, wasExecuted = T),
list(entity=originalCountFile,
wasExecuted=F)))
}
library(dplyr)
library(R.utils)
library(synapseClient)
library(edgeR)
library(biomaRt)
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
countFile <- synGet('syn3207189') # the working dir copy
covariatesFile <- synGet('syn2875343') # the working dir copy
localCountFilePath <- getFileLocation(countFile)
if(!file.exists(sub('.gz', '', localCountFilePath))) {
gunzip(localCountFilePath)
}
localCountFilePath <- sub('.gz', '', localCountFilePath) #trim the .gz suffix
normalizedCounts <- read.table(localCountFilePath, header = TRUE, stringsAsFactors = FALSE)
# load covariates file to have handy
covariates <- read.table(getFileLocation(covariatesFile), header = TRUE, stringsAsFactors = FALSE)
View(covariates)
colnames(covariates)
minusSamples <- dplyr::select(filter(covariates, Sex == "F" & Experiment == "MAPT_P301L" & Age_months == 12 & Genotype == "-"), Mouse_ID)
minuSamples
minusSamples
plusSamples <- dplyr::select(filter(covariates, Sex == "F" & Experiment == "MAPT_P301L" & Age_months == 12 & Genotype == "+"), Mouse_ID)
plusSamples
samplesOfInterest <- c(minusSamples, plusSamples)
samplesOfInterest
group <- c(rep("-", 3), rep("+", 6))
JNPL3Samples <- DGEList(counts=dplyr::select(normalizedCounts, one_of(samplesOfInterest)), group = group)
class(minusSamples)
minusSamples <- as.character(minusSamples$Mouse_ID)
plusSamples <- as.character(plusSamples$Mouse_ID)
samplesOfInterest <- c(minusSamples, plusSamples)
group <- c(rep("-", 3), rep("+", 6))
JNPL3Samples <- DGEList(counts=dplyr::select(normalizedCounts, one_of(samplesOfInterest)), group = group)
d <- estimateCommonDisp(JNPL3Samples,verbose=T)
d <- estimateTagwiseDisp(d)
de.tgw <- exactTest(d)
summary(decideTestsDGE(de.tgw, p.value=0.01))
topTags(de.tgw)
names(d)
normalizedCounts$twd <- d$tagwise.dispersion
head(normalizedCounts)
hist(normalizedCounts$twd, breaks=20, xlim=c(0,3))
names(de.tgw)
head(de.tgw$table)
normalizedCounts <- cbind(normalizedCounts, de.tgw$table)
head(normalizedCounts)
normalizedCounts$PValue_fdr <- p.adjust(method="fdr",p=normalizedCounts$PValue)
head(normalizedCounts)
table(normalizedCounts$PValue_fdr<0.01)
plotMDS(d, method="bcv", col=as.numeric(d$samples$group))
legend("bottomleft", as.character(unique(d$samples$group)), col=1:3, pch=20)
plotBCV(d)
top <- topTags(de.tgw, n=50)
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM("external_gene_name", filters = "ensembl_gene_id", values = rownames(top), ensembl)
top <- cbind(top, geneNames)
top
q()
