originalCountFile <- synGet(mergedCountFile)
# unzip file and load for processing
localFilePath <- getFileLocation(originalCountFile)
if(!file.exists(substr(localFilePath, 1, nchar(localFilePath) - 3))) {
gunzip(localFilePath)
}
localFilePath <- sub('.gz', '', localFilePath) #trim the .gz suffix
transposedCounts <- read.table(localFilePath, header = TRUE, check.names = FALSE)
# make DGEList object
expr <- DGEList(transposedCounts, group = rep(1, ncol(transposedCounts)))
# calculate normalization factors
normFactors <- calcNormFactors(expr, method = ("TMM"))
# If you get "error: Error in quantile.default(x, p = p) :
# missing values and NaN's not allowed if 'na.rm' is FALSE"
# expr$samples$lib.size shows a library size of 0 for problematic samples
# use normaliztion factors to calculate cpm -
# per https://www.biostars.org/p/84087/, that's calculated as
# count / (library size * normalization factor))
normalizedCpm <- cpm(normFactors)
# write the data to local dir
# need to fix this naming
newFileName <- sub('_id_counts.txt.gz', '', originalCountFile$properties$name)
newFileName <- paste0(newFileName, "Counts_normalized.txt", sep="")
write.table(format(normalizedCpm, scientific = FALSE, digits = 5),
newFileName, quote = FALSE, sep = "\t", row.names = TRUE)
# package it up, then create a Synapse object for the output file and upload with provenance
gzip(newFileName)
newFileName <- paste0(newFileName, ".gz", sep="")
parentId <- originalCountFile$properties$parentId
normalizedCountFile <- File(newFileName, parentId = parentId)
normalizedCountFile <- synStore(normalizedCountFile,
activityName="CPM (using TMM) from edgeR normalization",
used=list(list(name = "normalize_readcounts.R",
url = codeFile, wasExecuted = T),
list(entity=originalCountFile,
wasExecuted=F)))
}
q()
q()
lengths = c(100,200,300,100,100)
mat = cbind(c(1,1,0,1,0),c(1,1,1,1,1),c(0,1,1,0,1))
transcriptLengths  <- lengths %*% mat
w = 1000
counts = c(125,350,300,125,100)
theta.hat = c(1, 2, 3) / 10000
mat %*% theta.hat * lengths * w
LHS = counts/(lengths * w)
lm.fit(mat, LHS)$coefficients
counts = c(60,320,420,60,140)
LHS = counts/(lengths * w)
lm.fit(mat, LHS)$coefficients
q()
update.packages(checkBuilt=TRUE)
source("http://bioconductor.org/biocLite.R")
biocLite()
biocVersion()
biocValid()
library(synapseClient) # for synapse data exchange
source("http://depot.sagebase.org/CRAN.R")
pkgInstall("synapseClient")
q()
library(synapseClient) # for synapse data exchange
biocVersion()
source("http://bioconductor.org/biocLite.R")
biocLite()
biocVersion()
biocValid()
q()
library('airway')
library(airway)
library(BiocInstaller)
biocLite("airway")
library(airway)
library(pasillaBamSubset)
biocLite("pasillaBamSubset")
library(pasillaBamSubset)
bam.file <- untreated3_chr4()
library(Rsamtools)
bf <- BamFile(bam.file)
biocLite(Rsamtools)
cranpkgs <- c("ggplot2","pheatmap")
install.packages(cranpkgs)
# rafalib from github (not strictly necessary, but useful for plots)
install.packages("devtools")
library(devtools)
install_github("ririzarr/rafalib")
# the rest are Bioconductor packages
biocpkgs <- c("Rsamtools",
"GenomicFeatures",
"GenomicAlignments",
"Rsubread",
"airway",
"pasilla",
"DESeq2",
"DEXSeq",
"vsn",
"sva",
"org.Hs.eg.db",
"cummeRbund",
"pasillaBamSubset",
"TxDb.Dmelanogaster.UCSC.dm3.ensGene")
source("http://bioconductor.org/biocLite.R")
biocLite(biocpkgs)
library(Rsamtools)
bf <- BamFile(bam.file)
library(TxDb.Dmelanogaster.UCSC.dm3.ensGene)
txdb <- TxDb.Dmelanogaster.UCSC.dm3.ensGene
exons.by.gene <- exonsBy(txdb, by="gene")
head(exons.by.gene)
str(exons.by.gene)
exons.by.gene(1)
exons.by.gene[1]
chr4.idx <- all(seqnames(exons.by.gene) == "chr4")
ebg.sub <- ebg[chr4.idx]
ebg.sub <- exons.by.gene[chr4.idx]
se <- summarizeOverlaps(ebg.sub, bam.list,
mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE,
fragments=FALSE)
library(GenomicAlignments)
se <- summarizeOverlaps(ebg.sub, bam.list,
+                         mode="Union",
+                         singleEnd=FALSE,
+                         ignore.strand=TRUE,
+                         fragments=FALSE)
se <- summarizeOverlaps(ebg.sub, bam.list,
mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE)
se <- summarizeOverlaps(ebg.sub, bf,
mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE)
se[1]
colData(se) <- DataFrame(sample.table)
names(se)
se[1]
se[1].assays
se.assays[1]
se
se[1,]
se
se[1,1]
se[1,1,]
se[1,1]
se$counts[1]
se$counts
head(assay(se), 1)
head(assay(se))
q()
q()
q()
install.packages("jsonlite", repos="http://cran.r-project.org")
library(jsonlite)
JSONFilePath <- "/Users/bheavner/Projects/bdds_center/data/ppmi.json"
PPMIdata <- fromJSON(JSONFilePath)
PPMIdata <- stream_in(file(JSONFilePath))
readlines(JSONFilePath)
readLines(JSONFilePath)
readLines(JSONFilePath, n=1)#
clear
JSONFilePath <- "/Users/bheavner/Projects/bdds_center/data/ppmi.json"
library(RJSONIO)
library(jsonlite)
JSONFilePath <- "/Users/bheavner/Projects/bdds_center/data/ppmi.json"
readLines(JSONFilePath, n=1)
PPMIdata <- stream_in(file(JSONFilePath) pagesize=1)
PPMIdata <- stream_in(file(JSONFilePath),
pagesize=1)
memory.size()
JSONFilePath <- "/Users/bheavner/Projects/bdds_center/data/line812.json"
PPMIdata <- stream_in(file(JSONFilePath))
JSONFilePath <- "/Users/bheavner/Projects/bdds_center/data/shorter.json"
PPMIdata <- stream_in(file(JSONFilePath))
str PPMIdata
str(PPMIdata)
PPMIdata$PATNO[[]]
colnames(PPMIdata)
rownames(PPMIdata)
colnames(PPMIdata)
class(PPMIdata$BIOSPECIMEN)
colnames(PPMIdata$BIOSPECIMEN)
PPMIdata$BIOSPECIMEN
PPMIdata$BIOSPECIMEN[1]
length(PPMIdata$BIOSPECIMEN)
size(PPMIdata$BIOSPECIMEN[1])
dim(PPMIdata$BIOSPECIMEN[1])
length(PPMIdata$BIOSPECIMEN[1])
class(PPMIdata$BIOSPECIMEN[1])
PPMIdata$BIOSPECIMEN[1][1]
PPMIdata[1]$BIOSPECIMEN[1]
PPMIdata[1]$BIOSPECIMEN
colnames(PPMIdata)
PPMIdata$PATNO
colnames(PPMIdata)
PPMIdata$BIRTHDT
colnames(PPMIdata)
class(PPMIdata$(colnames(PPMIdata)))
class(PPMIdata$(colnames(PPMIdata))))
class(PPMIdata$(colnames(PPMIdata)))
str(PPMIdata$BIRTHDT)
str(PPMIdata[1])
str(PPMIdata[[1]])
str(PPMIdata[[1:106]])
str(PPMIdata, max.level=1)
is.numeric(PPMIdata[1])
is.numeric(PPMIdata$PATNO)
colnames(PPMIdata)
is.numeric(PPMIdata)
is.numeric(PPMIdata[])
is.numeric(PPMIdata[[]])
?is.numeric
sapply(PPMIdata,is.numeric)
colnames(PPMIdata)[sapply(PPMIdata,is.numeric)]
PPMIdata$EDUCYRS
JSONFilePath <- "/Users/bheavner/Projects/bdds_center/data/ppmi.json"
PPMIdata <- stream_in(file(JSONFilePath),
pagesize=811)
?stream_ion
?stream_in
q()
library(jsonlite)
JSONFilePath <- "/Users/bheavner/Projects/bdds_center/data/ppmi.json"
JSONFilePath <- "/Users/bheavner/Projects/bdds_center/data/shorter.json"
PPMIdata <- stream_in(file(JSONFilePath))
colnames(PPMIdata)
colnames(PPMIdata)[sapply(PPMIdata,is.numeric)]
PPMIdata$DNA
PPMIdata$PATNO[811]
colnames(PPMIdata)[sapply(PPMIdata,is.numeric)]
colnames(PPMIdata)
colnames(PPMIdata)[sapply(PPMIdata,is.numeric)]
PPMIdata$DNA[811]
PPMIdata$PATNO[811]
PPMIdata$BIOSPECIMIN[811]
PPMIdata$BIOSPECIMEN[811]
PPMIdata$BIOSPECIMEN
colnames(PPMIdata)
colnames(PPMIdata)[sapply(PPMIdata,is.numeric)]
q()
library(jsonlite)
JSONFilePath <- "/Users/bheavner/Projects/bdds_center/data/ppmi.json"
JSONFilePath <- "/Users/bheavner/Projects/bdds_center/data/shorter.json"
PPMIdata <- stream_in(file(JSONFilePath))
colnames(PPMIdata)[sapply(PPMIdata,is.numeric)]
PPMIdata$PATNO
PPMIdata$EDUCYRS
PPMIdata$FULSIB
colnames(PPMIdata)[sapply(PPMIdata,is.numeric)]
PPMIdata$HAFSIB
PPMIdata$FULSIB
colnames(PPMIdata)[sapply(PPMIdata,is.numeric)]
PPMIdata$MAGPAR
colnames(PPMIdata)[sapply(PPMIdata,is.numeric)]
PPMIdata$MAGPARPD
colnames(PPMIdata)[sapply(PPMIdata,is.numeric)]
PPMIdata$PAGPAR
colnames(PPMIdata)[sapply(PPMIdata,is.numeric)]
PPMIdata$PAGPARPD
PPMIdata$MATU
PPMIdata$PAGPARPD
colnames(PPMIdata)[sapply(PPMIdata,is.numeric)]
PPMIdata$MATAU
colnames(PPMIdata)[sapply(PPMIdata,is.numeric)]
PPMIdata$MATAUPD
colnames(PPMIdata)[sapply(PPMIdata,is.numeric)]
PPMIdata$PATU
PPMIdata$PATAU
colnames(PPMIdata)[sapply(PPMIdata,is.numeric)]
PPMIdata$KIDSNUM
str(PPMIdata$KIDSNUM)
as.factor(PPMIdata$KIDSNUM)
colnames(PPMIdata)[sapply(PPMIdata,is.numeric)]
as.factor(PPMIdata$KIDSPD)
q()
c(1,FALSE)
c("a",1)
c(list(1),"a")
str(c(list(1),"a"))
c(TRUE, 1L)
q()
?order
as.list("abcd")
order("abcd", decreasing = TRUE)
as.matrix("abcd")
as.df("abcd")
as.dataframe("abcd")
mod <- lm(mpg ~ wt, data = mtcars)
str(mod)
mod$residuals
summary(mod)
str(summary(mod))
summary(mod)$r.squared
summary(mod)[[r.squared]]
summary(mod)[r.squared]
q()
library(jsonlite)
JSONFilePath <- "/Users/bheavner/Projects/bdds_center/data/shorter.json"
PPMIdata <- stream_in(file(JSONFilePath))
colnames(PPMIdata)
str(PPMIdata$BIOSPECIMEN)
str(PPMIdata$BIOSPECIMEN$2-11)
str(PPMIdata$BIOSPECIMEN$2)
str(PPMIdata$BIOSPECIMEN["2-11"])
str(PPMIdata$BIOSPECIMEN$"2-11")
str(PPMIdata$BIOSPECIMEN$[[1]])
str(PPMIdata$BIOSPECIMEN$[1])
str(PPMIdata$BIOSPECIMEN[1])
str(PPMIdata$BIOSPECIMEN[[]])
head(str(PPMIdata))
PPMIdata$BIOSPECIMEN[[1]]$DIAGNOSIS
PPMIdata$BIOSPECIMEN[[2]]$DIAGNOSIS
names(PPMIdata$BIOSPECIMEN)
names(PPMIdata$BIOSPECIMEN[[]])
str(PPMIdata$BIOSPECIMEN[[1]])
str_data <- c(PATNO[[]], EDUCYRS[[]], BIOSPECIMEN[[]]$DIAGNOSIS, FAMHXPD[[]]$MATAU)
str_data <- c(PPMIdata$PATNO[[]], PPMIdata$EDUCYRS[[]], PPMIdata$BIOSPECIMEN[[]]$DIAGNOSIS, PPMIdata$FAMHXPD[[]]$MATAU)
lapply(PPMIdata, class)
lapply(PPMIdata, length)
lapply(PPMIdata, dim)
lapply(PPMIdata$BIOSPECIMEN, class)
lapply(PPMIdata$BIOSPECIMEN, length)
lapply(PPMIdata$BIOSPECIMEN, dim)
lapply(PPMIdata$BIOSPECIMEN[[810]])
PPMIdata$BIOSPECIMEN[[810]]
names(PPMIdata$BIOSPECIMEN[[810]])
lapply(PPMIdata$BIOSPECIMEN, names)
lapply(PPMIdata$BIOSPECIMEN, names)
lapply(PPMIdata$BIOSPECIMEN$PATNO, names)
lapply(PPMIdata$BIOSPECIMEN$PATNO)
PPMIdata$BIOSPECIMEN$PATNO
PPMIdata$BIOSPECIMEN[[810]]PATNO
PPMIdata$BIOSPECIMEN[[810]]$PATNO
PPMIdata$BIOSPECIMEN[[810]]$GENDER
PPMIdata$BIOSPECIMEN[[810]]$DIAGNOSIS
lapply(PPMIdata, class)
colnames(PPMIdata)
PPMIdata$BIOSPECIMEN[1]
PPMIdata$BIOSPECIMEN[[1]
]
lapply(PPMIdata, length)
lapply(PPMIdata, dim)
lapply(PPMIdata$BIOSPECIMEN, class)
lapply(PPMIdata$BIOSPECIMEN, length)
summary(lapply(PPMIdata$BIOSPECIMEN, length))
lapply(PPMIdata$BIOSPECIMEN, length)
lapply(PPMIdata$BIOSPECIMEN, dim)
PPMIdata$BIOSPECIMEN[[808]]
names(PPMIdata$BIOSPECIMEN[[808]])
lapply(PPMIdata$BIOSPECIMEN[[810]])
PPMIdata$BIOSPECIMEN[[810]]
names(PPMIdata$BIOSPECIMEN[[810]])
lapply(PPMIdata$BIOSPECIMEN, names)
lapply(PPMIdata$BIOSPECIMEN, names) # 14 names
PPMIdata$BIOSPECIMEN[[810]]
names(PPMIdata$BIOSPECIMEN[[810]])
lapply(PPMIdata$BIOSPECIMEN, names)
lapply(PPMIdata$BIOSPECIMEN, names)
lapply(PPMIdata$BIOSPECIMEN$PATNO, names)
lapply(PPMIdata$BIOSPECIMEN$PATNO)
PPMIdata$BIOSPECIMEN$PATNO
PPMIdata$BIOSPECIMEN[[810]]PATNO
PPMIdata$BIOSPECIMEN[[810]]$PATNO
length(PPMIdata$BIOSPECIMEN[[810]]$PATNO)
PPMIdata$BIOSPECIMEN[[810]]$GENDER
PPMIdata$BIOSPECIMEN[[810]]$DIAGNOSIS
names(PPMIdata)
names(PPMIdata$ENROLL_STATUS)
names(PPMIdata$ENROLL_STATUS[[1]])
PPMIdata$ENROLL_STATUS
str(PPMIdata$ENROLL_STATUS[[1]])
str(PPMIdata$ENROLL_STATUS)
str(PPMIdata)
colnames(PPMIdata)
str(PPMIdata$PATNO)
lapply(PPMIdata, class) # many lists
str(PPMIdata$RAASIAN)
as.factor(PPMIdata$RAASIAN)
str(PPMIdata$RAASIAN)
lapply(PPMIdata, class) # many lists
str(PPMIdata$$RSNDEC)
str(PPMIdata$RSNDEC)
PPMIdata$RSNDEC
colnames(PPMIdata)
PPMIdata[[1]]$PATNO
PPMIdata$PATNO[[1]]
PPMIdata$BIOSPECIMEN[[1]]
names(PPMIdata$PATNO[[1]])
str(PPMIdata$PATNO)
str(PPMIdata$PATNO[[1]])
class(PPMIdata$PATNO[[1]])
colnames(PPMIdata)
colnames(PPMIdata$BIOSPECIMEN)
PPMIdata$BIOSPECIMEN[[1]]
str(PPMIdata$BIOSPECIMEN[[1]])
str(PPMIdata$BIOSPECIMEN[[2]])
str(PPMIdata$BIOSPECIMEN[[811]])
str(PPMIdata$BIOSPECIMEN[[810]])
lapply(PPMIdata$BIOSPECIMEN, dim) # a range... I see 7 x 14, 43 x 14, NULL
str(PPMIdata$BIOSPECIMEN[[711]])
PPMIdata$BIOSPECIMEN
q()
q()
q()
install.packages("packrat")
exit()
quit()
?match
q()
q()
q()
q()
q()
setwd("~/")
require(biomaRt)
geneIds <- read.table("testIds.txt")
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
# look up gene names from ensenbl ids
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = geneIds, ensembl)
geneIds$V1[1]
geneIds$V1[[1]
]
str(geneIds)
as.list(geneIds)
q()
setwd("~/Projects/UO1-AMP/working/july_2015_tcx_ss_rerun")
prefix <- "AMP-AD_SampleSwap_UFL-Mayo-ISB_IlluminaHiSeq2000_dIPFC_Rush-Broad_SS_JulyRerun"
source('~/Projects/UO1-AMP/working/july_2015_tcx_ss_rerun/merge_SS_rnaseq_counts.R')
tmpDir
merged_file
merged_file_object
merged_file_object$properties
merged_file_object$properties$id
source('~/Projects/UO1-AMP/working/july_2015_tcx_ss_rerun/normalize_readcounts.R')
library(synapseClient)
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# metatata for gene_ID
oldGeneID <- "syn3801377"
newGeneID <- "syn4719606"
oldGene <- synGet(oldGeneID, downloadFile=F)
newGene <- synGet(newGeneID, downloadFile=F)
oldAnnotations <- as.list(synGetAnnotations(oldGene))
synSetAnnotations(newGene) <- oldAnnotations
# inspect old activity
synGetActivity(oldGene)
codeFile <- list("https://github.com/PriceLab/AMP-ad/blob/v0.3/SS/RushBroad/merge_count_files.R",
"https://github.com/PriceLab/AMP-ad/blob/v0.3/SS/RushBroad/merge_RushBroadSS_rnaseq_counts.R")
act <- Activity(name='Merge output count files from SNAPR',
used = as.list('syn3619668'),
executed = as.list(codeFile))
generatedBy(newGene) = act
synStore(newGene, forceVersion = T)
## clear environment here for safety
rm(list = ls())
# metatata for normalized gene_ID
oldNormGeneID <- "syn3801467"
newNormGeneID <- "syn4719692"
oldNormGene <- synGet(oldNormGeneID, downloadFile=F)
newNormGene <- synGet(newNormGeneID, downloadFile=F)
oldNormAnnotations <- as.list(synGetAnnotations(oldNormGene))
synSetAnnotations(newNormGene) <- oldNormAnnotations
# inspect old activity
synGetActivity(oldNormGene)
codeFile <- list("https://github.com/PriceLab/AMP-ad/blob/v0.3/SS/RushBroad/normalize_readcounts.R")
act <- Activity(name='CPM (using TMM) from edgeR normalization',
used = as.list('syn4719606'),
executed = as.list(codeFile))
generatedBy(newNormGene) = act
synStore(newNormGene, forceVersion = T)
## clear environment here for safety
rm(list = ls())
# metatata for transcript_ID
oldTranscriptID <- "syn3801548"
newTranscriptID <- "syn4719609"
oldTranscript <- synGet(oldTranscriptID, downloadFile=F)
newTranscript <- synGet(newTranscriptID, downloadFile=F)
oldAnnotations <- as.list(synGetAnnotations(oldTranscript))
synSetAnnotations(newTranscript) <- oldAnnotations
# inspect old activity
synGetActivity(oldTranscript)
# define new activity
codeFile <- list("https://github.com/PriceLab/AMP-ad/blob/v0.3/SS/RushBroad/merge_count_files.R",
"https://github.com/PriceLab/AMP-ad/blob/v0.3/SS/RushBroad/merge_RushBroadSS_rnaseq_counts.R")
act <- Activity(name='Merge output count files from SNAPR',
used = as.list('syn3619668'),
executed = as.list(codeFile))
generatedBy(newTranscript) = act
synStore(newTranscript, forceVersion = T)
## clear environment here for safety
rm(list = ls())
# metatata for normalized gene_ID
# syn4719707 - normalized counts by transcript ID was syn3801636
oldNormTranscriptID <- "syn3801636"
newNormTranscriptID <- "syn4719707"
oldNormTranscript <- synGet(oldNormTranscriptID, downloadFile=F)
newNormTranscript <- synGet(newNormTranscriptID, downloadFile=F)
oldNormAnnotations <- as.list(synGetAnnotations(oldNormTranscript))
synSetAnnotations(newNormTranscript) <- oldNormAnnotations
# inspect old activity
synGetActivity(oldNormTranscript)
# define new activity
codeFile <- list("https://github.com/PriceLab/AMP-ad/blob/v0.3/SS/RushBroad/normalize_readcounts.R")
act <- Activity(name='CPM (using TMM) from edgeR normalization',
used = as.list('syn4719609'),
executed = as.list(codeFile))
generatedBy(newNormTranscript) = act
synStore(newNormTranscript, forceVersion = T)
q()
