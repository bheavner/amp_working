q()
install.packages(c("manipulate", "Rcpp"))
install.packages("gplots")
install.packages("calibrate")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("DESeq2")
sessionInfo()
exit()
quit()
install.packages("manipulate")
source("http://depot.sagebase.org/CRAN.R")
pkgInstall("synapseClient")
require(SynapseClient)
require(synapseClient)
synapseLogin()
wondrousProj <- synGet('syn1901847')
metadataOnly <- synGet('syn1906480', downloadFile=F)
names(metadataOnly)
metadataOnly.properties
metadataAndFile <- synGet('syn1906479')
names(metadataAndFile)
who
localFilePath <- metadataAndFile@filePath
respDF <- read.delim(localFilePath, header=T)
names(respDF)
respDF$sample
respDF$response
myProject <- Project(name = paste("Test Project", gsub(":", "", Sys.time(), fixed=T), sep=" "))
myProject
myProject <- synStore(myProject)
myFolder <- Folder(name = "figures", parentId = myProject$properties$id)
myProject
myFolder <- synStore(myFolder)
onWeb(myProject)
respFile <- synGet('syn1906479')
respDF <- read.delim(file=respFile@filePath, header=T)
View(respDF)
View(respDF)
exprFile <- synGet('syn1906480')
exprDF <- read.delim(file=getFileLocation(exprFile), header=T, row.names="X")
respPvals <- apply(exprDF, 1, function(x){
fit <- summary(lm(x ~ respDF$response))
return(fit$coefficients[2, 4]))
respPvals <- apply(exprDF, 1, function(x){
fit <- summary(lm(x ~ respDF$response))
return(fit$coefficients[2, 4])
})
plotPath <- file.path(tempdir(), "pvalueHistogram.png")
png(plotPath)
hist(respPvals, main="", xlab="P-value for random response")
dev.off()
hist(respPvals, main="", xlab="P-value for random response")
plotFile <- File(path=plotPath, parentId=myFolder$properties$id)
synSetAnnotations(plotFile) <- list(model="lm", response="random")
plotFile <- synStore(plotFile)
codeFile <- synGet('syn1910084')
act <- Activity(name="p-value histogram",
used=list(
list(entity=codeFile, wasExecuted=T),
list(entity=exprFile, wasExecuted=F),
list(entity=respFile, wasExecuted=F)))
act <- storeEntity(act)
generatedBy(plotFile) <- act
plotFile <- synStore(plotFile)
synapseQuery('SELECT id, name FROM entity WHERE parentId=="syn1901847"')
qTcga <- synapseQuery('SELECT id, name FROM entity WHERE parentId=="syn300013" AND acronym=="BRCA"')
qTcga
synapseQuery('SELECT id, name FROM entity WHERE parentId=="syn300013" AND acronym=="BRCA"')
synapseQuery('SELECT id, name, acronym FROM entity WHERE parentId=="syn300013"')
myFileObject <- synGet("syn417812")
evaluation  <- synGetEvaluation(1111111)
n  <- 3
m  <- 5
guess  <- matrix(log(rnorm(n*m)^2+1.0, base=2), nrow=n, ncol=m)
project_id  <- 'syn3159452'
entity  <- File(name='A wildly random guess', parentId=project_id)
entity  <- addObject(entity, guess)
entity  <- synStore(entity)
df<-data.frame("n"=c(1.1, 2.2, 3.3),
"c"=c("foo", "bar", "bar"),
"i"=as.integer(c(10,10,20)))
tcresult<-as.tableColumns(df)
names(tcresult)
tcresult$tableColumns
cols<-tcresult$tableColumns
fileHandleId<-tcresult$fileHandleId
cols[[2]]@maximumSize<-as.integer(20)
?TableColumn
projectID <- 'syn3159452'
schema<-TableSchema(name="aschema", parent=projectId, columns=cols)
projectId <- 'syn3159452'
schema<-TableSchema(name="aschema", parent=projectId, columns=cols)
table<-Table(schema, fileHandleId)
table<-synStore(table, retrieveData=TRUE)
schemaId<-propertyValue(table@schema, "id")
queryResult<-synTableQuery(sprintf("select * from %s where c='bar'", schemaId))
names(queryResult)
queryResult
queryResult$n
queryResult.n
queryResult@values[2,"n"]<-pi
table<-synStore(queryResult, retrieveData=TRUE)
table@values
queryResult@values[2,"n"]<-pi
table<-synStore(queryResult, retrieveData=TRUE)
table@values
rowsToDelete<-synTableQuery(sprintf("select * from %s where c='foo'", schemaId)) synDeleteRows(rowsToDelete)
rowsToDelete<-synTableQuery(sprintf("select * from %s where c='foo'", schemaId)) synDeleteRows(rowsToDelete)
synTableQuery(sprintf("select * from %s where c='foo'", schemaId)) synDeleteRows(rowsToDelete)
synTableQuery(sprintf("select * from %s where c='foo'", schemaId)) synDeleteRows(rowsToDelete)
sprintf("select * from %s where c='foo'")
sprintf("select * from %s where c='foo'", schemaId)
synTableQuery(sprintf("select * from %s where c='foo'", schemaId)) synDeleteRows
sprintf(select * from %s where c='foo', schemaId)
sprintf("select * from %s where c='foo'", schemaId)
exit()
exit()
quit()
data  <- read.table('~/Projects/learning/Clarke_et_al/cg-data/data.model', header = TRUE)
library(car)
require(car)
install.packages("car", dependencies=TRUE)
require(car)
library(car)
obs <- data[data$TEST == "TREND",]$CHISQ
qqPlot(obs, distribution = "chisq", df = 1, xlab = "Expected chi-squared values", ylab = "Observed test statistic", grid = FALSE)
dev.off()
qqPlot(obs, distribution = "chisq", df = 1, xlab = "Expected chi-squared values", ylab = "Observed test statistic", grid = FALSE)
data  <- read.table("~/Projects/learning/Clarke_et_al/gwa-data/data.assoc.logistic", header =TRUE)
obs  <- - -log10(sort(data[data$TEST == "ADD",]$P))
obs  <- -log10(sort(data[data$TEST == "ADD",]$P))
exp  <- -log10(c(1:length(obs))/length(obs)+1)
plot(exp,obs,ylab="Observed (-logP)", xlab="Expected(-logP)", ylim = c(0,20), xlim=c(0,7))
plot(exp,obs,ylab="Observed (-logP)", xlab="Expected(-logP)", ylim = c(0,20), xlim=c(0,7)) lines(c(0.7), c(0.7), col=1, lwd = 2)
plot(exp,obs,ylab="Observed (-logP)", xlab="Expected(-logP)", ylim = c(0,20), xlim=c(0,7)), lines(c(0.7), c(0.7), col=1, lwd = 2)
lines(c(0.7), c(0.7), col=1, lwd = 2)
exit()
quit()
library("airway")
library
(
"DESeq2"
)
source("http://bioconductor.org/biocLite.R")
biocLite("airway")
library("airway")
data("airway")
se  <- airway
names se
names(se)
names(airway)
ddsSE <- DESeqDataSet(se, design =~ cell + dex)
library
(
"DESeq2"
)
ddsSE <- DESeqDataSet(se, design =~ cell + dex)
library
(
"DESeq2"
)
library("DESeq2")
ddsSE <- DESeqDataSet(se, design =~ cell + dex)
ddsSE
se
liabrary("pasilla")
library("pasilla")
source("http://bioconductor.org/biocLite.R")
biocLite("pasilla")
source("http://bioconductor.org/biocLite.R")
biocLite("Biobase")
library
(
"pasilla"
)
library
(
"Biobase"
)
data
(
"pasillaGenes"
)
library("pasilla")
library("Biobase")
data("pasillaGenes")
countData <- counts(pasillaGenes)
source("http://bioconductor.org/biocLite.R")
biocLite("DESeq")
countData <- counts(pasillaGenes)
colData <- pData(pasillaGenes)[,c("condition", "type")]
dds <- DESeqDataSetFromMatrix(countData = countData,)
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design =~ condition)
dds
version
library("airway")
data("airway")
se <- airway
library("DESeq2")
ddsSE <- DESeqDataSet(se, design = ~ cell + dex)
ddsSe
ddsSE
library("pasilla")
library("Biobase")
data("pasillaGenes")
countData <- counts(pasillaGenes)
colData <- pData(pasillaGenes)[,c("condition", "type")]
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ condition)
dds
featureData <- data.frame(gene = rownames(pasillaGenes))
(mcols(dds)) <- DataFrame(mcols(dds), featureData))
(mcols(dds) <- DataFrame(mcols(dds), featureData))
exit()
quit()
q()
setwd("~/Projects/UO1-AMP/RNA-seq normalizing")
require("synapseClient")
require("R.utils")
require("edgeR")
synapseLogin()
ad_pilot_rnaseq_gene_id_counts <- synGet('syn3160436')
localFilePath <- ad_pilot_rnaseq_gene_id_counts@filePath
gunzip(localFilePath)
localFilePath
localFilePath <- substr(localFilePath, 1, nchar(localFilePath)-3)
file.exists(localFilePath)
?file.exists
!file.exists(localFilePath)
raw_counts <- read.table(localFilePath, header = TRUE)
transposed_counts <- t(test)
transposed_counts <- t(raw_counts)
expr <- DGEList(counts = transposed_counts, group = rep(1,ncol(counts)))
expr <- DGEList(transposed_counts, group = rep(1,ncol(counts)))
expr <- DGEList(transposed_counts, group = rep(1,ncol(transposed_counts)))
norm_factors <- calcNormFactors(expr)
?calcNormFactors
norm_factors <- calcNormFactors(expr, method=("TMM"))
norm_factors$norm.factors
str(norm_factors)
names(norm_factors)
norm_factors$counts
norm_factors$samples
norm_factors$counts[1]
norm_factors$counts[1:5]
transposed_counts[1:5]
?cpm
expr(counts)
expr$counts
dim(dge)
dim(expr)
cpm(norm_factors)
normalized_cpm <- cpm(norm_factors)
str(normalized_cpm)
dim(normalized_cpm)
normalized_cpm[,1]
normalized_cpm[1]
colnames(normalized_cpm)
normalized_counts <- t(normalized_cpm)
colnames(normalized_counts)
row.names(normalized_counts)
normalized_counts[1]
?as.data.frame
test <- as.data.frame(normalized_counts)
test[1]
normalized_counts <- as.data.frame(t(normalized_cpm))
normalized_counts[1]
?write.table
pwd
file.path
file.path()
file.path("foo")
?gzip
out_path <- file.path("ad_pilot_rnaseq_gene_id_counts_normalized.txt")
c[out_path, '.gz']
out_path
c{out_path, '.gz'}
?c
c(out_path, '.gz')
paste(out_path, '.gz')
paste(out_path, '.gz', collapse = NULL)
out_path <- ("ad_pilot_rnaseq_gene_id_counts_normalized.txt")
out_path
paste(out_path, '.gz')
c(out_path, '.gz')
?substr
paste(substr(out_path, 1, nchar(out_path)-1), '.gz')
paste(substr(out_path, 1, nchar(out_path)-1), '.gz', collapse='')
paste(substr(out_path, 1, nchar(out_path)-1), '.gz', collapse="")
paste(substr(out_path, 1, nchar(out_path)-1), '.gz', sep="")
out_path <- ("ad_pilot_rnaseq_gene_id_counts_normalized.txt")
out_path <- paste(out_path, ".gz", sep="")
out_path
setwd("~/Projects/UO1-AMP/RNA-seq normalizing")
?source_gist
require(devtools)
install.packages('devtools')
library(devtools)
?source_gist
?unlink
list[a,b,c]
list["a", "b", "c"]
list("a", "b", "c")
c("a", "b", "c")
?source_gist
?synGet
names(localFile)
names(ad_pilot_rnaseq_gene_id_counts)
ad_pilot_rnaseq_gene_id_counts$properties
?File
?synSetAnnotaitons
codeFile <- ("foo")
codeFile
quit()
