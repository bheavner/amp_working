# unzip count file and load for processing
localCountFilePath <- getFileLocation(countFile)
if(!file.exists(sub('.gz', '', localCountFilePath))) {
gunzip(localCountFilePath)
}
localCountFilePath <- sub('.gz', '', localCountFilePath) #trim the .gz suffix
counts <- read.table(localCountFilePath, header = TRUE, stringsAsFactors = FALSE)
#PROBLEM: - an rTGMinus sample
#in count data, sample “LP62_4”
#in covariates, sample “LP_62_4”
# for now, change column name in counts - TODO: fix covariates file
colnames(counts)[1] <- "LP_62_4"
# load covariates file to have handy
covariates <- read.table(getFileLocation(covariatesFile), header = TRUE, stringsAsFactors = FALSE)
## define groups: JNPL3+ (transgenic), JNPL3- (WT), (ignore rTG+ rTG- for now)
# (there MUST be a cleaner way to do this)
# JNPL3+:
JNPL3Plus <- dplyr::select(filter(covariates, Experiment == "MAPT_P301L" & Genotype == "+"), Mouse_ID)
# 15 samples
# JNPL3-:
JNPL3Minus <- dplyr::select(filter(covariates, Experiment == "MAPT_P301L" & Genotype == "-"), Mouse_ID)
# 9 samples
JNPL3Plus <- as.character(JNPL3Plus$Mouse_ID)
JNPL3Minus <- as.character(JNPL3Minus$Mouse_ID)
JNPL3PlusCols <- is.element(as.character(colnames(counts)), JNPL3Plus)
JNPL3MinusCols <- is.element(as.character(colnames(counts)), JNPL3Minus)
groups <- c(rep(0, length(counts[1,])))
groups[JNPL3PlusCols] <- "JNPL3Plus"
groups[JNPL3MinusCols] <- "JNPL3Minus"
JNPL3Samples <- c(JNPL3Plus, JNPL3Minus)
JNPL3Cols <- is.element(as.character(colnames(counts)), JNPL3Samples)
## Make DGEList object to start working on DE analysis
JNPL3 <- DGEList(counts = dplyr::select(counts, one_of(JNPL3Samples)),
group = groups[JNPL3Cols])
## filter data
# require minimum of 100 counts per million for at least 2 samples
d.full <- JNPL3 # keep the old one in case we mess up
dim(d.full)
#39179    24
keep <- rowSums(cpm(JNPL3)>100) >= 2
d <- JNPL3[keep,]
dim(d)
#3133   24 #seth says this is too stringent - 70% of genes in genome are expressed in brain - ~20k features normal
# reset library sizes after filtering
d$samples$lib.size <- colSums(d$counts)
# normalize the data using TMM
d <- calcNormFactors(d, method = "TMM")
plotMDS(d, method="bcv", col=as.numeric(d$samples$group))
legend("bottomleft", as.character(unique(d$samples$group)), col=1:3, pch=20)
d1 <- estimateCommonDisp(d, verbose=T) #assume all same for this pass, GLM later
# Disp = 0.09527 , BCV = 0.3087
d1 <- estimateTagwiseDisp(d1)
plotBCV(d1) #plots the tagwise biological coefficient of variation (square root of dispersions) against log2-CPM.
# observation - looks like a discontinuity in the dispersions around logCPM ~ 7
# Look at DE with exact test
de.tgw <- exactTest(d1)
summary(decideTestsDGE(de.tgw, p.value=0.01))
topTen <- rownames(topTags(de.tgw, n = 10))
toPlot <- d[topTen] #10 rows, 24 columns
top <- topTags(de.tgw, n=50)
# get gene names for x axis labels -- ORDER ISN'T PRESERVED FROM BIOMART QURY!
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = rownames(top)[1:10],
ensembl)
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = rownames(top)[1:100],
ensembl)
geneNames
top <- topTags(de.tgw, n=100)
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = rownames(top)[1:100], ensembl)
top
ensemblToGeneId <- function(x,ensembl){
gene1 <- NA;
try(gene1 <- getBM(attributes='external_gene_name',filters='ensembl_gene_id',values=x,mart=ensembl),silent=T)
if(is.null(gene1)){
gene1<-NA
}
return(gene1)
}
ensemblToGeneId(rownames(top), ensembl)
geneNames[1,]
labels <- geneNames$external_gene_name[(order(match(geneNames$ensembl_gene_id, rownames(top)[1:10])))]
labels(1)
labels[1]
values
rownames(top)[1:100]
geneIds <- rep(NA,100)
geneIds <- values
geneIds <- rownames(top)[1:100]
geneIds
write(geneIds, "testIds.txt")
pwd
system(ls)
system('ls')
geneIds <- read.table("testIds.txt")
View(geneIds)
View(geneIds)
require(biomaRt)
geneIds <- read.table("testIds.txt")
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
ensemblToGeneId <- function(x,ensembl){
gene1 <- NA;
try(gene1 <- getBM(attributes='external_gene_name',filters='ensembl_gene_id',values=x,mart=ensembl),silent=T)
if(is.null(gene1)){
gene1<-NA
}
return(gene1)
}
testNames <- ensemblToGeneId(geneIds, ensembl)
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = geneIds, ensembl)
geneNames[1]
geneNames$external_gene_name[1]
geneIds[1]
geneIds$V1[1]
as.character(geneIds$V1[1])
geneNames$ensembl_gene_id[1]
geneNames
geneNames$external_gene_name[1]
testNames[1]
testNames$external_gene_name[1]
geneNames[(order(match(geneNames$ensembl_gene_id, geneIds)))]
geneNames[(order(match(geneNames$ensembl_gene_id, geneIds))),]
geneNames <- geneNames[(order(match(geneNames$ensembl_gene_id, geneIds)))]
geneNames[order(match(geneNames$ensembl_gene_id, geneIds)),]
geneNames <- geneNames[order(match(geneNames$ensembl_gene_id, geneIds)),]
unique(geneIds)
setdif(geneIds, geneNames$ensembl_gene_id)
geneIds &in& geneNames$ensembl_gene_id
geneIds %in% geneNames$ensembl_gene_id
geneIds %in% geneNames$ensembl_gene_id[,]
geneIds %in% geneNames$ensembl_gene_id
setdiff(geneIds, geneNames$ensembl_gene_id)
setdiff(geneIds, as.list(geneNames$ensembl_gene_id))
geneNames$ensembl_gene_id
?setdiff
?setdiff
as.vector(geneNames$ensembl_gene_id)
setdiff(geneIds, as.vector(geneNames$ensembl_gene_id))
setdiff(as.vector(geneIds), as.vector(geneNames$ensembl_gene_id))
class(geneIds)
class(geneName)
geneIds
setdiff(as.vector(geneIds$V1), as.vector(geneNames$ensembl_gene_id))
geneIds
geneIds == "ENSMUSG00000019769"
geneNames[1]
geneNames$V1[1]
geneNames$ensembl_gene_id[1]
geneIds[1]
geneIds$V1[1]
geneNames$ensembl_gene_id[1]
require(biomaRt)
geneIds <- read.table("testIds.txt")
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
ensemblToGeneId <- function(x,ensembl){
gene1 <- NA;
try(gene1 <- getBM(attributes='external_gene_name',filters='ensembl_gene_id',values=x,mart=ensembl),silent=T)
if(is.null(gene1)){
gene1<-NA
}
return(gene1)
}
# use function to get gene name by ensembl_gene_id
testNames <- ensemblToGeneId(geneIds, ensembl)
# or grab them directly without the function
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = geneIds, ensembl)
geneIds[1]
geneIds$V1[1]
geneNames$ensembl_gene_id[1]
testNames[1]
testNames$external_gene_name[1]
as.character(geneIds$V1[1]) # ENSMUSG00000061808
geneIds$V1[1]
geneNames$ensembl_gene_id[1] # ENSMUSG00000001025
geneNames$external_gene_name[1] # "S100a6"
testNames$external_gene_name[1] # "S100a6" -- NOT WHAT I'D EXPECT WHEN CALLING FUNCTION
geneNames[order(match(geneNames$ensembl_gene_id, geneIds)),]
match(geneNames$ensembl_gene_id, geneIds)
order(match(geneNames$ensembl_gene_id, geneIds)
)
match(geneNames$ensembl_gene_id, geneIds)
?match
match(as.vector(geneNames$ensembl_gene_id), geneIds)
match(as.vector(geneNames$ensembl_gene_id), as.vector(geneIds))
as.vector(geneIds)
geneNames$ensembl_gene_id
match(geneNames$ensembl_gene_id, geneIds)
match(geneIds, geneNames$ensembl_gene_id)
q()
library(synapseClient)
library(R.utils)
library(edgeR)
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
codeFile <- ("https://github.com/PriceLab/AMP-ad/tree/0.2/MBB/TCX/normalize_readcounts.R")
# The files to normalize are:
# AMP-AD_MSBB_UFL-Mayo-ISB_IlluminaHiSeq2000_TCX_GeneCounts.txt.gz ('syn3667936')
# AMP-AD_MSBB_UFL-Mayo-ISB_IlluminaHiSeq2000_TCX_TranscriptCounts.txt.gz ('syn3667937')
countFileSynapseIDs <- c('syn3667936', 'syn3667937')
for (mergedCountFile in countFileSynapseIDs) {
message("Normalizing ", mergedCountFile)
# Download file from Synapse
originalCountFile <- synGet(mergedCountFile)
# unzip file and load for processing
localFilePath <- getFileLocation(originalCountFile)
if(!file.exists(substr(localFilePath, 1, nchar(localFilePath) - 3))) {
gunzip(localFilePath)
}
localFilePath <- sub('.gz', '', localFilePath) #trim the .gz suffix
transposedCounts <- read.table(localFilePath, header = TRUE, check.names = FALSE)
# make DGEList object
expr <- DGEList(transposedCounts, group = rep(1, ncol(transposedCounts)))
# calculate normalization factors
normFactors <- calcNormFactors(expr, method = ("TMM"))
# If you get "error: Error in quantile.default(x, p = p) :
# missing values and NaN's not allowed if 'na.rm' is FALSE"
# expr$samples$lib.size shows a library size of 0 for problematic samples
# use normaliztion factors to calculate cpm -
# per https://www.biostars.org/p/84087/, that's calculated as
# count / (library size * normalization factor))
normalizedCpm <- cpm(normFactors)
# write the data to local dir
# need to fix this naming
newFileName <- sub('_id_counts.txt.gz', '', originalCountFile$properties$name)
newFileName <- paste0(newFileName, "Counts_normalized.txt", sep="")
write.table(format(normalizedCpm, scientific = FALSE, digits = 5),
newFileName, quote = FALSE, sep = "\t", row.names = TRUE)
# package it up, then create a Synapse object for the output file and upload with provenance
gzip(newFileName)
newFileName <- paste0(newFileName, ".gz", sep="")
parentId <- originalCountFile$properties$parentId
normalizedCountFile <- File(newFileName, parentId = parentId)
normalizedCountFile <- synStore(normalizedCountFile,
activityName="CPM (using TMM) from edgeR normalization",
used=list(list(name = "normalize_readcounts.R",
url = codeFile, wasExecuted = T),
list(entity=originalCountFile,
wasExecuted=F)))
}
q()
q()
setwd("~/Projects/UO1-AMP/working/may_2015_release/MBB_TCX_Work")
library(synapseClient) # for synapse data exchange
library(tools) # for file path changes
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
### folder ###
synID <- "syn3163039"
# get info about current synapse object to modify
folderObject <- synGet(synID, downloadFile=F)
# define annotations as a list
folderAnnotations <- list(consortium = "AMP-AD",
study = "MayoRNAseq",
center = "UFL-Mayo-ISB",
disease = "Alzheimers Disease",
platform = "IlluminaHiSeq2000",
tissueTypeAbrv = "TCX",
tissueType = "Temporal Cortex",
organism = "Homo sapiens",
dataContact = "Ben Heavner ben.heavner@systemsbiology.org")
synSetAnnotations(folderObject) <- folderAnnotations
folderObject <- synStore(folderObject, forceVersion = T)
synID <- "syn3817650"
# get info about current synapse object to modify
covariatesObject <- synGet(synID, downloadFile=F)
# define annotations as a list
covariatesObjectAnnotations <- list(consortium = "AMP-AD",
study = "MayoRNAseq",
center = "UFL-Mayo-ISB",
disease = "Alzheimers Disease",
dataType = "Covariates",
platform = "IlluminaHiSeq2000",
tissueTypeAbrv = "TCX",
tissueType = "Temporal Cortex",
organism = "Homo sapiens",
fileType = "csv",
dataContact = "Ben Heavner ben.heavner@systemsbiology.org")
synSetAnnotations(covariatesObject) <- covariatesObjectAnnotations
covariatesObject <- synStore(covariatesObject, forceVersion = T)
path <- "/Users/bheavner/Desktop/AMP-AD_MayoBB_UFL-Mayo-ISB_IlluminaHiSeq2000_TCX_GeneCounts.txt"
geneCounts <- read.table(path, header = TRUE, check.names = FALSE)
colnames(geneCounts)
geneCounts[,1]
write.table(geneCounts, path, quote = FALSE, sep = " ", row.names = TRUE, col.names = NA)
system(paste("gzip", path, sep = " "))
synID <- "syn3818244"
# get info about current synapse object to modify
geneCountObject <- synGet(synID, downloadFile=F)
# define annotations as a list
geneCountObjectAnnotations <- list(consortium = "AMP-AD",
study = "MayoRNAseq",
center = "UFL-Mayo-ISB",
disease = "Alzheimers Disease",
dataType = "Covariates",
platform = "IlluminaHiSeq2000",
tissueTypeAbrv = "TCX",
tissueType = "Temporal Cortex",
organism = "Homo sapiens",
fileType = "count",
dataContact = "Ben Heavner ben.heavner@systemsbiology.org")
synSetAnnotations(geneCountObject) <- geneCountObjectAnnotations
# define activity
codeFile <- list("https://github.com/PriceLab/AMP-ad/blob/v0.3/UFL/APP/merge_count_files.R",
"https://github.com/PriceLab/AMP-ad/blob/v0.3/UFL/APP/merge_MayoTCX_rnaseq_counts.R")
act <- Activity(name='Merge output count files from SNAPR',
used = as.list('syn3632530'),
executed = as.list(codeFile))
generatedBy(geneCountObject) = act
geneCountObject <- synStore(geneCountObject, forceVersion = T)
path <- "/Users/bheavner/Desktop/AMP-AD_MayoBB_UFL-Mayo-ISB_IlluminaHiSeq2000_TCX_GeneCounts_Normalized.txt"
geneCounts <- read.table(path, header = TRUE, check.names = FALSE)
colnames(geneCounts)
geneCounts[1,]
write.table(format(geneCounts, scientific = FALSE, digits = 5),
path, quote = FALSE, sep = "\t", row.names = TRUE, col.names = NA)
system(paste("gzip", path, sep = " "))
path
synID <- "syn3818429"
# get info about current synapse object to modify
normalizedGeneCountObject <- synGet(synID, downloadFile=F)
# define annotations as a list
normalizedGeneCountObjectAnnotations <- list(consortium = "AMP-AD",
study = "MayoRNAseq",
center = "UFL-Mayo-ISB",
disease = "Alzheimers Disease",
dataType = "mRNA",
platform = "IlluminaHiSeq2000",
tissueTypeAbrv = "TCX",
tissueType = "Temporal Cortex",
organism = "Homo sapiens",
fileType = "count",
dataContact = "Ben Heavner ben.heavner@systemsbiology.org")
synSetAnnotations(normalizedGeneCountObject) <- normalizedGeneCountObjectAnnotations
# define activity
codeFile <- ("https://github.com/PriceLab/AMP-ad/blob/v0.3/UFL/APP/normalize_readcounts.R")
act <- Activity(name='CPM (using TMM) from edgeR normalization',
used = as.list('syn3818244'),
executed = as.list(codeFile))
generatedBy(normalizedGeneCountObject) = act
normalizedGeneCountObject <- synStore(normalizedGeneCountObject, forceVersion = T)
path2 <- "/Users/bheavner/Desktop/AMP-AD_MayoBB_UFL-Mayo-ISB_IlluminaHiSeq2000_TCX_TranscriptCounts.txt"
transcriptCounts <- read.table(path2, header = TRUE, check.names = FALSE)
colnames(transcriptCounts)
library(gdata) # to read .xlsx file -  install.packages("gdata")
keyPath  <- "/Users/bheavner/Desktop/TCXIDsKey.xlsx"
keyHash <- read.xls(keyPath, sheet = 1, header = TRUE, stringsAsFactors = FALSE)
colnames(transcriptCounts) <- keyHash$IlluminaSampleID[match(colnames(transcriptCounts), keyHash$Path_ID)]
colnames(transcriptCounts)
write.table(transcriptCounts, path2, quote = FALSE, sep = " ", row.names = TRUE, col.names = NA)
system(paste("gzip", path2, sep = " "))
synID <- "syn3818611"
# get info about current synapse object to modify
transcriptCountObject <- synGet(synID, downloadFile=F)
# define annotations as a list
transcriptCountObjectAnnotations <- list(consortium = "AMP-AD",
study = "MayoRNAseq",
center = "UFL-Mayo-ISB",
disease = "Alzheimers Disease",
dataType = "mRNA",
platform = "IlluminaHiSeq2000",
tissueTypeAbrv = "TCX",
tissueType = "Temporal Cortex",
fileType = "count",
organism = "Homo sapiens",
dataContact = "Ben Heavner ben.heavner@systemsbiology.org")
synSetAnnotations(transcriptCountObject) <- transcriptCountObjectAnnotations
# define activity
codeFile <- list("https://github.com/PriceLab/AMP-ad/blob/v0.3/UFL/APP/merge_count_files.R",
"https://github.com/PriceLab/AMP-ad/blob/v0.3/UFL/APP/merge_MayoTCX_rnaseq_counts.R")
act <- Activity(name='Merge output count files from SNAPR',
used = as.list('syn3632530'),
executed = as.list(codeFile))
generatedBy(transcriptCountObject) = act
transcriptCountObject <- synStore(transcriptCountObject, forceVersion = T)
path2 <- "/Users/bheavner/Desktop/AMP-AD_MayoBB_UFL-Mayo-ISB_IlluminaHiSeq2000_TCX_TranscriptCounts_Normalized.txt"
transcriptCounts <- read.table(path2, header = TRUE, check.names = FALSE)
colnames(transcriptCounts)
colnames(transcriptCounts) <- keyHash$IlluminaSampleID[match(colnames(transcriptCounts), keyHash$Path_ID)]
colnames(transcriptCounts)
path
path2
transcriptCounts[1,1]
write.table(format(transcriptCounts, scientific = FALSE, digits = 5),
path2, quote = FALSE, sep = "\t", row.names = TRUE, col.names = NA)
system(paste("gzip", path2, sep = " "))
synID <- "syn3818905"
# get info about current synapse object to modify
normalizedTranscriptCountObject <- synGet(synID, downloadFile=F)
# define annotations as a list
normalizedTranscriptCountObjectAnnotations <- list(consortium = "AMP-AD",
study = "MayoRNAseq",
center = "UFL-Mayo-ISB",
disease = "Alzheimers Disease",
dataType = "mRNA",
platform = "IlluminaHiSeq2000",
tissueTypeAbrv = "TCX",
tissueType = "Temporal Cortex",
organism = "Homo sapiens",
fileType = "count",
dataContact = "Ben Heavner ben.heavner@systemsbiology.org")
synSetAnnotations(normalizedTranscriptCountObject) <- normalizedTranscriptCountObjectAnnotations
codeFile <- ("https://github.com/PriceLab/AMP-ad/blob/v0.3/UFL/APP/normalize_readcounts.R")
act <- Activity(name='CPM (using TMM) from edgeR normalization',
used = as.list('syn3818611'),
executed = as.list(codeFile))
generatedBy(normalizedTranscriptCountObject) = act
normalizedTranscriptCountObject <- synStore(normalizedTranscriptCountObject, forceVersion = T)
synID <- "syn3818244"
geneCountObject <- synGet(synID, downloadFile=F)
codeFile <- list("https://github.com/PriceLab/AMP-ad/blob/v0.4/MBB/TCX/merge_count_files.R",
"https://github.com/PriceLab/AMP-ad/blob/v0.4/MBB/TCX/merge_MayoTCX_rnaseq_counts.R")
act <- Activity(name='Merge output count files from SNAPR',
used = as.list('syn3632530'),
executed = as.list(codeFile))
generatedBy(geneCountObject) = act
geneCountObject <- synStore(geneCountObject, forceVersion = T)
synID <- "syn3818429"
codeFile <- ("https://github.com/PriceLab/AMP-ad/blob/v0.4/MBB/TCX/normalize_readcounts.R")
act <- Activity(name='CPM (using TMM) from edgeR normalization',
used = as.list('syn3818244'),
executed = as.list(codeFile))
generatedBy(normalizedGeneCountObject) = act
normalizedGeneCountObject <- synStore(normalizedGeneCountObject, forceVersion = T)
synID <- "syn3818611"
codeFile <- list("https://github.com/PriceLab/AMP-ad/blob/v0.4/MBB/TCX/merge_count_files.R",
"https://github.com/PriceLab/AMP-ad/blob/v0.4/MBB/TCX/merge_MayoTCX_rnaseq_counts.R")
act <- Activity(name='Merge output count files from SNAPR',
used = as.list('syn3632530'),
executed = as.list(codeFile))
generatedBy(transcriptCountObject) = act
transcriptCountObject <- synStore(transcriptCountObject, forceVersion = T)
synID <- "syn3818905"
codeFile <- ("https://github.com/PriceLab/AMP-ad/blob/v0.4/MBB/TCX/normalize_readcounts.R")
act <- Activity(name='CPM (using TMM) from edgeR normalization',
used = as.list('syn3818611'),
executed = as.list(codeFile))
generatedBy(normalizedTranscriptCountObject) = act
normalizedTranscriptCountObject <- synStore(normalizedTranscriptCountObject, forceVersion = T)
synID <- "syn3483880"
covariatesObject <- synGet(synID, downloadFile=F)
# define annotations as a list
covariatesObjectAnnotations <- list(consortium = "AMP-AD",
study = "TAUAPPms",
center = "UFL-Mayo-ISB",
dataType = "Covariates",
disease = "Alzheimers Disease",
platform = "IlluminaHiSeq2000",
mouseModel = "APP",
tissueTypeAbrv = "FB",
tissueType = "Forebrain",
fileType = "csv",
organism = "Mus musculus",
dataContact = "Ben Heavner ben.heavner@systemsbiology.org")
synSetAnnotations(covariatesObject) <- covariatesObjectAnnotations
# define activity
codeFile <- ("https://github.com/PriceLab/AMP-ad/blob/v0.2/UFL/APP/makeAPPCovariates.R")
act <- Activity(name='Covariate file generation',
executed = as.list(codeFile))
generatedBy(covariatesObject) = act
covariatesObject <- synStore(covariatesObject, forceVersion = T)
library(synapseClient)
library(tools)
source("merge_count_files.R")
# Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# Define paths for required Synapse objects
ad_rnaseq_counts <- "syn2875349" # all count files in a zipped directory
# Download files from Synapse
ad_count_files <- synGet(ad_rnaseq_counts)
ad_files_path <- getFileLocation(ad_count_files)
fileDir <- file_path_sans_ext(basename(ad_files_path))
tmpDir <- tempdir()
unzip(ad_files_path, exdir = tmpDir)
inputDir <- file.path(tmpDir, fileDir)
tmdir
tmpDir
inputDir
prefix <- "AMP-AD_MayoPilot_UFL-Mayo-ISB_IlluminaHiSeq2000_TemporalCortex_Alzheimer"
countTypes <- c("gene_id", "transcript_id")
countType  <- "gene_id"
message(paste("Merging", prefix, "files of count type", countType, "..."))
# Create the merged file and store the output file path
merged_file <- create_merged_file(inputDir, countType, prefix)
# Create a Synapse object for the output file and upload
merged_file_object <- File(path = merged_file,
parentId = ad_count_files$properties$parentId)
merged_file_object <- synStore(merged_file_object)
countType  <- "transcript_id"
message(paste("Merging", prefix, "files of count type", countType, "..."))
# Create the merged file and store the output file path
merged_file <- create_merged_file(inputDir, countType, prefix)
# Create a Synapse object for the output file and upload
merged_file_object <- File(path = merged_file,
parentId = ad_count_files$properties$parentId)
merged_file_object <- synStore(merged_file_object)
}
path <- "/Users/bheavner/Desktop/AMP-AD_MayoPilot_UFL-Mayo-ISB_IlluminaHiSeq2000_TemporalCortex_Alzheimer_gene_id_counts.txt"
geneCounts <- read.table(path, header = TRUE, check.names = FALSE)
path <- "/Users/bheavner/Desktop/AMP-AD_MayoPilot_UFL-Mayo-ISB_IlluminaHiSeq2000_TemporalCortex_Alzheimer_transcript_id_counts.txt"
transcriptCounts <- read.table(path, header = TRUE, check.names = FALSE)
exit
quit
q()
