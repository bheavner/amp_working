localFilePath <- sub('.gz', '', localFilePath) #trim the .gz suffix
transposedCounts <- read.table(localFilePath, header = TRUE)
colnames(transposedCounts)
dir = "\tmp\ss"
countType = "gene_id"
prefix <- "AMP-AD_MSBB_UFL-Mayo-ISB_IlluminaHiSeq2000_TCX"
fileList <- list.files(dir, pattern = countType, recursive = TRUE)
dir = "/tmp/ss"
fileList <- list.files(dir, pattern = countType, recursive = TRUE)
fileList
fileList <- fileList[!grepl(".gz", fileList)]
message("Merging input files...")
sample <- character(length(fileList))
i = 1
for (i in 1:length(fileList)) {
filePath <- file.path(dir, fileList[i])
# Pull out sample name
sample[i] <- sub("(^[^.]+)(.+$)", "\\1", basename(filePath))
if (i == 1) {
tmpDat <- as.matrix(read.table(filePath, row.names = 1))
countDat <- matrix(nrow = nrow(tmpDat),
ncol = length(fileList))
rownames(countDat) <- row.names(tmpDat)
countDat[, 1] <- tmpDat
} else {
#          message(paste(filePath)) # bug hunting
countDat[, i] <- as.matrix(read.table(filePath, row.names = 1))
}
}
sample
colnames(countDat) <- sample
colnames(countDat)
message("Writing file...")
fileName <- paste(prefix, countType, "counts.txt", sep = "_")
fileName
write.table(countDat, file.path(dir, fileName), quote = FALSE)
test  <- read.table(file.path(dir, fileName))
colnames(test)
write.table(countDat, file.path(dir, fileName), col.names = sample, quote = FALSE) # THIS ADDS THE X TO COLUMN NAMES
test  <- read.table(file.path(dir, fileName))
colnames(test)
?write.table
write.table(countDat, file.path(dir, fileName), col.names = TRUE, quote = FALSE) # THIS ADDS THE X TO COLUMN NAMES
test  <- read.table(file.path(dir, fileName))
colnames(test)
?make.names
make.names(sample)
make.names(df(sample))
as.character(sample)
colnames(countDat) <- as.character(sample)
colnames(countDat)
write.table(countDat, file.path(dir, fileName), quote = FALSE) # THIS ADDS THE X TO COLUMN NAMES
test  <- read.table(file.path(dir, fileName))
colnames(test)
write.table(countDat, file.path(dir, fileName), quote = FALSE, col.names = FALSE) # THIS ADDS THE X TO COLUMN NAMES
test  <- read.table(file.path(dir, fileName))
colnames(test)
?read.table
test  <- read.table(file.path(dir, fileName), column.names = TRUE)
test  <- read.table(file.path(dir, fileName), col.names = TRUE)
test  <- read.table(file.path(dir, fileName), header = TRUE)
colnames(test)
?df
df(countDat)
df(temp, countDat)
?data.frame
data.frame(countDat)
colnames(data.frame(countDat))
test <-data.frame(countDat)
colnames(test) <- sample
colnames(test)
write.table(test, file.path(dir, fileName), quote = FALSE))
write.table(test, file.path(dir, fileName), quote = FALSE)
read.table(file.path(dir, fileName))
colnames(read.table(file.path(dir, fileName)))
test  <- data.frame(countDat)
colnames(test)
colnames(countDat)
colnames(test)  <- as.character(sample)
colnames(test)
write.table(test, file.path(dir, fileName), quote = FALSE)
colnames(read.table(file.path(dir, fileName)))
test2 <- matrix(c(1,2,3,4,5,6), nrow = 3)
test2
colnames(test2)
colnames(test2) <- c(1, "x2")
test2
colnames(test2) <- c(1, 2)
test2
str(test2)
as.matrix(test2)
colnames(test2) <- c(1, "x2")
as.matrix(test2)
test2 <- as.matrix(test2)
write.table(test2, file.path(dir, fileName), quote = FALSE)
colnames(read.table(file.path(dir, fileName)))
dir
filename
fileName
colnames(read.table(file.path(dir, fileName)), check.names = FALSE)
?read.csv
colnames(read.csv(file.path(dir, fileName)), check.names = FALSE, sep = " ")
colnames(read.csv(file.path(dir, fileName)), check.names = F, sep = " ")
colnames(read.table(file.path(dir, fileName)), check.names = FALSE)
colnames(read.table(file.path(dir, fileName), check.names = FALSE)
)
fileList <- list.files(dir, pattern = countType, recursive = TRUE)
fileList <- fileList[!grepl(".gz", fileList)]
sample <- character(length(fileList))
for (i in 1:length(fileList)) {
filePath <- file.path(dir, fileList[i])
# Pull out sample name
sample[i] <- sub("(^[^.]+)(.+$)", "\\1", basename(filePath))
if (i == 1) {
tmpDat <- as.matrix(read.table(filePath, row.names = 1))
countDat <- matrix(nrow = nrow(tmpDat),
ncol = length(fileList))
rownames(countDat) <- row.names(tmpDat)
countDat[, 1] <- tmpDat
} else {
#          message(paste(filePath)) # bug hunting
countDat[, i] <- as.matrix(read.table(filePath, row.names = 1, check.names = FALSE))
}
}
for (i in 1:length(fileList)) {
filePath <- file.path(dir, fileList[i])
# Pull out sample name
sample[i] <- sub("(^[^.]+)(.+$)", "\\1", basename(filePath))
if (i == 1) {
tmpDat <- as.matrix(read.table(filePath, row.names = 1))
countDat <- matrix(nrow = nrow(tmpDat),
ncol = length(fileList))
rownames(countDat) <- row.names(tmpDat)
countDat[, 1] <- tmpDat
} else {
message(paste(filePath)) # bug hunting
countDat[, i] <- as.matrix(read.table(filePath, row.names = 1, check.names = FALSE))
}
}
if (i == 1) {
tmpDat <- as.matrix(read.table(filePath, row.names = 1))
countDat <- matrix(nrow = nrow(tmpDat),
ncol = length(fileList))
rownames(countDat) <- row.names(tmpDat)
countDat[, 1] <- tmpDat
} else {
message(paste(filePath)) # bug hunting
countDat[, i] <- as.matrix(read.table(filePath, row.names = 1, check.names = FALSE))
}
sample <- character(length(fileList))
for (i in 1:length(fileList)) {
filePath <- file.path(dir, fileList[i])
# Pull out sample name
sample[i] <- sub("(^[^.]+)(.+$)", "\\1", basename(filePath))
if (i == 1) {
tmpDat <- as.matrix(read.table(filePath, row.names = 1))
countDat <- matrix(nrow = nrow(tmpDat),
ncol = length(fileList))
rownames(countDat) <- row.names(tmpDat)
countDat[, 1] <- tmpDat
} else {
message(paste(filePath)) # bug hunting
countDat[, i] <- as.matrix(read.table(filePath, row.names = 1, check.names = FALSE))
}
}
fileList <- list.files(dir, pattern = countType, recursive = TRUE)
# ignore any .gz files
fileList <- fileList[!grepl(".gz", fileList)]
message("Merging input files...")
sample <- character(length(fileList))
for (i in 1:length(fileList)) {
filePath <- file.path(dir, fileList[i])
# Pull out sample name
sample[i] <- sub("(^[^.]+)(.+$)", "\\1", basename(filePath))
if (i == 1) {
tmpDat <- as.matrix(read.table(filePath, row.names = 1))
countDat <- matrix(nrow = nrow(tmpDat),
ncol = length(fileList))
rownames(countDat) <- row.names(tmpDat)
countDat[, 1] <- tmpDat
} else {
#message(paste(filePath)) # bug hunting
countDat[, i] <- as.matrix(read.table(filePath, row.names = 1, check.names = FALSE))
}
}
colnames(countDat) <- sample#as.character(sample)
colnames(countDat)
message("Writing file...")
fileName <- paste(prefix, countType, "counts.txt", sep = "_")
write.table(countDat, file.path(dir, fileName), quote = FALSE)
colnames(read.table(file.path(dir, fileName), check.names = FALSE))
library(gdata) # to read .xlsx file -  install.packages("gdata")
?read.xls
sourceFilesEdited  <- read.table('secondRunSourceFiles_curated') # it is 78 entries long - good sign.
index = 1
for (sample in toReRun) {
message(
paste(index, (
system(
paste('grep ', '"', sample, '\\.', '" ', 'sourceFiles_curated ', '| wc -l', sep = ""),
intern = TRUE)
)))
index <- index + 1
}
View(sourceFilesEdited)
View(sourceFilesEdited)
str(sourceFilesEdited)
sourceFilesEdited$V1
for (file in sourceFilesEdited$V1) {
message(system(
paste('aws s3 cp s3://mayo-u01-rnaseq/', file, ' s3://mayo-u01-rnaseq/TCX_rerun_3/', ' --dryrun', sep = "")))
}
for (file in sourceFilesEdited$V1) {
message(system(
paste('aws s3 cp s3://mayo-u01-rnaseq/', file, ' s3://mayo-u01-rnaseq/TCX_rerun_3/', sep = "")))
}
72*12
72/12
setwd("~/Projects/UO1-AMP/working/may_2015_release/MBB_TCX_Work")
library(synapseClient)
library(tools)
source("merge_count_files.R")
# Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# Define paths for required Synapse objects
mayoTCX_rnaseq_counts <- "syn3632530" # all count files in a zipped directory
# Download files from Synapse
mayoTCX_count_files <- synGet(mayoTCX_rnaseq_counts)
mayoTCX_files_path <- getFileLocation(mayoTCX_count_files)
fileDir <- file_path_sans_ext(basename(mayoTCX_files_path))
tmpDir <- tempdir()
unzip(mayoTCX_files_path, exdir = tmpDir)
inputDir <- paste(tmpDir, '/tmp/tcx', sep = "")
inputDir
prefix <- "AMP-AD_MSBB_UFL-Mayo-ISB_IlluminaHiSeq2000_TCX"
countTypes <- c("gene_id", "transcript_id") #
for (countType in countTypes) {
message(paste("Merging", prefix, "files of count type", countType, "..."))
# Create the merged file and store the output file path
merged_file <- create_merged_file(inputDir, countType, prefix)
# Create a Synapse object for the output file and upload
merged_file_object <- File(path = merged_file,
parentId = mayoTCX_count_files$properties$parentId)
merged_file_object <- synStore(merged_file_object)
}
library(synapseClient)
library(R.utils)
library(edgeR)
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
codeFile <- ("https://github.com/PriceLab/AMP-ad/MBB_TCX/normalize_readcounts.R")
mergedCountFile <- 'syn3664142'
originalCountFile <- synGet(mergedCountFile)
localFilePath <- getFileLocation(originalCountFile)
if(!file.exists(substr(localFilePath, 1, nchar(localFilePath) - 3))) {
gunzip(localFilePath)
}
localFilePath <- sub('.gz', '', localFilePath) #trim the .gz suffix
transposedCounts <- read.table(localFilePath, header = TRUE, check.names = FALSE)
colnames(transposedCounts)
expr <- DGEList(transposedCounts, group = rep(1, ncol(transposedCounts)))
transposedCounts[,"05-18"]
transposedCounts[,~"05-18"]
transposedCounts[,colname(transposedCounts == "05-18")]
transposedCounts[,colname(transposedCounts) == "05-18"]
transposedCounts[,colnames(transposedCounts) == "05-18"]
transposedCounts[,colnames(transposedCounts) != "05-18"]
colnames(transposedCounts)
colnames(transposedCounts[,c(1:20 22:279)])
c(1:20 22:279)
c{1:20 22:279}
c[1:20 22:279]
c(1:10)
c[1:20, 22:279]
c[1:20 22:279]
c[1:20]
c(1:20 22:279)
c(1:20, 22:279)
colnames(transposedCounts[,c(1:20, 22:279)])
transposedCounts  <- transposedCounts[,c(1:20, 22:279)]
transposedCounts <- read.table(localFilePath, header = TRUE, check.names = FALSE)
transposedCounts  <- transposedCounts[,c(1:20, 22:279)]
normFactors <- calcNormFactors(expr, method = ("TMM"))
expr <- DGEList(transposedCounts, group = rep(1, ncol(transposedCounts)))
normFactors <- calcNormFactors(expr, method = ("TMM"))
expr$samples
transposedCounts <- read.table(localFilePath, header = TRUE, check.names = FALSE)
transposedCounts  <- transposedCounts[,c(1:21, 23:279)]
expr <- DGEList(transposedCounts, group = rep(1, ncol(transposedCounts)))
normFactors <- calcNormFactors(expr, method = ("TMM"))
mergedCountFile  <- 'syn3664260'
originalCountFile <- synGet(mergedCountFile)
# unzip file and load for processing
localFilePath <- getFileLocation(originalCountFile)
if(!file.exists(substr(localFilePath, 1, nchar(localFilePath) - 3))) {
gunzip(localFilePath)
}
localFilePath <- sub('.gz', '', localFilePath) #trim the .gz suffix
transposedCounts <- read.table(localFilePath, header = TRUE, check.names = FALSE)
colnames(transposedCounts)
transposedCounts  <- transposedCounts[,c(1:21, 23:279)]
expr <- DGEList(transposedCounts, group = rep(1, ncol(transposedCounts)))
normFactors <- calcNormFactors(expr, method = ("TMM"))
library(synapseClient)
library(tools)
source("merge_count_files.R")
# Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# Define paths for required Synapse objects
mayoTCX_rnaseq_counts <- "syn3632530" # all count files in a zipped directory
# Download files from Synapse
mayoTCX_count_files <- synGet(mayoTCX_rnaseq_counts)
mayoTCX_files_path <- getFileLocation(mayoTCX_count_files)
fileDir <- file_path_sans_ext(basename(mayoTCX_files_path))
tmpDir <- tempdir()
unzip(mayoTCX_files_path, exdir = tmpDir)
inputDir <- paste(tmpDir, '/tmp/tcx', sep = "")
#inputDir <- file.path(tmpDir, fileDir)
prefix <- "AMP-AD_MSBB_UFL-Mayo-ISB_IlluminaHiSeq2000_TCX"
countTypes <- c("gene_id", "transcript_id") #
for (countType in countTypes) {
message(paste("Merging", prefix, "files of count type", countType, "..."))
# Create the merged file and store the output file path
merged_file <- create_merged_file(inputDir, countType, prefix)
# Create a Synapse object for the output file and upload
merged_file_object <- File(path = merged_file,
parentId = mayoTCX_count_files$properties$parentId)
merged_file_object <- synStore(merged_file_object)
}
library(synapseClient)
library(tools)
source("merge_count_files.R")
# Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# Define paths for required Synapse objects
mayoTCX_rnaseq_counts <- "syn3632530" # all count files in a zipped directory
# Download files from Synapse
mayoTCX_count_files <- synGet(mayoTCX_rnaseq_counts)
mayoTCX_files_path <- getFileLocation(mayoTCX_count_files)
# Get name of temporary directory to store unzipped files (same as name of
# original compressed directory)
fileDir <- file_path_sans_ext(basename(mayoTCX_files_path))
tmpDir <- tempdir()
unzip(mayoTCX_files_path, exdir = tmpDir)
inputDir <- paste(tmpDir, '/tmp/tcx', sep = "")
#inputDir <- file.path(tmpDir, fileDir)
prefix <- "AMP-AD_MSBB_UFL-Mayo-ISB_IlluminaHiSeq2000_TCX"
countTypes <- c("gene_id", "transcript_id") #
for (countType in countTypes) {
message(paste("Merging", prefix, "files of count type", countType, "..."))
# Create the merged file and store the output file path
merged_file <- create_merged_file(inputDir, countType, prefix)
# Create a Synapse object for the output file and upload
merged_file_object <- File(path = merged_file,
parentId = mayoTCX_count_files$properties$parentId)
merged_file_object <- synStore(merged_file_object)
}
# fix IDs in PSP countfiles
library(gdata) # to read .xlsx file -  install.packages("gdata")
genePath = "/Users/bheavner/Desktop/AMP-AD_MSBB_UFL-Mayo-ISB_IlluminaHiSeq2000_TCX_gene_id_counts.txt"
geneCounts <- read.table(genePath, header = TRUE)
geneCounts <- read.table(genePath, header = TRUE,  check.names = FALSE)
colnames(geneCounts)
keyPath  <- "/Users/bheavner/Desktop/TCXIDsKey.xlsx"
keyHash <- read.xls(keyPath, sheet = 1, header = TRUE, stringsAsFactors = FALSE)
keyHash$IlluminaSampleID[match(colnames(geneCounts), keyHash$Path_ID)]
colnames(geneCounts) <- keyHash$IlluminaSampleID[match(colnames(geneCounts), keyHash$Path_ID)]
write.table(geneCounts, genePath) #, quote = FALSE, sep = " ", row.names = TRUE)
system(paste("gzip", genePath))
transcriptPath = "/Users/bheavner/Desktop/AMP-AD_MSBB_UFL-Mayo-ISB_IlluminaHiSeq2000_TCX_transcript_id_counts.txt"
transcriptCounts <- read.table(transcriptPath, header = TRUE, check.names = FALSE)
# replace colnames(transcriptCounts) with corresponding keyHash$IlluminaSampleID values
colnames(transcriptCounts)
keyHash$IlluminaSampleID[match(colnames(transcriptCounts), keyHash$Path_ID)]
colnames(transcriptCounts) <- keyHash$IlluminaSampleID[match(colnames(transcriptCounts), keyHash$Path_ID)]
write.table(transcriptCounts, genePath, quote = FALSE, sep = " ", row.names = TRUE)
system(paste("gzip", transcriptPath))
expr <- DGEList(transposedCounts, group = rep(1, ncol(transposedCounts)))
library(synapseClient)
library(R.utils)
library(edgeR)
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
codeFile <- ("https://github.com/PriceLab/AMP-ad/tree/0.2/MBB/TCX/normalize_readcounts.R")
countFileSynapseIDs <- c('syn3667936', 'syn3667937')
for (mergedCountFile in countFileSynapseIDs) {
message("Normalizing ", mergedCountFile)
# Download file from Synapse
originalCountFile <- synGet(mergedCountFile)
# unzip file and load for processing
localFilePath <- getFileLocation(originalCountFile)
if(!file.exists(substr(localFilePath, 1, nchar(localFilePath) - 3))) {
gunzip(localFilePath)
}
localFilePath <- sub('.gz', '', localFilePath) #trim the .gz suffix
transposedCounts <- read.table(localFilePath, header = TRUE, check.names = FALSE)
# make DGEList object
expr <- DGEList(transposedCounts, group = rep(1, ncol(transposedCounts)))
# calculate normalization factors
normFactors <- calcNormFactors(expr, method = ("TMM"))
# error: EError in quantile.default(x, p = p) :
# missing values and NaN's not allowed if 'na.rm' is FALSE
# expr$samples$lib.size shows a library size of 0 for 39 samples, with sample IDs like X11344_TCX. Why do they start with X?
# get samples with rownames(expr$samples[expr$samples$lib.size == 0, ])
# use normaliztion factors to calculate cpm -
# per https://www.biostars.org/p/84087/, that's calculated as
# count / (library size * normalization factor))
normalizedCpm <- cpm(normFactors)
# write the data to local dir
# need to fix this naming
newFileName <- sub('_id_counts.txt.gz', '', originalCountFile$properties$name)
newFileName <- paste0(newFileName, "Counts_normalized.txt", sep="")
write.table(format(normalizedCpm, scientific = FALSE, digits = 5),
newFileName, quote = FALSE, sep = "\t", row.names = TRUE)
# package it up, then create a Synapse object for the output file and upload with provenance
gzip(newFileName)
newFileName <- paste0(newFileName, ".gz", sep="")
parentId <- originalCountFile$properties$parentId
normalizedCountFile <- File(newFileName, parentId = parentId)
normalizedCountFile <- synStore(normalizedCountFile,
activityName="CPM (using TMM) from edgeR normalization",
used=list(list(name = "normalize_readcounts.R",
url = codeFile, wasExecuted = T),
list(entity=originalCountFile,
wasExecuted=F)))
}
expr <- DGEList(transposedCounts, group = rep(1, ncol(transposedCounts)))
normFactors <- calcNormFactors(expr, method = ("TMM"))
expr$samples
(
)
library(gdata) # to read .xlsx file -  install.packages("gdata")
covariatesPath = "/Users/bheavner/Desktop/APP\ covariates.xlsx"
covariates  <- read.xls(covariatesPath, sheet = 1)
covariates  <- read.xls(covariatesPath, sheet = 1, stringsAsFactors = FALSE)
View(covariates)
View(covariates)
colnames(covariates)
colnames(covariates[,2:11])
covariates  <- covariates[,2:11]
fileName <- "AMP-AD_TAUAPPms_UFL-Mayo-ISB_IlluminaHiSeq2000_App-Covariates.csv"
write.table(APPCovariates, file = fileName, quote = FALSE, sep = ",")
write.table(covariates, file = fileName, quote = FALSE, sep = ",")
?setwd
getwd()
fileName
# This script uses the merging function saved in merge_file_counts.R to combine
# SNAPR count files for reprocessed pilot AD RNAseq data from Mayo
library(synapseClient)
library(tools)
source("merge_count_files.R")
# Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# Define paths for required Synapse objects
mayoTCX_rnaseq_counts <- "syn3632530" # all count files in a zipped directory
# Download files from Synapse
mayoTCX_count_files <- synGet(mayoTCX_rnaseq_counts)
mayoTCX_files_path <- getFileLocation(mayoTCX_count_files)
fileDir <- file_path_sans_ext(basename(mayoTCX_files_path))
tmpDir <- tempdir()
unzip(mayoTCX_files_path, exdir = tmpDir)
inputDir <- paste(tmpDir, '/tmp/tcx', sep = "")
#inputDir <- file.path(tmpDir, fileDir)
prefix <- "AMP-AD_MSBB_UFL-Mayo-ISB_IlluminaHiSeq2000_TCX"
countTypes <- c("gene_id", "transcript_id") #
for (countType in countTypes) {
message(paste("Merging", prefix, "files of count type", countType, "..."))
# Create the merged file and store the output file path
merged_file <- create_merged_file(inputDir, countType, prefix)
# Create a Synapse object for the output file and upload
merged_file_object <- File(path = merged_file,
parentId = mayoTCX_count_files$properties$parentId)
merged_file_object <- synStore(merged_file_object)
}
for (countType in countTypes) {
message(paste("Merging", prefix, "files of count type", countType, "..."))
# Create the merged file and store the output file path
merged_file <- create_merged_file(inputDir, countType, prefix)
# Create a Synapse object for the output file and upload
merged_file_object <- File(path = merged_file,
parentId = mayoTCX_count_files$properties$parentId)
merged_file_object <- synStore(merged_file_object)
}
library(gdata) # to read .xlsx file -  install.packages("gdata")
genePath = "/Users/bheavner/Desktop/AMP-AD_MSBB_UFL-Mayo-ISB_IlluminaHiSeq2000_TCX_gene_id_counts.txt"
geneCounts <- read.table(genePath, header = TRUE, check.names = FALSE)
geneCounts <- read.table(genePath, header = TRUE, check.names = FALSE)
keyPath  <- "/Users/bheavner/Desktop/TCXIDsKey.xlsx"
keyHash <- read.xls(keyPath, sheet = 1, header = TRUE, stringsAsFactors = FALSE)
colnames(geneCounts)
keyHash$IlluminaSampleID[match(colnames(geneCounts), keyHash$Path_ID)]
colnames(geneCounts) <- keyHash$IlluminaSampleID[match(colnames(geneCounts), keyHash$Path_ID)]
# save and rezip the geneCounts table.
write.table(geneCounts, genePath) #, quote = FALSE, sep = " ", row.names = TRUE)
#test <- read.table(genePath, header = TRUE)
system(paste("gzip", genePath))
transcriptPath = "/Users/bheavner/Desktop/AMP-AD_MSBB_UFL-Mayo-ISB_IlluminaHiSeq2000_TCX_transcript_id_counts.txt"
transcriptCounts <- read.table(transcriptPath, header = TRUE, check.names = FALSE)
# replace colnames(transcriptCounts) with corresponding keyHash$IlluminaSampleID values
colnames(transcriptCounts) <- keyHash$IlluminaSampleID[match(colnames(transcriptCounts), keyHash$Path_ID)]
# save and rezip the geneCounts table.
write.table(transcriptCounts, genePath, quote = FALSE, sep = " ", row.names = TRUE)
#test <- read.table(genePath, header = TRUE)
system(paste("gzip", transcriptPath))
transposedCounts  <- geneCounts
expr <- DGEList(transposedCounts, group = rep(1, ncol(transposedCounts)))
normFactors <- calcNormFactors(expr, method = ("TMM"))
transposedCounts  <- transcriptCounts
expr <- DGEList(transposedCounts, group = rep(1, ncol(transposedCounts)))
normFactors <- calcNormFactors(expr, method = ("TMM"))
exit()
quit()
