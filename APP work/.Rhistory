toPlot$samples
ggplot(toPlot$counts) + geom_boxplot
boxplot(toPlot$counts), use.cols = FALSE)
boxplot(toPlot$counts, use.cols = FALSE)
toPlot$counts
toPlot$counts[,JNPL3Plus]
toPlot$counts[,JNPL3Minus]
boxplot(toPlot$counts[,JNPL3Plus], use.cols = FALSE)
boxplot(toPlot$counts[,JNPL3Minus], use.cols = FALSE)
boxplot(toPlot$counts[,JNPL3Plus], use.cols = FALSE)
boxplot(toPlot$counts[,JNPL3Minus], use.cols = FALSE)
?data.frame
?melt
?melt.list
melt(toPlot)
data.frame(toPlot$counts, row.names = topTen)
toPlot$samples
data.frame(toPlot$counts, row.names = topTen, id=toPlot$samples$group)
data.frame(toPlot$counts, row.names = topTen)
melt(data.frame(toPlot$counts, row.names = topTen))
colnames(toPlot)
rownames(toPlot)
melt(data.frame(toPlot$counts, row.names = topTen), id.vars = rownames(toPlot))
data.frame(toPlot$counts, row.names = topTen)
?transpose
??transpose
t(data.frame(toPlot$counts, row.names = topTen))
melt(t(data.frame(toPlot$counts, row.names = topTen)))
melt(t(data.frame(toPlot$counts, row.names = topTen)))
toPlot2 <- melt(t(data.frame(toPlot$counts, row.names = topTen)))
toPlot2
class(toPlot2)
test <- data.frame(toPlot$counts, row.names = topTen)
test
test <- t(data.frame(toPlot$counts, row.names = topTen))
test
toPlot$samples
test
toPlot$samples
toPlot$samples$group
test$factor.col <- toPlot$samples$group
test
t(toPlot$samples$group)
toPlot$samples$group
unlist(toPlot$samples$group)
test$factor.col <- unlist(toPlot$samples$group)
test
test <- t(data.frame(toPlot$counts, row.names = topTen))
test
test$factor.col <- unlist(toPlot$samples$group)
test <- t(data.frame(toPlot$counts, row.names = topTen))
?rbind
cbind(test, toPlot$samples$group)
toPlot$samples$group
test
test <- cbind(test, toPlot$samples$group) #1 is JNPL3minus, 2 is JNPL3plus
test
melt(test)
boxplot(toPlot$counts[,JNPL3Plus], use.cols = FALSE)
boxplot(toPlot$counts[,JNPL3Minus], use.cols = FALSE)
?boxplot
boxplot(toPlot$samples$group, data=toPlot$counts, notch=TRUE,
col=(c("gold","darkgreen")),
main="Top 10 Differentially Expressed Genes", xlab="Gene ID")
boxplot(x~toPlot$samples$group, data=toPlot$counts, notch=TRUE,
col=(c("gold","darkgreen")),
main="Top 10 Differentially Expressed Genes", xlab="Gene ID")
boxplot(toPlot$counts~toPlot$samples$group, data=toPlot$counts, notch=TRUE,
col=(c("gold","darkgreen")),
main="Top 10 Differentially Expressed Genes", xlab="Gene ID")
toPlot$samples$group
toPlot$counts
boxplot(t(toPlot$counts)~toPlot$samples$group, data=t(toPlot$counts), notch=TRUE,
col=(c("gold","darkgreen")),
main="Top 10 Differentially Expressed Genes", xlab="Gene ID")
boxplot(toPlot$counts~t(toPlot$samples$group), data=toPlot$counts, notch=TRUE,
col=(c("gold","darkgreen")),
main="Top 10 Differentially Expressed Genes", xlab="Gene ID")
toPlot$counts
boxplot(t(toPlot$counts))
toPlot$samples$group
t(toPlot$counts)
t(toPlot$samples$group)
topTags
topTags(de_GLM, n=10)
topTags(de_glm, n = 10)
topTen <- rownames(topTags(de_glm, n = 10))
toPlot <- d[topTen] #10 rows, 24 columnst
class(toPlot)
str(toPlot)
cbind(toPlot$samples$group, t(toPlot$counts))
test <- cbind(toPlot$samples$group, t(toPlot$counts))
t(test)
melt(t(test))
test
t(test)
test  <- data.frame(toPlot$samples$group, t(toPlot$counts))
teest
test
melt(test)
toPlot2 <- melt(test)
toPlot2
ggplot(toPlot2, aes(factor(variable), value)) + geom_boxplot(aes(fill = Type))
ggplot(toPlot2, aes(factor(variable), value)) + geom_boxplot(aes(fill = toPlot.samples.group))
topTen
topTags(de_glm, n = 10)
de2tags <- rownames(d2)[as.logical(de2)]
plotSmear(de_glm, de.tags=de2tags)
abline(h = c(-2, 2), col = "blue")
-log(2)
de2tags
de2
head(de2)
?decideTestsDGE
ls
topTags(de_glm, n = 10)
top <- topTags(de.tgw, n=50)
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM("external_gene_name", filters = "ensembl_gene_id", values = rownames(top), ensembl)
top <- cbind(top, geneNames)
top <- topTags(de_glm, n=50)
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM("external_gene_name", filters = "ensembl_gene_id", values = rownames(top), ensembl)
top <- cbind(top, geneNames)
top
de_glm
class(d2)
d2$counts
rownames(top)
de2$counts[rownames(top), ]
de2$counts
d2$counts[rownames(top), ]
?mean
mewn(d2$counts[rownames(top), ])
mean(d2$counts[rownames(top), ])
rowMeans(d2$counts[rownames(top), ])
dim(rowMeans(d2$counts[rownames(top), ]))
lenght(rowMeans(d2$counts[rownames(top), ]))
length(rowMeans(d2$counts[rownames(top), ]))
dim(top)
means <- rowMeans(d2$counts[rownames(top), ])
top[1]
top[1,]
top <- cbind(top, means)
top[1,]
colnames(top)
colnames(top)[6]
colnames(d2)
colnames(d)
d[1,1]
d2[1,1]
colnames(top)[6] <- "Mean gene count"
apply(d2$counts,1,sd)
colnames(top)[last]
colnames(top)[end]
colnames(top)[]
colnames(top)
colnames(top)[7] <- "Gene count Std Dev"
sdevs <- apply(d2$counts,1,sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Gene count Std Dev"
stdevs <- apply(d2$counts,1,sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Gene count Std Dev"
stdevs
d2$counts
stdevs <- apply(d2$counts[rownames(top)], 1, sd)
stdevs <- apply(d2$counts[rownames(top), ], 1, sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Gene count Std Dev"
top
colnames(top)[6] <- "Mean_count"
colnames(top)[7] <- "Count_Std_Dev"
top
colnames(top)[5] <- "Gene_Name"
top
kurtosis(d2$counts[rownames(top), ])
install.packages("PerformanceAnalytics")
library(performanceAnalytics) # for kertosis calculations
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
library(performanceAnalytics) # for kertosis calculations
library(PerformanceAnalytics) # for kertosis calculations
kertosis(d2$counts[rownames(top), ])
kurtosis(d2$counts[rownames(top), ])
kurtosises  <- kurtosis(d2$counts[rownames(top), ])
top <- cbind(top, kurtosises)
colnames(top)[7] <- "Count_Kurtosis"
top
top <- topTags(de_glm, n=50)
top
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM("external_gene_name", filters = "ensembl_gene_id", values = rownames(top), ensembl)
top <- cbind(top, geneNames)
colnames(top)[5] <- "Gene_Name"
top
means <- rowMeans(d2$counts[rownames(top), ])
top <- cbind(top, means)
colnames(top)[6] <- "Mean_count"
stdevs <- apply(d2$counts[rownames(top), ], 1, sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Count_Std_Dev"
top
kurtosises  <- kurtosis(d2$counts[rownames(top), ])
cbind(top, kurtosises)
t(kurtosises)
cbind(top, t(kurtosises)
)
View(kurtosises)
rownames(top)
d2$counts[rownames(top), ]
?kurtosis
kurtosises  <- apply(d2$counts[rownames(top), ], 1, kurtosis)
kurtosises
cbind(top, kurtosises)
kurtosises  <- apply(d2$counts[rownames(top), ], 1, kurtosis)
top <- cbind(top, kurtosises)
colnames(top)[7] <- "Count_Kurtosis"
top
colnames(top)[7] <- "Count_Std_Dev"
colnames(top)[8] <- "Count_Kurtosis"
top
q()
q()
library(dplyr) # for subsetting data
library(R.utils) # for unzipping data
library(synapseClient) # to download data
library(edgeR) # for DE analysis
library(biomaRt) # for gene name lookups
library(ggplot2) # for better boxplots
library(reshape2) # for melt for ggplot
library(PerformanceAnalytics) # for kertosis calculations
## Get data and define groups
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# get the transposed readcount file and covariates file from synapse
countFile <- synGet('syn3192634')
covariatesFile <- synGet('syn2875343') # the working dir copy
localCountFilePath <- getFileLocation(countFile)
if(!file.exists(sub('.gz', '', localCountFilePath))) {
gunzip(localCountFilePath)
}
localCountFilePath <- sub('.gz', '', localCountFilePath) #trim the .gz suffix
counts <- read.table(localCountFilePath, header = TRUE, stringsAsFactors = FALSE)
colnames(counts)[1] <- "LP_62_4"
# load covariates file to have handy
covariates <- read.table(getFileLocation(covariatesFile), header = TRUE, stringsAsFactors = FALSE)
# get JNPL3 subset of counts from counts file
JNPL3Counts <- dplyr::select(counts,
one_of(covariates[(covariates$Experiment == "MAPT_P301L"), ]$Mouse_ID))
# define groups
targets <- data.frame(Sample = covariates[(covariates$Experiment == "MAPT_P301L"), ]$Mouse_ID,
Genotype = covariates[(covariates$Experiment == "MAPT_P301L"), ]$Genotype,
Age = as.factor(covariates[(covariates$Experiment == "MAPT_P301L"), ]$Age_months))
group <- factor(paste(targets$Genotype, targets$Age, sep = "."))
JNPL3 <- (counts = JNPL3Counts, group = group)
JNPL3Counts
head(JNPL3Counts)
JNPL3 <- (counts = JNPL3Counts, group = group)
JNPL3 <- DGEList(counts = JNPL3Counts, group = group)
dim(JNPL3)
keep <- rowSums(cpm(JNPL3)>100) >= 2
d <- JNPL3[keep,]
dim(d)
#3133   24
d$samples$lib.size <- colSums(d$counts)
d <- calcNormFactors(d, method = "TMM")
plotMDS(d, method="bcv", col=as.numeric(d$samples$group))
legend("bottomleft", as.character(unique(d$samples$group)), col=1:3, pch=20)
design.mat <- model.matrix(~0 + targets$Genotype + targets$Genotype:targets$Age)
design.mat
colnames(design.mat)
targets
design.mat <- model.matrix(~0 + targets$Genotype + targets$Genotype:targets$Age)
colnames(design.mat)
factor(paste(targets$Age, targets$Genotype, sep=""))
testGroup <- factor(paste(targets$Age, targets$Genotype, sep=""))
testDesign.mat <- model.matrix(~0 + group)
testDesign.mat
design.mat
colnames(design.mat)
class(design.mat)
twoPlus <- c(rep(0, length(design.mat[1,])))
twoPlus
twoPlus <- c(rep(0, length(design.mat[,1])))
twoPlus
targets
twoPlus[16]
twoPlus[16] <- 1
twoPlus
twoPlus[17] <- 1
twoPlus[24] <- 1
q()
require(synapseClient)
synapseLogin()
#query the knowledge portal for all the mayo/ufl/isb data
df <- synQuery('select name,id from file where projectId==\'syn2580853\' and center==\'UFL-Mayo-ISB\'')
#grab all the synapse objects for all mayo/ufl/isb data, but don't download the data
synapseEntity<-lapply(df$file.id,function(x){return(synGet(x,downloadFile = F))})
#extract internal Synapse id from provenance of all files, and add it to the df table
mayoProvenance <- lapply(synapseEntity,function(x){return(synGetActivity(x))})
file.oldId <- sapply(mayoProvenance,function(x){return(x$used[[1]]$reference$targetId)})
df <- cbind(df,file.oldId)
df <- synQuery('select name,id from file where projectId==\'syn2580853\' and center==\'UFL-Mayo-ISB\'')
df
synapseEntity<-lapply(df$file.id,function(x){return(synGet(x,downloadFile = F))})
onWeb('syn3205812')
synapseEntity<-lapply(df$file.id,function(x){return(synGet(x,downloadFile = F))})
onWeb('syn3207163')
synapseEntity<-lapply(df$file.id,function(x){return(synGet(x,downloadFile = F))})
mayoProvenance <- lapply(synapseEntity,function(x){return(synGetActivity(x))})
file.oldId <- sapply(mayoProvenance,function(x){return(sapply(x$used,function(x){return(x$reference$targetId)}))})
names(file.oldId) <- df$file.id
df
file.oldId
sort(df$file.id)
q()
setwd("~/Projects/UO1-AMP/working/project management")
require(synapseClient)
synapseLogin()
#query the knowledge portal for all the mayo/ufl/isb data
df <- synQuery('select name,id from file where projectId==\'syn2580853\' and center==\'UFL-Mayo-ISB\'')
#grab all the synapse objects for all mayo/ufl/isb data, but don't download the data
synapseEntity<-lapply(df$file.id,function(x){return(synGet(x,downloadFile = F))})
mayoProvenance <- lapply(synapseEntity,function(x){return(synGetActivity(x))})
file.oldId <- sapply(mayoProvenance,function(x){return(sapply(x$used,function(x){return(x$reference$targetId)}))})
names(file.oldId) <- df$file.id
View(df)
setwd("~/Projects/UO1-AMP/working/APP work")
library(synapseClient)
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# get the normalized readcount and covariates files from synapse
covariatesFile <- synGet('syn2875343')
# load covariates file to have handy
covariates <- read.table(getFileLocation(covariatesFile),
header = TRUE,
stringsAsFactors = FALSE)
colnames(covariates)
class(covariates)
require(RCurl)
library(RCurl)
myCsv <- getURL("https://docs.google.com/spreadsheet/pub?hl=en_US&hl=en_US&key=0AkuuKBh0jM2TdGppUFFxcEdoUklCQlJhM2kweGpoUUE&single=true&gid=0&output=csv")
myCsv
read.csv(textConnection(myCsv))
myCsv <- getURL("https://docs.google.com/spreadsheets/d/1IQnJheILYLsUgWbwPT7Qmrmi-JngK0R3HTAJUfBYRUg/pubhtml?gid=140125552&single=true&output=csv")
read.csv(textConnection(myCsv))
myCsv <- getURL("https://docs.google.com/spreadsheets/d/1IQnJheILYLsUgWbwPT7Qmrmi-JngK0R3HTAJUfBYRUg/export?output=csv")
read.csv(textConnection(myCsv))
myCsv <- getURL("https://docs.google.com/spreadsheets/d/1IQnJheILYLsUgWbwPT7Qmrmi-JngK0R3HTAJUfBYRUg/export?output%3Dcsv&amp;ltmpl=sheets")
read.csv(textConnection(myCsv))
myCsv <- getURL("https://docs.google.com/spreadsheets/d/1IQnJheILYLsUgWbwPT7Qmrmi-JngK0R3HTAJUfBYRUg/export?output=csv")
myCsv <- getURL("https://docs.google.com/spreadsheets/d/1IQnJheILYLsUgWbwPT7Qmrmi-JngK0R3HTAJUfBYRUg/export?format=csv")
read.csv(textConnection(myCsv))
data.frame()
url1 <- getURL("https://docs.google.com/spreadsheets/d/1IQnJheILYLsUgWbwPT7Qmrmi-JngK0R3HTAJUfBYRUg/export?format=csv")
# “Copy of APP Randomization 9-16-14.xlsx” includes mouse_ID, Line == Experiment, RIN, Genotype (to transform), Sex, age in months; it's at
url2 <- getURL("https://docs.google.com/spreadsheets/d/1X_QRh-xw8q3lZ8IOosHdydxUsoP2Ucgxbfbk0FzMJx4/export?format=csv")
rawCovariates2 <- read.csv(textConnection(url2))
rawCovariates1 <- read.csv(textConnection(url1))
APPCovariates = data.frame()
colnames(rawCovariates1)
calnames(rawCovariates2)
colnames(rawCovariates2)
length(rawCovariates2$Sample.Name)
rawCovariates2$Sample.Name
rawCovariates2[,Sample.Name]
rawCovariates2[,"Sample.Name"]
class(rawCovariates2)
str(rawCovariates2)
rawCovariates1$Sample.Name
str(rawCovariates1)
rawCovariates1$REquest.ID == "REQ-000000002442"
rawCovariates1$Request.ID == "REQ-000000002442"
sum(rawCovariates1$Request.ID == "REQ-000000002442")
rawCovariates2$Mouse.ID
rawCovariates2$Mouse.ID[2:]
rawCovariates2$Mouse.ID[2:end]
rawCovariates2$Mouse.ID[2:129]
APPCovariates = data.frame("Mouse_ID" == rawCovariates2$Mouse.ID[2:129]) #skip first blank entry
APPCovariates
?data.frame
APPCovariates = data.frame("Mouse_ID" = rawCovariates2$Mouse.ID[2:129]) #skip first blank entry
APPCovariates
?cbind
?data.frame
"Mouse_ID" = rawCovariates2$Mouse.ID[2:129]
cbind(APPCovariates, "Experiment" = rawCovariates2$Line[2:120])
cbind(APPCovariates, "Experiment" = rawCovariates2$Line[2:129])
cbind(APPCovariates, "RIN" = rawCovariates2$RIN[2:129])
head(APPCovariates)
APPCovariates
rawCovariates2 <- rawCovariates2[2:129,]
View(rawCovariates2)
View(rawCovariates2)
View(rawCovariates1)
APPCovariates <- cbind(APPCovariates,
"RLIMS.ID" = rawCovariates1[(rawCovariates1$Request.ID == "REQ-000000002442"),
]$Mouse_ID))
APPCovariates <- cbind(APPCovariates,
"RLIMS.ID" = rawCovariates1[(rawCovariates1$Request.ID == "REQ-000000002442"),
]$Mouse_ID)
APPCovariates <- cbind(APPCovariates,
"RLIMS.ID" = rawCovariates1[(rawCovariates1$Request.ID == "REQ-000000002442"),
]$RLIMS.ID)
head(APPCovariates)
View(rawCovariates2)
View(rawCovariates2)
View(rawCovariates1)
View(rawCovariates2)
View(rawCovariates1)
View(rawCovariates2)
rawCovariates1$Sample.Name == rawCovariates2$Sample.ID
rawCovariates1[(rawCovariates1$Request.ID == "REQ-000000002442"),]$Sample.Name == rawCovariates2$Sample.ID
?oneof
match(rawCovariates1[(rawCovariates1$Request.ID == "REQ-000000002442"),]$Sample.Name, rawCovariates2$Sample.ID)
rawCovariates2$Sample.ID[match(rawCovariates1[(rawCovariates1$Request.ID == "REQ-000000002442"),]$Sample.Name, rawCovariates2$Sample.ID), ]
rawCovariates2$Sample.ID[match(rawCovariates1[(rawCovariates1$Request.ID == "REQ-000000002442"),]$Sample.Name, rawCovariates2$Sample.ID)]
rawCovariates2$Sample.ID[match(rawCovariates1[(rawCovariates1$Request.ID == "REQ-000000002442"),]$Sample.Name, rawCovariates2$Sample.ID), ]
match(rawCovariates1[(rawCovariates1$Request.ID == "REQ-000000002442"),]$Sample.Name, rawCovariates2$Sample.ID)
rawCovariates1[(rawCovariates1$Request.ID == "REQ-000000002442"),]$Sample.Name
rawCovariates2$Sample.ID
rawCovariates2$Sample.ID[match(rawCovariates1[(rawCovariates1$Request.ID == "REQ-000000002442"),]$Sample.Name, rawCovariates2$Mouse.ID)]
rawCovariates2$Mouse.ID[match(rawCovariates1[(rawCovariates1$Request.ID == "REQ-000000002442"),]$Sample.Name, rawCovariates2$Mouse.ID)]
?match
rawCovariates2$Mouse.ID[match(rawCovariates1$Sample.Name, rawCovariates2$Mouse.ID)]
rawCovariates1$Mouse.ID[match(rawCovariates1$Sample.Name, rawCovariates2$Mouse.ID)]
rawCovariates2$Mouse.ID[match(rawCovariates2$Mouse.ID, rawCovariates1$Sample.Name)]
rawCovariates2$Mouse.ID[match(rawCovariates1$Sample.Name, APPCovariates2$Mouse_ID)]
rawCovariates2$Mouse.ID[match(rawCovariates1$Sample.Name, APPCovariates$Mouse_ID)]
APPCovariates$Mouse_ID[1]
rawCovariates1$Mouse.ID[match(rawCovariates1$Sample.Name, APPCovariates$Mouse_ID)]
match(rawCovariates1$Sample.Name, APPCovariates$Mouse_ID)
match(APPCovariates$Mouse_ID, rawCovariates1$Sample.Name)
rawCovariates1$Mouse.ID[match(APPCovariates$Mouse_ID, rawCovariates1$Sample.Name)]
rawCovariates1$Sample.Name[match(APPCovariates$Mouse_ID, rawCovariates1$Sample.Name)]
rawCovariates1$RLIMS.ID[match(APPCovariates$Mouse_ID, rawCovariates1$Sample.Name)]
APPCovariates <- cbind(APPCovariates, "RLIMS.ID" =
rawCovariates1$RLIMS.ID[match(APPCovariates$Mouse_ID,
rawCovariates1$Sample.Name)])
APPCovariates
APPCovariates <- cbind(APPCovariates, "Seq.Run.ID" =
rawCovariates1$Seq.Run.ID[match(APPCovariates$Mouse_ID,
rawCovariates1$Sample.Name)])
head(APPCovariates)
APPCovariates = data.frame("Mouse_ID" = rawCovariates2$Mouse.ID)
APPCovariates <- cbind(APPCovariates, "Experiment" = rawCovariates2$Line)
APPCovariates <- cbind(APPCovariates, "RIN" = rawCovariates2$RIN)
APPCovariates <- cbind(APPCovariates, "Genotype" = rawCovariates2$Genotype)
APPCovariates <- cbind(APPCovariates, "Sex" = rawCovariates2$Sex)
APPCovariates <- cbind(APPCovariates, "Age_months" = rawCovariates2$Age)
#note: everything so far is from rawCovariates2, so when getting something from rawCovariates1, be sure it's in the right order
APPCovariates <- cbind(APPCovariates, "RLIMS.ID" =
rawCovariates1$RLIMS.ID[match(APPCovariates$Mouse_ID,
rawCovariates1$Sample.Name)])
APPCovariates <- cbind(APPCovariates, "Seq.Run.ID" =
rawCovariates1$Seq.Run.ID[match(APPCovariates$Mouse_ID,
rawCovariates1$Sample.Name)])
APPCovariates <- cbind(APPCovariates, "Lane.Number" =
rawCovariates1$Lane.Number[match(APPCovariates$Mouse_ID,
rawCovariates1$Sample.Name)])
APPCovariates <- cbind(APPCovariates, "Clusters" =
rawCovariates1$Clusters[match(APPCovariates$Mouse_ID,
rawCovariates1$Sample.Name)])
head(APPCovariates)
head(covariates)
?sub
sub("NTG", ,"-". APPcovariates$Genotype)
sub("NTG","-", APPcovariates$Genotype)
sub("NTG","-", APPCovariates$Genotype)
APPcovariates$Genotype <- sub("NonTg", ,"-". APPCovariates$Genotype)
sub("NonTg", "-", APPCovariates$Genotype)
sub("TG", "+", APPCovariates$Genotype)
APPcovariates$Genotype <- sub("NTG", "-", APPCovariates$Genotype)
APPcovariates$Genotype <- sub("NonTg", "-", APPCovariates$Genotype)
APPcovariates$Genotype <- sub("TG", "+", APPCovariates$Genotype)
APPcovariates$Genotype <- sub("Tg", "+", APPCovariates$Genotype)
APPCovariates$Genotype <- sub("NTG", "-", APPCovariates$Genotype)
APPCovariates$Genotype <- sub("NonTg", "-", APPCovariates$Genotype)
APPCovariates$Genotype <- sub("TG", "+", APPCovariates$Genotype)
APPCovariates$Genotype <- sub("Tg", "+", APPCovariates$Genotype)
APPCovariates$Genotype
head(covariates)
head(APPCovariates)
APPCovariates$Sex <- sub("Female", "F", APPCovariates$Sex)
head(APPCovariates)
APPCovariates$Sex <- sub("Male", "M", APPCovariates$Sex)
APPCovariates$Sex
APPCovariates$Age_months <- sub("mo", "", APPCovariates$Age_months)
head(covariates)
head(APPCovariates)
APPCovariates$Mouse_ID
covariates$Mouse_ID
View(APPCovariates)
View(APPCovariates)
APPCovariates$Mouse_ID
foo <- APPCovariates$Mouse_ID
foo <- data.frame()
View(foo)
View(foo)
foo[1] = 'asdf'
foo
foo$filenames = "asdf"
foo
foo$filename = ['asdf']
foo$filename = ('test')
foo
foo = data.frame(filename="test")
foo
View(foo)
View(foo)
q()
