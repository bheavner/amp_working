topTen <- rownames(topTags(de_glm, n = 10))
toPlot <- d[topTen] #10 rows, 24 columnst
class(toPlot)
str(toPlot)
cbind(toPlot$samples$group, t(toPlot$counts))
test <- cbind(toPlot$samples$group, t(toPlot$counts))
t(test)
melt(t(test))
test
t(test)
test  <- data.frame(toPlot$samples$group, t(toPlot$counts))
teest
test
melt(test)
toPlot2 <- melt(test)
toPlot2
ggplot(toPlot2, aes(factor(variable), value)) + geom_boxplot(aes(fill = Type))
ggplot(toPlot2, aes(factor(variable), value)) + geom_boxplot(aes(fill = toPlot.samples.group))
topTen
topTags(de_glm, n = 10)
de2tags <- rownames(d2)[as.logical(de2)]
plotSmear(de_glm, de.tags=de2tags)
abline(h = c(-2, 2), col = "blue")
-log(2)
de2tags
de2
head(de2)
?decideTestsDGE
ls
topTags(de_glm, n = 10)
top <- topTags(de.tgw, n=50)
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM("external_gene_name", filters = "ensembl_gene_id", values = rownames(top), ensembl)
top <- cbind(top, geneNames)
top <- topTags(de_glm, n=50)
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM("external_gene_name", filters = "ensembl_gene_id", values = rownames(top), ensembl)
top <- cbind(top, geneNames)
top
de_glm
class(d2)
d2$counts
rownames(top)
de2$counts[rownames(top), ]
de2$counts
d2$counts[rownames(top), ]
?mean
mewn(d2$counts[rownames(top), ])
mean(d2$counts[rownames(top), ])
rowMeans(d2$counts[rownames(top), ])
dim(rowMeans(d2$counts[rownames(top), ]))
lenght(rowMeans(d2$counts[rownames(top), ]))
length(rowMeans(d2$counts[rownames(top), ]))
dim(top)
means <- rowMeans(d2$counts[rownames(top), ])
top[1]
top[1,]
top <- cbind(top, means)
top[1,]
colnames(top)
colnames(top)[6]
colnames(d2)
colnames(d)
d[1,1]
d2[1,1]
colnames(top)[6] <- "Mean gene count"
apply(d2$counts,1,sd)
colnames(top)[last]
colnames(top)[end]
colnames(top)[]
colnames(top)
colnames(top)[7] <- "Gene count Std Dev"
sdevs <- apply(d2$counts,1,sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Gene count Std Dev"
stdevs <- apply(d2$counts,1,sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Gene count Std Dev"
stdevs
d2$counts
stdevs <- apply(d2$counts[rownames(top)], 1, sd)
stdevs <- apply(d2$counts[rownames(top), ], 1, sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Gene count Std Dev"
top
colnames(top)[6] <- "Mean_count"
colnames(top)[7] <- "Count_Std_Dev"
top
colnames(top)[5] <- "Gene_Name"
top
kurtosis(d2$counts[rownames(top), ])
install.packages("PerformanceAnalytics")
library(performanceAnalytics) # for kertosis calculations
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
library(performanceAnalytics) # for kertosis calculations
library(PerformanceAnalytics) # for kertosis calculations
kertosis(d2$counts[rownames(top), ])
kurtosis(d2$counts[rownames(top), ])
kurtosises  <- kurtosis(d2$counts[rownames(top), ])
top <- cbind(top, kurtosises)
colnames(top)[7] <- "Count_Kurtosis"
top
top <- topTags(de_glm, n=50)
top
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM("external_gene_name", filters = "ensembl_gene_id", values = rownames(top), ensembl)
top <- cbind(top, geneNames)
colnames(top)[5] <- "Gene_Name"
top
means <- rowMeans(d2$counts[rownames(top), ])
top <- cbind(top, means)
colnames(top)[6] <- "Mean_count"
stdevs <- apply(d2$counts[rownames(top), ], 1, sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Count_Std_Dev"
top
kurtosises  <- kurtosis(d2$counts[rownames(top), ])
cbind(top, kurtosises)
t(kurtosises)
cbind(top, t(kurtosises)
)
View(kurtosises)
rownames(top)
d2$counts[rownames(top), ]
?kurtosis
kurtosises  <- apply(d2$counts[rownames(top), ], 1, kurtosis)
kurtosises
cbind(top, kurtosises)
kurtosises  <- apply(d2$counts[rownames(top), ], 1, kurtosis)
top <- cbind(top, kurtosises)
colnames(top)[7] <- "Count_Kurtosis"
top
colnames(top)[7] <- "Count_Std_Dev"
colnames(top)[8] <- "Count_Kurtosis"
top
q()
q()
library(dplyr) # for subsetting data
library(R.utils) # for unzipping data
library(synapseClient) # to download data
library(edgeR) # for DE analysis
library(biomaRt) # for gene name lookups
library(ggplot2) # for better boxplots
library(reshape2) # for melt for ggplot
library(PerformanceAnalytics) # for kertosis calculations
## Get data and define groups
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# get the transposed readcount file and covariates file from synapse
countFile <- synGet('syn3192634')
covariatesFile <- synGet('syn2875343') # the working dir copy
localCountFilePath <- getFileLocation(countFile)
if(!file.exists(sub('.gz', '', localCountFilePath))) {
gunzip(localCountFilePath)
}
localCountFilePath <- sub('.gz', '', localCountFilePath) #trim the .gz suffix
counts <- read.table(localCountFilePath, header = TRUE, stringsAsFactors = FALSE)
colnames(counts)[1] <- "LP_62_4"
# load covariates file to have handy
covariates <- read.table(getFileLocation(covariatesFile), header = TRUE, stringsAsFactors = FALSE)
# get JNPL3 subset of counts from counts file
JNPL3Counts <- dplyr::select(counts,
one_of(covariates[(covariates$Experiment == "MAPT_P301L"), ]$Mouse_ID))
# define groups
targets <- data.frame(Sample = covariates[(covariates$Experiment == "MAPT_P301L"), ]$Mouse_ID,
Genotype = covariates[(covariates$Experiment == "MAPT_P301L"), ]$Genotype,
Age = as.factor(covariates[(covariates$Experiment == "MAPT_P301L"), ]$Age_months))
group <- factor(paste(targets$Genotype, targets$Age, sep = "."))
JNPL3 <- (counts = JNPL3Counts, group = group)
JNPL3Counts
head(JNPL3Counts)
JNPL3 <- (counts = JNPL3Counts, group = group)
JNPL3 <- DGEList(counts = JNPL3Counts, group = group)
dim(JNPL3)
keep <- rowSums(cpm(JNPL3)>100) >= 2
d <- JNPL3[keep,]
dim(d)
#3133   24
d$samples$lib.size <- colSums(d$counts)
d <- calcNormFactors(d, method = "TMM")
plotMDS(d, method="bcv", col=as.numeric(d$samples$group))
legend("bottomleft", as.character(unique(d$samples$group)), col=1:3, pch=20)
design.mat <- model.matrix(~0 + targets$Genotype + targets$Genotype:targets$Age)
design.mat
colnames(design.mat)
targets
design.mat <- model.matrix(~0 + targets$Genotype + targets$Genotype:targets$Age)
colnames(design.mat)
factor(paste(targets$Age, targets$Genotype, sep=""))
testGroup <- factor(paste(targets$Age, targets$Genotype, sep=""))
testDesign.mat <- model.matrix(~0 + group)
testDesign.mat
design.mat
colnames(design.mat)
class(design.mat)
twoPlus <- c(rep(0, length(design.mat[1,])))
twoPlus
twoPlus <- c(rep(0, length(design.mat[,1])))
twoPlus
targets
twoPlus[16]
twoPlus[16] <- 1
twoPlus
twoPlus[17] <- 1
twoPlus[24] <- 1
q()
require(synapseClient)
synapseLogin()
#query the knowledge portal for all the mayo/ufl/isb data
df <- synQuery('select name,id from file where projectId==\'syn2580853\' and center==\'UFL-Mayo-ISB\'')
#grab all the synapse objects for all mayo/ufl/isb data, but don't download the data
synapseEntity<-lapply(df$file.id,function(x){return(synGet(x,downloadFile = F))})
#extract internal Synapse id from provenance of all files, and add it to the df table
mayoProvenance <- lapply(synapseEntity,function(x){return(synGetActivity(x))})
file.oldId <- sapply(mayoProvenance,function(x){return(x$used[[1]]$reference$targetId)})
df <- cbind(df,file.oldId)
df <- synQuery('select name,id from file where projectId==\'syn2580853\' and center==\'UFL-Mayo-ISB\'')
df
synapseEntity<-lapply(df$file.id,function(x){return(synGet(x,downloadFile = F))})
onWeb('syn3205812')
synapseEntity<-lapply(df$file.id,function(x){return(synGet(x,downloadFile = F))})
onWeb('syn3207163')
synapseEntity<-lapply(df$file.id,function(x){return(synGet(x,downloadFile = F))})
mayoProvenance <- lapply(synapseEntity,function(x){return(synGetActivity(x))})
file.oldId <- sapply(mayoProvenance,function(x){return(sapply(x$used,function(x){return(x$reference$targetId)}))})
names(file.oldId) <- df$file.id
df
file.oldId
sort(df$file.id)
q()
library(synapseClient)
library(RCurl) # to grab google doc covariates files
url1 <- getURL("https://docs.google.com/spreadsheets/d/1IQnJheILYLsUgWbwPT7Qmrmi-JngK0R3HTAJUfBYRUg/export?format=csv")
# “Copy of APP Randomization 9-16-14.xlsx” includes mouse_ID, Line == Experiment, RIN, Genotype (to transform), Sex, age in months; it's at
url2 <- getURL("https://docs.google.com/spreadsheets/d/1X_QRh-xw8q3lZ8IOosHdydxUsoP2Ucgxbfbk0FzMJx4/export?format=csv")
rawCovariates1 <- read.csv(textConnection(url1))
rawCovariates2 <- read.csv(textConnection(url2))
#remove first row (all blanks)
rawCovariates2 <- rawCovariates2[2:129,]
APPCovariates = data.frame("Mouse_ID" = rawCovariates2$Mouse.ID)
#will need to check that these IDs agree with IDs in readcount data
APPCovariates <- cbind(APPCovariates, "Experiment" = rawCovariates2$Line)
APPCovariates <- cbind(APPCovariates, "RIN" = rawCovariates2$RIN)
APPCovariates <- cbind(APPCovariates, "Genotype" = rawCovariates2$Genotype)
APPCovariates <- cbind(APPCovariates, "Sex" = rawCovariates2$Sex)
APPCovariates <- cbind(APPCovariates, "Age_months" = rawCovariates2$Age)
#note: everything so far is from rawCovariates2, so when getting something from rawCovariates1, be sure it's in the right order
APPCovariates <- cbind(APPCovariates, "RLIMS.ID" =
rawCovariates1$RLIMS.ID[match(APPCovariates$Mouse_ID,
rawCovariates1$Sample.Name)])
APPCovariates <- cbind(APPCovariates, "Seq.Run.ID" =
rawCovariates1$Seq.Run.ID[match(APPCovariates$Mouse_ID,
rawCovariates1$Sample.Name)])
APPCovariates <- cbind(APPCovariates, "Lane.Number" =
rawCovariates1$Lane.Number[match(APPCovariates$Mouse_ID,
rawCovariates1$Sample.Name)])
APPCovariates <- cbind(APPCovariates, "Clusters" =
rawCovariates1$Clusters[match(APPCovariates$Mouse_ID,
rawCovariates1$Sample.Name)])
APPCovariates$Genotype <- sub("NTG", "-", APPCovariates$Genotype)
APPCovariates$Genotype <- sub("NonTg", "-", APPCovariates$Genotype)
APPCovariates$Genotype <- sub("TG", "+", APPCovariates$Genotype)
APPCovariates$Genotype <- sub("Tg", "+", APPCovariates$Genotype)
APPCovariates$Sex <- sub("Female", "F", APPCovariates$Sex)
APPCovariates$Sex <- sub("Male", "M", APPCovariates$Sex)
APPCovariates$Age_months <- sub("mo", "", APPCovariates$Age_months)
View(APPCovariates)
View(APPCovariates)
codeFile <- ("TODO")
library(synapseClient)
library(tools)
source("merge_count_files.R")
setwd("~/Projects/UO1-AMP/working/APP work")
source("merge_count_files.R")
synapseLogin()
app_rnaseq_counts <- "syn3439202" # all count files in a zipped directory
# Download files from Synapse
app_count_files <- synGet(app_rnaseq_counts)
app_files_path <- getFileLocation(app_count_files)
app_count_files <- synGet(app_rnaseq_counts)
library(synapseClient)
library(tools)
source("merge_count_files.R")
# Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# Define paths for required Synapse objects
app_rnaseq_counts <- "syn3439202" # all count files in a zipped directory
fileDir <- "/tmp/foo"
tmpDir <- tempdir()
app_files_path <- "/tmp/foo/mouse-app-rnaseq-counts.zip"
unzip(app_files_path, exdir = tmpDir)
inputDir <- file.path(tmpDir, fileDir)
prefix <- "mouse_app_rnaseq"
countTypes <- c("gene_id", "transcript_id")
for (countType in countTypes) {
message(paste("Merging", prefix, "files of count type", countType, "..."))
# Create the merged file and store the output file path
merged_file <- create_merged_file(inputDir, countType, prefix)
# Create a Synapse object for the output file and upload
# point to specific version run
codeFile <- ("TODO")
merged_file_object <- File(path = merged_file,
parentId = app_count_files$properties$parentId)
merged_file_object <- synStore(merged_file_object,
activityName="Build merged readcount file",
used=list(list(name = "merge_mouse_app_rnaseq_counts.R",
url = codeFile, wasExecuted = T),
list(entity=originalCountFile,
wasExecuted=F)))
}
filedir <- ""
for (countType in countTypes) {
message(paste("Merging", prefix, "files of count type", countType, "..."))
# Create the merged file and store the output file path
merged_file <- create_merged_file(inputDir, countType, prefix)
# Create a Synapse object for the output file and upload
# point to specific version run
codeFile <- ("TODO")
merged_file_object <- File(path = merged_file,
parentId = app_count_files$properties$parentId)
merged_file_object <- synStore(merged_file_object,
activityName="Build merged readcount file",
used=list(list(name = "merge_mouse_app_rnaseq_counts.R",
url = codeFile, wasExecuted = T),
list(entity=originalCountFile,
wasExecuted=F)))
}
inputDir
inputDir <- "/var/folders/z3/bm39bty12lzfhhmmstkg7fkr0000gq/T//RtmpFuSoHJ/"
for (countType in countTypes) {
message(paste("Merging", prefix, "files of count type", countType, "..."))
# Create the merged file and store the output file path
merged_file <- create_merged_file(inputDir, countType, prefix)
# Create a Synapse object for the output file and upload
# point to specific version run
codeFile <- ("TODO")
merged_file_object <- File(path = merged_file,
parentId = app_count_files$properties$parentId)
merged_file_object <- synStore(merged_file_object,
activityName="Build merged readcount file",
used=list(list(name = "merge_mouse_app_rnaseq_counts.R",
url = codeFile, wasExecuted = T),
list(entity=originalCountFile,
wasExecuted=F)))
}
for (countType in countTypes) {
message(paste("Merging", prefix, "files of count type", countType, "..."))
# Create the merged file and store the output file path
merged_file <- create_merged_file(inputDir, countType, prefix)
# Create a Synapse object for the output file and upload
# point to specific version run
codeFile <- ("TODO")
#    merged_file_object <- File(path = merged_file,
parentId = app_count_files$properties$parentId)
#    merged_file_object <- synStore(merged_file_object,
#                                   activityName="Build merged readcount file",
#                                   used=list(list(name = "merge_mouse_app_rnaseq_counts.R",
#                                                  url = codeFile, wasExecuted = T),
#                                             list(entity=originalCountFile,
#                                                  wasExecuted=F)))
}
for (countType in countTypes) {
message(paste("Merging", prefix, "files of count type", countType, "..."))
# Create the merged file and store the output file path
merged_file <- create_merged_file(inputDir, countType, prefix)
# Create a Synapse object for the output file and upload
# point to specific version run
codeFile <- ("TODO")
}
localFilePath <- “/var/folders/z3/bm39bty12lzfhhmmstkg7fkr0000gq/T/RtmpFuSoHJ/mouse_app_rnaseq_gene_id_counts.txt.gz”
localFilePath <- "/var/folders/z3/bm39bty12lzfhhmmstkg7fkr0000gq/T/RtmpFuSoHJ/mouse_app_rnaseq_gene_id_counts.txt.gz"
if(!file.exists(substr(localFilePath, 1, nchar(localFilePath) - 3))) {
gunzip(localFilePath)
}
localFilePath <- sub('.gz', '', localFilePath) #trim the .gz suffix
Counts <- read.table(localFilePath, header = TRUE)
colnames(Counts)
library(RCurl) # to grab google doc covariates files
url1 <- getURL("https://docs.google.com/spreadsheets/d/1IQnJheILYLsUgWbwPT7Qmrmi-JngK0R3HTAJUfBYRUg/export?format=csv")
# “Copy of APP Randomization 9-16-14.xlsx” includes mouse_ID, Line == Experiment, RIN, Genotype (to transform), Sex, age in months; it's at
url2 <- getURL("https://docs.google.com/spreadsheets/d/1X_QRh-xw8q3lZ8IOosHdydxUsoP2Ucgxbfbk0FzMJx4/export?format=csv")
rawCovariates1 <- read.csv(textConnection(url1))
rawCovariates2 <- read.csv(textConnection(url2))
#remove first row ov rawCovariates2 (all blanks)
rawCovariates2 <- rawCovariates2[2:129,]
APPCovariates = data.frame("Mouse_ID" = rawCovariates2$Mouse.ID)
APPCovariates <- cbind(APPCovariates, "Experiment" = rawCovariates2$Line)
APPCovariates <- cbind(APPCovariates, "RIN" = rawCovariates2$RIN)
APPCovariates <- cbind(APPCovariates, "Genotype" = rawCovariates2$Genotype)
APPCovariates <- cbind(APPCovariates, "Sex" = rawCovariates2$Sex)
APPCovariates <- cbind(APPCovariates, "Age_months" = rawCovariates2$Age)
#note: everything so far is from rawCovariates2, so when getting something from rawCovariates1, be sure it's in the right order
APPCovariates <- cbind(APPCovariates, "RLIMS.ID" =
rawCovariates1$RLIMS.ID[match(APPCovariates$Mouse_ID,
rawCovariates1$Sample.Name)])
APPCovariates <- cbind(APPCovariates, "Seq.Run.ID" =
rawCovariates1$Seq.Run.ID[match(APPCovariates$Mouse_ID,
rawCovariates1$Sample.Name)])
APPCovariates <- cbind(APPCovariates, "Lane.Number" =
rawCovariates1$Lane.Number[match(APPCovariates$Mouse_ID,
rawCovariates1$Sample.Name)])
APPCovariates <- cbind(APPCovariates, "Clusters" =
rawCovariates1$Clusters[match(APPCovariates$Mouse_ID,
rawCovariates1$Sample.Name)])
APPCovariates$Genotype <- sub("NTG", "-", APPCovariates$Genotype)
APPCovariates$Genotype <- sub("NonTg", "-", APPCovariates$Genotype)
APPCovariates$Genotype <- sub("TG", "+", APPCovariates$Genotype)
APPCovariates$Genotype <- sub("Tg", "+", APPCovariates$Genotype)
APPCovariates$Sex <- sub("Female", "F", APPCovariates$Sex)
APPCovariates$Sex <- sub("Male", "M", APPCovariates$Sex)
APPCovariates$Age_months <- sub("mo", "", APPCovariates$Age_months)
#TODO:
colnames(Counts)
colnames(APPCovariates)
APPCovariates$Mouse_ID
View(APPCovariates)
View(APPCovariates)
sub("[\#]", "_", APPCovariates$Mouse_ID)
sub("[#]", "_", APPCovariates$Mouse_ID)
sub("[ ]", "_", APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID <- sub("[#]", "_", APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID <- sub("[ ]", "_", APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID <- sub('-', '.', APPCovariates$Mouse_ID)
# finally, I want to prepend all IDs that start with a number with "X". My regex-fu is weak:
APPCovariates$Mouse_ID <- sub('^1', 'X1', APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID <- sub('^2', 'X1', APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID <- sub('^3', 'X3', APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID
colnames(Counts)
setdiff(APPCovariates$Mouse_ID, colnames(Counts))
?setdiff
setdiff(colnames(Counts), APPCovariates$Mouse_ID)
View(APPCovariates)
View(APPCovariates)
APPCovariates = data.frame("Mouse_ID" = rawCovariates2$Mouse.ID)
APPCovariates <- cbind(APPCovariates, "Experiment" = rawCovariates2$Line)
APPCovariates <- cbind(APPCovariates, "RIN" = rawCovariates2$RIN)
APPCovariates <- cbind(APPCovariates, "Genotype" = rawCovariates2$Genotype)
APPCovariates <- cbind(APPCovariates, "Sex" = rawCovariates2$Sex)
APPCovariates <- cbind(APPCovariates, "Age_months" = rawCovariates2$Age)
#note: everything so far is from rawCovariates2, so when getting something from rawCovariates1, be sure it's in the right order
APPCovariates <- cbind(APPCovariates, "RLIMS.ID" =
rawCovariates1$RLIMS.ID[match(APPCovariates$Mouse_ID,
rawCovariates1$Sample.Name)])
APPCovariates <- cbind(APPCovariates, "Seq.Run.ID" =
rawCovariates1$Seq.Run.ID[match(APPCovariates$Mouse_ID,
rawCovariates1$Sample.Name)])
APPCovariates <- cbind(APPCovariates, "Lane.Number" =
rawCovariates1$Lane.Number[match(APPCovariates$Mouse_ID,
rawCovariates1$Sample.Name)])
APPCovariates <- cbind(APPCovariates, "Clusters" =
rawCovariates1$Clusters[match(APPCovariates$Mouse_ID,
rawCovariates1$Sample.Name)])
#TODO: filenames - do I need them? These are fastq files, so theree are two per sample - R1 and R2...
#APPCovariates <- cbind(APPCovariates, "Raw_RNAseq_file_name")
APPCovariates$Genotype <- sub("NTG", "-", APPCovariates$Genotype)
APPCovariates$Genotype <- sub("NonTg", "-", APPCovariates$Genotype)
APPCovariates$Genotype <- sub("TG", "+", APPCovariates$Genotype)
APPCovariates$Genotype <- sub("Tg", "+", APPCovariates$Genotype)
APPCovariates$Sex <- sub("Female", "F", APPCovariates$Sex)
APPCovariates$Sex <- sub("Male", "M", APPCovariates$Sex)
APPCovariates$Age_months <- sub("mo", "", APPCovariates$Age_months)
# Reformat/rename IDs for consistency with readcount data
# First, replace space and # with _
APPCovariates$Mouse_ID <- sub("[#]", "_", APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID <- sub("[ ]", "_", APPCovariates$Mouse_ID)
# next, replace - with . in all cases
APPCovariates$Mouse_ID <- sub('-', '.', APPCovariates$Mouse_ID)
# finally, I want to prepend all IDs that start with a number with "X". My regex-fu is weak:
APPCovariates$Mouse_ID <- sub('^1', 'X1', APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID <- sub('^2', 'X2', APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID <- sub('^3', 'X3', APPCovariates$Mouse_ID)
setdiff(colnames(Counts), APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID <- sub('^4', 'X4', APPCovariates$Mouse_ID)
setdiff(colnames(Counts), APPCovariates$Mouse_ID)
setdiff(colnames(Counts), APPCovariates$Mouse_ID)
setdiff(APPCovariates$Mouse_ID, colnames(Counts))
APPCovariates = data.frame("Mouse_ID" = rawCovariates2$Mouse.ID)
APPCovariates
APPCovariates$Mouse_ID <- sub("[#]", "_", APPCovariates$Mouse_ID)
APPCovariates
APPCovariates$Mouse_ID <- sub("[ ]", "_", APPCovariates$Mouse_ID)
APPCovariates
APPCovariates$Mouse_ID <- sub("[ ]", "_", APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID <- sub('-', '.', APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID <- sub('^1', 'X1', APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID <- sub('^2', 'X2', APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID <- sub('^3', 'X3', APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID <- sub('^4', 'X4', APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID
setdiff(colnames(Counts), APPCovariates$Mouse_ID)
colnames(Counts)
APPCovariates$Mouse_ID <- sub('X181710', 'X181710.1', APPCovariates$Mouse_ID)
setdiff(colnames(Counts), APPCovariates$Mouse_ID)
r
APPCovariates$Mouse_ID <- sub("[#]", "_", APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID <- sub("[ ]", "_", APPCovariates$Mouse_ID)
# next, replace - with . in all cases
APPCovariates$Mouse_ID <- sub('-', '.', APPCovariates$Mouse_ID)
# finally, I want to prepend all IDs that start with a number with "X". My regex-fu is weak:
APPCovariates$Mouse_ID <- sub('^1', 'X1', APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID <- sub('^2', 'X2', APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID <- sub('^3', 'X3', APPCovariates$Mouse_ID)
APPCovariates$Mouse_ID <- sub('^4', 'X4', APPCovariates$Mouse_ID)
# then there's a weird one - X181710 should be X181710.1
setdiff(colnames(Counts), APPCovariates$Mouse_ID)
colnames(Counts)
APPCovariates$Mouse_ID
?sub
APPCovariates$Mouse_ID == "X181710"
q()
