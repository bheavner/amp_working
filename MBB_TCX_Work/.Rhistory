test
t(test)
test  <- data.frame(toPlot$samples$group, t(toPlot$counts))
teest
test
melt(test)
toPlot2 <- melt(test)
toPlot2
ggplot(toPlot2, aes(factor(variable), value)) + geom_boxplot(aes(fill = Type))
ggplot(toPlot2, aes(factor(variable), value)) + geom_boxplot(aes(fill = toPlot.samples.group))
topTen
topTags(de_glm, n = 10)
de2tags <- rownames(d2)[as.logical(de2)]
plotSmear(de_glm, de.tags=de2tags)
abline(h = c(-2, 2), col = "blue")
-log(2)
de2tags
de2
head(de2)
?decideTestsDGE
ls
topTags(de_glm, n = 10)
top <- topTags(de.tgw, n=50)
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM("external_gene_name", filters = "ensembl_gene_id", values = rownames(top), ensembl)
top <- cbind(top, geneNames)
top <- topTags(de_glm, n=50)
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM("external_gene_name", filters = "ensembl_gene_id", values = rownames(top), ensembl)
top <- cbind(top, geneNames)
top
de_glm
class(d2)
d2$counts
rownames(top)
de2$counts[rownames(top), ]
de2$counts
d2$counts[rownames(top), ]
?mean
mewn(d2$counts[rownames(top), ])
mean(d2$counts[rownames(top), ])
rowMeans(d2$counts[rownames(top), ])
dim(rowMeans(d2$counts[rownames(top), ]))
lenght(rowMeans(d2$counts[rownames(top), ]))
length(rowMeans(d2$counts[rownames(top), ]))
dim(top)
means <- rowMeans(d2$counts[rownames(top), ])
top[1]
top[1,]
top <- cbind(top, means)
top[1,]
colnames(top)
colnames(top)[6]
colnames(d2)
colnames(d)
d[1,1]
d2[1,1]
colnames(top)[6] <- "Mean gene count"
apply(d2$counts,1,sd)
colnames(top)[last]
colnames(top)[end]
colnames(top)[]
colnames(top)
colnames(top)[7] <- "Gene count Std Dev"
sdevs <- apply(d2$counts,1,sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Gene count Std Dev"
stdevs <- apply(d2$counts,1,sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Gene count Std Dev"
stdevs
d2$counts
stdevs <- apply(d2$counts[rownames(top)], 1, sd)
stdevs <- apply(d2$counts[rownames(top), ], 1, sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Gene count Std Dev"
top
colnames(top)[6] <- "Mean_count"
colnames(top)[7] <- "Count_Std_Dev"
top
colnames(top)[5] <- "Gene_Name"
top
kurtosis(d2$counts[rownames(top), ])
install.packages("PerformanceAnalytics")
library(performanceAnalytics) # for kertosis calculations
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
library(performanceAnalytics) # for kertosis calculations
library(PerformanceAnalytics) # for kertosis calculations
kertosis(d2$counts[rownames(top), ])
kurtosis(d2$counts[rownames(top), ])
kurtosises  <- kurtosis(d2$counts[rownames(top), ])
top <- cbind(top, kurtosises)
colnames(top)[7] <- "Count_Kurtosis"
top
top <- topTags(de_glm, n=50)
top
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM("external_gene_name", filters = "ensembl_gene_id", values = rownames(top), ensembl)
top <- cbind(top, geneNames)
colnames(top)[5] <- "Gene_Name"
top
means <- rowMeans(d2$counts[rownames(top), ])
top <- cbind(top, means)
colnames(top)[6] <- "Mean_count"
stdevs <- apply(d2$counts[rownames(top), ], 1, sd)
top <- cbind(top, stdevs)
colnames(top)[7] <- "Count_Std_Dev"
top
kurtosises  <- kurtosis(d2$counts[rownames(top), ])
cbind(top, kurtosises)
t(kurtosises)
cbind(top, t(kurtosises)
)
View(kurtosises)
rownames(top)
d2$counts[rownames(top), ]
?kurtosis
kurtosises  <- apply(d2$counts[rownames(top), ], 1, kurtosis)
kurtosises
cbind(top, kurtosises)
kurtosises  <- apply(d2$counts[rownames(top), ], 1, kurtosis)
top <- cbind(top, kurtosises)
colnames(top)[7] <- "Count_Kurtosis"
top
colnames(top)[7] <- "Count_Std_Dev"
colnames(top)[8] <- "Count_Kurtosis"
top
q()
q()
library(dplyr) # for subsetting data
library(R.utils) # for unzipping data
library(synapseClient) # to download data
library(edgeR) # for DE analysis
library(biomaRt) # for gene name lookups
library(ggplot2) # for better boxplots
library(reshape2) # for melt for ggplot
library(PerformanceAnalytics) # for kertosis calculations
## Get data and define groups
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# get the transposed readcount file and covariates file from synapse
countFile <- synGet('syn3192634')
covariatesFile <- synGet('syn2875343') # the working dir copy
localCountFilePath <- getFileLocation(countFile)
if(!file.exists(sub('.gz', '', localCountFilePath))) {
gunzip(localCountFilePath)
}
localCountFilePath <- sub('.gz', '', localCountFilePath) #trim the .gz suffix
counts <- read.table(localCountFilePath, header = TRUE, stringsAsFactors = FALSE)
colnames(counts)[1] <- "LP_62_4"
# load covariates file to have handy
covariates <- read.table(getFileLocation(covariatesFile), header = TRUE, stringsAsFactors = FALSE)
# get JNPL3 subset of counts from counts file
JNPL3Counts <- dplyr::select(counts,
one_of(covariates[(covariates$Experiment == "MAPT_P301L"), ]$Mouse_ID))
# define groups
targets <- data.frame(Sample = covariates[(covariates$Experiment == "MAPT_P301L"), ]$Mouse_ID,
Genotype = covariates[(covariates$Experiment == "MAPT_P301L"), ]$Genotype,
Age = as.factor(covariates[(covariates$Experiment == "MAPT_P301L"), ]$Age_months))
group <- factor(paste(targets$Genotype, targets$Age, sep = "."))
JNPL3 <- (counts = JNPL3Counts, group = group)
JNPL3Counts
head(JNPL3Counts)
JNPL3 <- (counts = JNPL3Counts, group = group)
JNPL3 <- DGEList(counts = JNPL3Counts, group = group)
dim(JNPL3)
keep <- rowSums(cpm(JNPL3)>100) >= 2
d <- JNPL3[keep,]
dim(d)
#3133   24
d$samples$lib.size <- colSums(d$counts)
d <- calcNormFactors(d, method = "TMM")
plotMDS(d, method="bcv", col=as.numeric(d$samples$group))
legend("bottomleft", as.character(unique(d$samples$group)), col=1:3, pch=20)
design.mat <- model.matrix(~0 + targets$Genotype + targets$Genotype:targets$Age)
design.mat
colnames(design.mat)
targets
design.mat <- model.matrix(~0 + targets$Genotype + targets$Genotype:targets$Age)
colnames(design.mat)
factor(paste(targets$Age, targets$Genotype, sep=""))
testGroup <- factor(paste(targets$Age, targets$Genotype, sep=""))
testDesign.mat <- model.matrix(~0 + group)
testDesign.mat
design.mat
colnames(design.mat)
class(design.mat)
twoPlus <- c(rep(0, length(design.mat[1,])))
twoPlus
twoPlus <- c(rep(0, length(design.mat[,1])))
twoPlus
targets
twoPlus[16]
twoPlus[16] <- 1
twoPlus
twoPlus[17] <- 1
twoPlus[24] <- 1
q()
require(synapseClient)
synapseLogin()
#query the knowledge portal for all the mayo/ufl/isb data
df <- synQuery('select name,id from file where projectId==\'syn2580853\' and center==\'UFL-Mayo-ISB\'')
#grab all the synapse objects for all mayo/ufl/isb data, but don't download the data
synapseEntity<-lapply(df$file.id,function(x){return(synGet(x,downloadFile = F))})
#extract internal Synapse id from provenance of all files, and add it to the df table
mayoProvenance <- lapply(synapseEntity,function(x){return(synGetActivity(x))})
file.oldId <- sapply(mayoProvenance,function(x){return(x$used[[1]]$reference$targetId)})
df <- cbind(df,file.oldId)
df <- synQuery('select name,id from file where projectId==\'syn2580853\' and center==\'UFL-Mayo-ISB\'')
df
synapseEntity<-lapply(df$file.id,function(x){return(synGet(x,downloadFile = F))})
onWeb('syn3205812')
synapseEntity<-lapply(df$file.id,function(x){return(synGet(x,downloadFile = F))})
onWeb('syn3207163')
synapseEntity<-lapply(df$file.id,function(x){return(synGet(x,downloadFile = F))})
mayoProvenance <- lapply(synapseEntity,function(x){return(synGetActivity(x))})
file.oldId <- sapply(mayoProvenance,function(x){return(sapply(x$used,function(x){return(x$reference$targetId)}))})
names(file.oldId) <- df$file.id
df
file.oldId
sort(df$file.id)
q()
q()
setwd("~/Projects/UO1-AMP/working/MBB_TCX_Work")
library(synapseClient) # for synapse upload
library(RCurl) # to grab google doc covariates files
require(gdata) # to read .xlsx file - http://www.r-bloggers.com/read-excel-files-from-r/
source("uploadToSynapse.R") # to annotate and upload file
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
install.packages("gdata")
library(gdata) # to read .xlsx file -  install.packages("gdata")
fullSampleInformation <- synGet("syn3163262")
clinicalVars <- synGet("syn3163736")
techVars <- synGet("syn3163738")
sampleGroups <- synGet("syn3163739")
fullSampleInformationFilePath <- getFileLocation(fullSampleInformation)
clinicalVarsFilePath <- getFileLocation(clinicalVars)
techVarsFilePath <- getFileLocation(techVars)
sampleGroupsFilePath <- getFileLocation(sampleGroups)
clinical <- read.table(localFilePath, header = TRUE)
tech <- read.table(localFilePath, header = TRUE)
groups <- read.table(localFilePath, header = TRUE)
clinical <- read.table(clinicalVarsFilePath, header = TRUE)
tech <- read.table(techVarsFilePath, header = TRUE)
groups <- read.table(sampleGroupsFilePath, header = TRUE)
test <- read.xls (fullSampleInformationFilePath, sheet = 2, header = TRUE)
test <- read.xls (fullSampleInformationFilePath, sheet = 2, header = FALSE)
test <- read.xls (fullSampleInformationFilePath, sheet = 1, header = TRUE)
View(test)
View(test)
str(test)
?read.xls
rerunSamples  <- synGet("syn3523879")
rerunSamplesFilePath <- getFileLocation(sampleGroups)
test <- read.xls(rerunSamplesFilePath, sheet = 2, header = TRUE)
rerunSamplesFilePath <- getFileLocation(sampleGroups)
test <- read.xls(rerunSamplesFilePath, sheet = 2, header = TRUE)
rerunSamplesFilePath <- getFileLocation(rerunSamples)
test <- read.xls(rerunSamplesFilePath, sheet = 2, header = TRUE)
View(test)
View(test)
fullSample <- read.xls(fullSampleInformationFilePath, sheet = 1, header = TRUE)
rerun <- read.xls(rerunSamplesFilePath, sheet = 2, header = TRUE)
View(fullSample)
View(fullSample)
rushBroadCovariates$Sample_ID  <- fullSample[fullSample@Source == "RUSH-BROAD", fullSample$RNASubjectID]
fullSample
colNames(fullSample)
colnames(fullSample)
rushBroadCovariates$Sample_ID  <- fullSample[fullSample$Source == "RUSH-BROAD", fullSample$RNASubjectID]
rushBroadCovariates <- df()
?df
fullSample[fullSample$Source == "RUSH-BROAD", fullSample$RNASubjectID]
str(fullSample$Source)
?readTable
?read.Table
?read.table
fullSample <- read.xls(fullSampleInformationFilePath, sheet = 1, header = TRUE, stringsAsFactors = FALSE)
str(fullSample$Source)
rushBroadCovariates$Sample_ID  <- fullSample[fullSample$Source == "RUSH-BROAD", fullSample$RNASubjectID]
fullSample[fullSample$Source == "RUSH-BROAD", fullSample$RNASubjectID]
fullSample$Source
fullSample$Source[229]
fullSample$Source[229] == "RUSH-BROAD"
fullSample[fullSample$Source == "RUSH-BROAD", fullSample$RNASubjectID]
fullSample[fullSample$Source == "RUSH-BROAD",]
rushBroadCovariates$Sample_ID  <- fullSample[fullSample$Source == "RUSH-BROAD", fullSample$RNASubjectId]
fullSample[fullSample$Source == "RUSH-BROAD", fullSample$RNASubjectId]
fullSample[fullSample$Source == "RUSH-BROAD", fullSample$RNASubjectId]
colname(fullSample)
colnames(fullSample)
fullSample[fullSample$Source == "RUSH-BROAD", RNASubjectId]
fullSample[fullSample$Source == "RUSH-BROAD", fullSample$RNASubjectId]
fullSample[fullSample$Source == "RUSH-BROAD", ]
rushBroadCovariates  <- fullSample[fullSample$Source == "RUSH-BROAD", fullSample$RNASubjectId]
rushBroadCovariates  <- fullSample[fullSample$Source == "RUSH-BROAD", ]
rushBroadCovariates
rushBroadCovariates$RNASubjectId
fullSample[fullSample$Source == "RUSH-BROAD", ]
fullSample[fullSample$Source == "RUSH-BROAD", fullSample$RNAId]
fullSample[fullSample$Source == "RUSH-BROAD", 1]
fullSample[fullSample$Source == "RUSH-BROAD", 2]
fullSample[fullSample$Source == "RUSH-BROAD", ]
colnames(fullSample[fullSample$Source == "RUSH-BROAD", ])
fullSample[fullSample$Source == "RUSH-BROAD", RNAId]
fullSample[fullSample$Source == "RUSH-BROAD", 'RNAId']
rushBroadCovariates  <- fullSample[fullSample$Source == "RUSH-BROAD", "RNASubjectId"]
ruxhBroadCovariates
rushBroadCovariates
rushBroadSamples <- fullSample[fullSample$Source == "RUSH-BROAD", "RNASubjectId"]
rushBroadCovariates  <- df(rushBroadSamples)
?df
data.frame
rushBroadCovariates  <- data.frame()
rushBroadCovariates$Samples <- fullSample[fullSample$Source == "RUSH-BROAD", "RNASubjectId"]
?cappend
?append
View(rushBroadCovariates)
View(fullSample)
View(fullSample)
View(clinical)
View(clinical)
View(tech)
View(tech)
groups <- read.table(sampleGroupsFilePath, header = TRUE, stringsAsFactors = FALSE)
library(synapseClient) # for synapse upload
library(RCurl) # to grab google doc covariates files
library(gdata) # to read .xlsx file -  install.packages("gdata")
synapseLogin()
library(synapseClient) # for synapse upload
library(RCurl) # to grab google doc covariates files
library(gdata) # to read .xlsx file -  install.packages("gdata")
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# Grab existing info for inspection and assembly (James organized this across subdirectories in syn2924444)
#RNASeq_fullSampleInformation_NET.xlsx syn3163262
# has RNASubjectID, RNAId, Source, tissue, final diagnosis, RIN, unfiltered age, sex, and Braak
fullSampleInformation <- synGet("syn3163262")
fullSampleInformationFilePath <- getFileLocation(fullSampleInformation)
fullSample <- read.xls(fullSampleInformationFilePath, sheet = 1, header = TRUE, stringsAsFactors = FALSE)
#U01_288_AUT_TCx_RNAseq_Covars-Drives_02-06-2015_1447.xlsx syn3523879
# includes SubjectID, SampleID, seq Run ID, DriveA_FileName1, DriveA_FileName2, DriveB_FileName1, and DriveB_Filename2
rerunSamples  <- synGet("syn3523879")
rerunSamplesFilePath <- getFileLocation(rerunSamples)
rerun <- read.xls(rerunSamplesFilePath, sheet = 2, header = TRUE, stringsAsFactors = FALSE)
rushBroadSamples <- fullSample[fullSample$Source == "RUSH-BROAD", "RNASubjectId"]
library(dplyr) # for subsetting data
?dplyr::select
dplyr::select(rerun$SubjectID, one_of(rushBroadSamples))
ruxhBroadSamples
rushBroadSamples
rerun
colnames(rerun)
rerun[1,]
colnames(rerun)  <- rerun[1,]
colnames(rerun)
dim(rerun)
rerun  <- rerun[2:62,]
rerun[1]
rerun[1,]
dplyr::select(rerun$SubjectID, one_of(rushBroadSamples))
rerun <- read.xls(rerunSamplesFilePath, sheet = 1, header = TRUE, stringsAsFactors = FALSE)
colnames(rerun)
dplyr::select(rerun$SubjectID, one_of(rushBroadSamples))
rushBroadSamples
rerun$SubjectID
as.factor(rerun$SubjectID)
dplyr::select(as.factor(rerun$SubjectID), one_of(as.factor(rushBroadSamples))
)
s.factor(rerun$SubjectID)
as.factor(rerun$SubjectID)
as.factor(rushBroadSamples)
dplyr::select(as.factor(rerun$SubjectID), one_of(rushBroadSamples))
dplyr::select(rerun$SubjectID, one_of(rushBroadSamples))
rushBroadSamples <- fullSample[fullSample$Source == "RUSH-BROAD", "RNASubjectId"]
intersect(rushBroadSamples, rerun$SubjectID)
str(rushBroadSamples)
dim(rushBroadSamples)
rushBroadSamples
rushBroadSamples <- fullSample[fullSample$Source == "RUSH-BROAD", "RNASubjectId"]
rushBroadSamples
length(rushBroadSamples)
length(intersect(rushBroadSamples, rerun$SubjectID))
rerun[fullSample$Source == "RUSH-BROAD", "DriveA_FileName1"]
rushBroadFile1 <- rerun[fullSample$Source == "RUSH-BROAD", "DriveA_FileName1"]
rushBroadFile2 <- rerun[fullSample$Source == "RUSH-BROAD", "DriveA_FileName2"]
rushBroadFile3 <- rerun[fullSample$Source == "RUSH-BROAD", "DriveB_FileName1"]
rushBroadFile4 <- rerun[fullSample$Source == "RUSH-BROAD", "DriveB_FileName2"]
c(rushBroadFile1, rushBroadFile2, rushBroadFile3, rushBroadFile4)
(rushBroadFile1, rushBroadFile2, rushBroadFile3, rushBroadFile4)
cbind(rushBroadFile1, rushBroadFile2, rushBroadFile3, rushBroadFile4)
files  <- cbind(rushBroadFile1, rushBroadFile2, rushBroadFile3, rushBroadFile4)
files
View(files)
View(files)
?merge
paste(rushBroadfiles[,1], rushBroadfiles[,2])
rushBroadFiles  <- cbind(rushBroadFile1, rushBroadFile2, rushBroadFile3, rushBroadFile4)
paste(rushBroadFiles[,1], rushBroadFiles[,2])
paste(rushBroadFiles[,1], rushBroadFiles[,3])
paste(rushBroadFiles[!isnull,1], rushBroadFiles[,3])
?is.null
paste(rushBroadFiles[!is.null,1], rushBroadFiles[,3])
is.null(rushBroadFiles[,1])
is.null(rushBroadFiles)
is.null(rushBroadFiles[,1])
(rushBroadFiles[1:4,1], rushBroadFiles[5:10,3])
c(rushBroadFiles[1:4,1], rushBroadFiles[5:10,3])
View(rushBroadFiles)
View(rushBroadFiles)
rushBroadFile1[1:4,]
rushBroadFile1[1:4]
rushBroadFile1[5]
is.null(rushBroadFile1)
is.null(rushBroadFile1[])
class(rushBroadFile1)
rushBroadFiles <- cbind(rushBroadFile1[1:4],
rushBroadFile2[1:4],
rushBroadFile3[5:10],
rushBroadFile4[5:10])
rushBroadFiles <- rbind(rushBroadFile1[1:4],
rushBroadFile2[1:4],
rushBroadFile3[5:10],
rushBroadFile4[5:10])
rushBroadFile1[1:4]
rushBroadFile3[5:10]
rushBroadFiles <- c(rushBroadFile1[1:4],
rushBroadFile2[1:4],
rushBroadFile3[5:10],
rushBroadFile4[5:10])
rushBroadFiles
str(rushBroadFile1)
rushBroadFile1
rushBroadFile1[!is.null,]
!is.null(rushBroadFile1[])
is.null(rushBroadFile1[,])
is.null(rushBroadFile1[,1])
is.null(rushBroadFile1[1:10])
is.null(rushBroadFile1[1])
is.null(rushBroadFile1[2])
is.null(rushBroadFile1[5])
rushBroadFile1[5]
rushBroadFile1[5] == "NULL"
rushBroadFile1[! == "NULL"]
rushBroadFile1 == "NULL"
rushBroadFile1 !== "NULL"
rushBroadFile1 != "NULL"
rushBroadFile1[rushBroadFile1 != "NULL"]
rushBroadFiles <- c(rushBroadFile1[rushBroadFile1 != "NULL"],
rushBroadFile2[rushBroadFile2 != "NULL"],
rushBroadFile3[rushBroadFile3 != "NULL"],
rushBroadFile4[rushBroadFile4 != "NULL"])
rushBroadFiles
rushBroadSamples
MBBSamples <- rerun[rerun$Source == "BannerSunHealth_TomBeach" | rerun$Source == "MayoBrainBank_Dickson", "RNASubjectId"]
length(MBBSamples) #10
rerun$Source == "BannerSunHealth_TomBeach"
rerun$Source == "MayoBrainBank_Dickson"
rerun$Source == "BannerSunHealth_TomBeach" | rerun$Source == "MayoBrainBank_Dickson"
MBBSamples <- rerun[(rerun$Source == "BannerSunHealth_TomBeach" | rerun$Source == "MayoBrainBank_Dickson"), "RNASubjectId"]
length(MBBSamples) #10
rerun$Source == ("BannerSunHealth_TomBeach" | "MayoBrainBank_Dickson")
rerun[(rerun$Source == "BannerSunHealth_TomBeach" | rerun$Source == "MayoBrainBank_Dickson"), "RNASubjectId"]
(rerun$Source == "BannerSunHealth_TomBeach" | rerun$Source == "MayoBrainBank_Dickson")
MBBSamples <- rerun[(rerun$Source == "BannerSunHealth_TomBeach" | rerun$Source == "MayoBrainBank_Dickson"), SubjectID]
colnames(rerun)
MBBSamples <- rerun[(rerun$Source == "BannerSunHealth_TomBeach" | rerun$Source == "MayoBrainBank_Dickson"), "SubjectID"]
length(MBBSamples)
MBBSamples <- (rerun$Source == "BannerSunHealth_TomBeach" | rerun$Source == "MayoBrainBank_Dickson")
MBBSampleIds <- rerun(MBBSamples, "SubjectID")
MBBSampleIds <- rerun[MBBSamples, "SubjectID"]
length(MBBSampleIds) #278. Yay!
MBBSamples <- (rerun$Source == "BannerSunHealth_TomBeach" | rerun$Source == "MayoBrainBank_Dickson")
MBBSampleIds <- rerun[MBBSamples, "SubjectID"]
length(MBBSampleIds) #278. Yay!
MBBFile1 <- rerun[MBBSamples, "DriveA_FileName1"]
MBBFile2 <- rerun[MBBSamples, "DriveA_FileName2"]
MBBFile3 <- rerun[MBBSamples, "DriveB_FileName1"]
MBBFile4 <- rerun[MBBSamples, "DriveB_FileName2"]
MBBFiles <- c(MBBFile1[MBBFile1 != "NULL"],
MBBFile2[MBBFile2 != "NULL"],
MBBFile3[MBBFile3 != "NULL"],
MBBFile4[MBBFile4 != "NULL"])
length(MBBFiles)
278*2
length(MBBFile1)
length(MBBFile2)
length(MBBFile3)
length(MBBFile4)
test <- c(MBBFile1, MBBFile2, MBBFile3, MBBFile4)
test
test <- cbind(MBBFile1, MBBFile2, MBBFile3, MBBFile4)
View(test)
View(test)
MBBSampleIds[146]
568/2
284-276
?intersect
?intersect
intersect(MBBFile1[MBBFile1 != "NULL"],
MBBFile2[MBBFile2 != "NULL"])
MBBFile1
intersect(MBBFile1,
MBBFile2)
MBBFiles
unique(MBBBFiles)
unique(MBBFiles)
length(unique(MBBFiles))
278*2
q()
